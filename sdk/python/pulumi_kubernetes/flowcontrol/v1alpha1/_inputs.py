# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ... import meta as _meta

@pulumi.input_type
class FlowDistinguisherMethodArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str]) -> None:
        """
        FlowDistinguisherMethod specifies the method of a flow distinguisher.
        :param pulumi.Input[str] type: `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
        """
        __self__.type = type

@pulumi.input_type
class FlowSchemaArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['FlowSchemaSpecArgs']] = pulumi.input_property("spec")
    """
    `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """
    status: Optional[pulumi.Input['FlowSchemaStatusArgs']] = pulumi.input_property("status")
    """
    `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['FlowSchemaSpecArgs']] = None, status: Optional[pulumi.Input['FlowSchemaStatusArgs']] = None) -> None:
        """
        FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['FlowSchemaSpecArgs'] spec: `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['FlowSchemaStatusArgs'] status: `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'flowcontrol.apiserver.k8s.io/v1alpha1'
        __self__.kind = 'FlowSchema'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class FlowSchemaConditionArgs:
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    `lastTransitionTime` is the last time the condition transitioned from one status to another.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    `message` is a human-readable message indicating details about last transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
    """
    status: Optional[pulumi.Input[str]] = pulumi.input_property("status")
    """
    `status` is the status of the condition. Can be True, False, Unknown. Required.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    `type` is the type of the condition. Required.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None, status: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        FlowSchemaCondition describes conditions for a FlowSchema.
        :param pulumi.Input[str] last_transition_time: `lastTransitionTime` is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: `message` is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
        :param pulumi.Input[str] status: `status` is the status of the condition. Can be True, False, Unknown. Required.
        :param pulumi.Input[str] type: `type` is the type of the condition. Required.
        """
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason
        __self__.status = status
        __self__.type = type

@pulumi.input_type
class FlowSchemaSpecArgs:
    priority_level_configuration: pulumi.Input['PriorityLevelConfigurationReferenceArgs'] = pulumi.input_property("priorityLevelConfiguration")
    """
    `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
    """
    distinguisher_method: Optional[pulumi.Input['FlowDistinguisherMethodArgs']] = pulumi.input_property("distinguisherMethod")
    """
    `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
    """
    matching_precedence: Optional[pulumi.Input[float]] = pulumi.input_property("matchingPrecedence")
    """
    `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
    """
    rules: Optional[pulumi.Input[List[pulumi.Input['PolicyRulesWithSubjectsArgs']]]] = pulumi.input_property("rules")
    """
    `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, priority_level_configuration: pulumi.Input['PriorityLevelConfigurationReferenceArgs'], distinguisher_method: Optional[pulumi.Input['FlowDistinguisherMethodArgs']] = None, matching_precedence: Optional[pulumi.Input[float]] = None, rules: Optional[pulumi.Input[List[pulumi.Input['PolicyRulesWithSubjectsArgs']]]] = None) -> None:
        """
        FlowSchemaSpec describes how the FlowSchema's specification looks like.
        :param pulumi.Input['PriorityLevelConfigurationReferenceArgs'] priority_level_configuration: `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
        :param pulumi.Input['FlowDistinguisherMethodArgs'] distinguisher_method: `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
        :param pulumi.Input[float] matching_precedence: `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
        :param pulumi.Input[List[pulumi.Input['PolicyRulesWithSubjectsArgs']]] rules: `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
        """
        __self__.priority_level_configuration = priority_level_configuration
        __self__.distinguisher_method = distinguisher_method
        __self__.matching_precedence = matching_precedence
        __self__.rules = rules

@pulumi.input_type
class FlowSchemaStatusArgs:
    conditions: Optional[pulumi.Input[List[pulumi.Input['FlowSchemaConditionArgs']]]] = pulumi.input_property("conditions")
    """
    `conditions` is a list of the current states of FlowSchema.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, conditions: Optional[pulumi.Input[List[pulumi.Input['FlowSchemaConditionArgs']]]] = None) -> None:
        """
        FlowSchemaStatus represents the current state of a FlowSchema.
        :param pulumi.Input[List[pulumi.Input['FlowSchemaConditionArgs']]] conditions: `conditions` is a list of the current states of FlowSchema.
        """
        __self__.conditions = conditions

@pulumi.input_type
class GroupSubjectArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str]) -> None:
        """
        GroupSubject holds detailed information for group-kind subject.
        :param pulumi.Input[str] name: name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
        """
        __self__.name = name

@pulumi.input_type
class LimitResponseArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
    """
    queuing: Optional[pulumi.Input['QueuingConfigurationArgs']] = pulumi.input_property("queuing")
    """
    `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], queuing: Optional[pulumi.Input['QueuingConfigurationArgs']] = None) -> None:
        """
        LimitResponse defines how to handle requests that can not be executed right now.
        :param pulumi.Input[str] type: `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
        :param pulumi.Input['QueuingConfigurationArgs'] queuing: `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
        """
        __self__.type = type
        __self__.queuing = queuing

@pulumi.input_type
class LimitedPriorityLevelConfigurationArgs:
    assured_concurrency_shares: Optional[pulumi.Input[float]] = pulumi.input_property("assuredConcurrencyShares")
    """
    `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:

                ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )

    bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
    """
    limit_response: Optional[pulumi.Input['LimitResponseArgs']] = pulumi.input_property("limitResponse")
    """
    `limitResponse` indicates what to do with requests that can not be executed right now
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, assured_concurrency_shares: Optional[pulumi.Input[float]] = None, limit_response: Optional[pulumi.Input['LimitResponseArgs']] = None) -> None:
        """
        LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
         * How are requests for this priority level limited?
         * What should be done with requests that exceed the limit?
        :param pulumi.Input[float] assured_concurrency_shares: `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
               
                           ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
               
               bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
        :param pulumi.Input['LimitResponseArgs'] limit_response: `limitResponse` indicates what to do with requests that can not be executed right now
        """
        __self__.assured_concurrency_shares = assured_concurrency_shares
        __self__.limit_response = limit_response

@pulumi.input_type
class NonResourcePolicyRuleArgs:
    non_resource_ur_ls: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("nonResourceURLs")
    """
    `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
      - "/healthz" is legal
      - "/hea*" is illegal
      - "/hea" is legal but matches nothing
      - "/hea/*" also matches nothing
      - "/healthz/*" matches all per-component health checks.
    "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
    """
    verbs: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("verbs")
    """
    `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, non_resource_ur_ls: pulumi.Input[List[pulumi.Input[str]]], verbs: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
        :param pulumi.Input[List[pulumi.Input[str]]] non_resource_ur_ls: `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
                 - "/healthz" is legal
                 - "/hea*" is illegal
                 - "/hea" is legal but matches nothing
                 - "/hea/*" also matches nothing
                 - "/healthz/*" matches all per-component health checks.
               "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
        :param pulumi.Input[List[pulumi.Input[str]]] verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
        """
        __self__.non_resource_ur_ls = non_resource_ur_ls
        __self__.verbs = verbs

@pulumi.input_type
class PolicyRulesWithSubjectsArgs:
    subjects: pulumi.Input[List[pulumi.Input['SubjectArgs']]] = pulumi.input_property("subjects")
    """
    subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
    """
    non_resource_rules: Optional[pulumi.Input[List[pulumi.Input['NonResourcePolicyRuleArgs']]]] = pulumi.input_property("nonResourceRules")
    """
    `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
    """
    resource_rules: Optional[pulumi.Input[List[pulumi.Input['ResourcePolicyRuleArgs']]]] = pulumi.input_property("resourceRules")
    """
    `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, subjects: pulumi.Input[List[pulumi.Input['SubjectArgs']]], non_resource_rules: Optional[pulumi.Input[List[pulumi.Input['NonResourcePolicyRuleArgs']]]] = None, resource_rules: Optional[pulumi.Input[List[pulumi.Input['ResourcePolicyRuleArgs']]]] = None) -> None:
        """
        PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
        :param pulumi.Input[List[pulumi.Input['SubjectArgs']]] subjects: subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
        :param pulumi.Input[List[pulumi.Input['NonResourcePolicyRuleArgs']]] non_resource_rules: `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
        :param pulumi.Input[List[pulumi.Input['ResourcePolicyRuleArgs']]] resource_rules: `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
        """
        __self__.subjects = subjects
        __self__.non_resource_rules = non_resource_rules
        __self__.resource_rules = resource_rules

@pulumi.input_type
class PriorityLevelConfigurationArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['PriorityLevelConfigurationSpecArgs']] = pulumi.input_property("spec")
    """
    `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """
    status: Optional[pulumi.Input['PriorityLevelConfigurationStatusArgs']] = pulumi.input_property("status")
    """
    `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['PriorityLevelConfigurationSpecArgs']] = None, status: Optional[pulumi.Input['PriorityLevelConfigurationStatusArgs']] = None) -> None:
        """
        PriorityLevelConfiguration represents the configuration of a priority level.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['PriorityLevelConfigurationSpecArgs'] spec: `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['PriorityLevelConfigurationStatusArgs'] status: `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'flowcontrol.apiserver.k8s.io/v1alpha1'
        __self__.kind = 'PriorityLevelConfiguration'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class PriorityLevelConfigurationConditionArgs:
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    `lastTransitionTime` is the last time the condition transitioned from one status to another.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    `message` is a human-readable message indicating details about last transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
    """
    status: Optional[pulumi.Input[str]] = pulumi.input_property("status")
    """
    `status` is the status of the condition. Can be True, False, Unknown. Required.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    `type` is the type of the condition. Required.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None, status: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        PriorityLevelConfigurationCondition defines the condition of priority level.
        :param pulumi.Input[str] last_transition_time: `lastTransitionTime` is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: `message` is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
        :param pulumi.Input[str] status: `status` is the status of the condition. Can be True, False, Unknown. Required.
        :param pulumi.Input[str] type: `type` is the type of the condition. Required.
        """
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason
        __self__.status = status
        __self__.type = type

@pulumi.input_type
class PriorityLevelConfigurationReferenceArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    `name` is the name of the priority level configuration being referenced Required.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str]) -> None:
        """
        PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
        :param pulumi.Input[str] name: `name` is the name of the priority level configuration being referenced Required.
        """
        __self__.name = name

@pulumi.input_type
class PriorityLevelConfigurationSpecArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
    """
    limited: Optional[pulumi.Input['LimitedPriorityLevelConfigurationArgs']] = pulumi.input_property("limited")
    """
    `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], limited: Optional[pulumi.Input['LimitedPriorityLevelConfigurationArgs']] = None) -> None:
        """
        PriorityLevelConfigurationSpec specifies the configuration of a priority level.
        :param pulumi.Input[str] type: `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
        :param pulumi.Input['LimitedPriorityLevelConfigurationArgs'] limited: `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
        """
        __self__.type = type
        __self__.limited = limited

@pulumi.input_type
class PriorityLevelConfigurationStatusArgs:
    conditions: Optional[pulumi.Input[List[pulumi.Input['PriorityLevelConfigurationConditionArgs']]]] = pulumi.input_property("conditions")
    """
    `conditions` is the current state of "request-priority".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, conditions: Optional[pulumi.Input[List[pulumi.Input['PriorityLevelConfigurationConditionArgs']]]] = None) -> None:
        """
        PriorityLevelConfigurationStatus represents the current state of a "request-priority".
        :param pulumi.Input[List[pulumi.Input['PriorityLevelConfigurationConditionArgs']]] conditions: `conditions` is the current state of "request-priority".
        """
        __self__.conditions = conditions

@pulumi.input_type
class QueuingConfigurationArgs:
    hand_size: Optional[pulumi.Input[float]] = pulumi.input_property("handSize")
    """
    `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
    """
    queue_length_limit: Optional[pulumi.Input[float]] = pulumi.input_property("queueLengthLimit")
    """
    `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
    """
    queues: Optional[pulumi.Input[float]] = pulumi.input_property("queues")
    """
    `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hand_size: Optional[pulumi.Input[float]] = None, queue_length_limit: Optional[pulumi.Input[float]] = None, queues: Optional[pulumi.Input[float]] = None) -> None:
        """
        QueuingConfiguration holds the configuration parameters for queuing
        :param pulumi.Input[float] hand_size: `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
        :param pulumi.Input[float] queue_length_limit: `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
        :param pulumi.Input[float] queues: `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
        """
        __self__.hand_size = hand_size
        __self__.queue_length_limit = queue_length_limit
        __self__.queues = queues

@pulumi.input_type
class ResourcePolicyRuleArgs:
    api_groups: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("apiGroups")
    """
    `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
    """
    resources: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("resources")
    """
    `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
    """
    verbs: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("verbs")
    """
    `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
    """
    cluster_scope: Optional[pulumi.Input[bool]] = pulumi.input_property("clusterScope")
    """
    `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
    """
    namespaces: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("namespaces")
    """
    `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_groups: pulumi.Input[List[pulumi.Input[str]]], resources: pulumi.Input[List[pulumi.Input[str]]], verbs: pulumi.Input[List[pulumi.Input[str]]], cluster_scope: Optional[pulumi.Input[bool]] = None, namespaces: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
        :param pulumi.Input[List[pulumi.Input[str]]] api_groups: `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
        :param pulumi.Input[List[pulumi.Input[str]]] resources: `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
        :param pulumi.Input[List[pulumi.Input[str]]] verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
        :param pulumi.Input[bool] cluster_scope: `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
        :param pulumi.Input[List[pulumi.Input[str]]] namespaces: `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
        """
        __self__.api_groups = api_groups
        __self__.resources = resources
        __self__.verbs = verbs
        __self__.cluster_scope = cluster_scope
        __self__.namespaces = namespaces

@pulumi.input_type
class ServiceAccountSubjectArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
    """
    namespace: pulumi.Input[str] = pulumi.input_property("namespace")
    """
    `namespace` is the namespace of matching ServiceAccount objects. Required.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], namespace: pulumi.Input[str]) -> None:
        """
        ServiceAccountSubject holds detailed information for service-account-kind subject.
        :param pulumi.Input[str] name: `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
        :param pulumi.Input[str] namespace: `namespace` is the namespace of matching ServiceAccount objects. Required.
        """
        __self__.name = name
        __self__.namespace = namespace

@pulumi.input_type
class SubjectArgs:
    kind: pulumi.Input[str] = pulumi.input_property("kind")
    """
    Required
    """
    group: Optional[pulumi.Input['GroupSubjectArgs']] = pulumi.input_property("group")
    service_account: Optional[pulumi.Input['ServiceAccountSubjectArgs']] = pulumi.input_property("serviceAccount")
    user: Optional[pulumi.Input['UserSubjectArgs']] = pulumi.input_property("user")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, kind: pulumi.Input[str], group: Optional[pulumi.Input['GroupSubjectArgs']] = None, service_account: Optional[pulumi.Input['ServiceAccountSubjectArgs']] = None, user: Optional[pulumi.Input['UserSubjectArgs']] = None) -> None:
        """
        Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
        :param pulumi.Input[str] kind: Required
        """
        __self__.kind = kind
        __self__.group = group
        __self__.service_account = service_account
        __self__.user = user

@pulumi.input_type
class UserSubjectArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    `name` is the username that matches, or "*" to match all usernames. Required.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str]) -> None:
        """
        UserSubject holds detailed information for user-kind subject.
        :param pulumi.Input[str] name: `name` is the username that matches, or "*" to match all usernames. Required.
        """
        __self__.name = name

