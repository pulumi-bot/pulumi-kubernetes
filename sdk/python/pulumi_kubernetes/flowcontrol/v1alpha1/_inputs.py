# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from ... import meta as _meta

__all__ = [
    'FlowDistinguisherMethodArgs',
    'FlowSchemaArgs',
    'FlowSchemaConditionArgs',
    'FlowSchemaSpecArgs',
    'FlowSchemaStatusArgs',
    'GroupSubjectArgs',
    'LimitResponseArgs',
    'LimitedPriorityLevelConfigurationArgs',
    'NonResourcePolicyRuleArgs',
    'PolicyRulesWithSubjectsArgs',
    'PriorityLevelConfigurationArgs',
    'PriorityLevelConfigurationConditionArgs',
    'PriorityLevelConfigurationReferenceArgs',
    'PriorityLevelConfigurationSpecArgs',
    'PriorityLevelConfigurationStatusArgs',
    'QueuingConfigurationArgs',
    'ResourcePolicyRuleArgs',
    'ServiceAccountSubjectArgs',
    'SubjectArgs',
    'UserSubjectArgs',
]

@pulumi.input_type
class FlowDistinguisherMethodArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        """
        FlowDistinguisherMethod specifies the method of a flow distinguisher.
        :param pulumi.Input[str] type: `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class FlowSchemaArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = None,
                 spec: Optional[pulumi.Input['FlowSchemaSpecArgs']] = None,
                 status: Optional[pulumi.Input['FlowSchemaStatusArgs']] = None):
        """
        FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['FlowSchemaSpecArgs'] spec: `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['FlowSchemaStatusArgs'] status: `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        pulumi.set(__self__, "apiVersion", 'flowcontrol.apiserver.k8s.io/v1alpha1')
        pulumi.set(__self__, "kind", 'FlowSchema')
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        ...

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        ...

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']]:
        """
        `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        ...

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']]):
        ...

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['FlowSchemaSpecArgs']]:
        """
        `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        ...

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['FlowSchemaSpecArgs']]):
        ...

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['FlowSchemaStatusArgs']]:
        """
        `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        ...

    @status.setter
    def status(self, value: Optional[pulumi.Input['FlowSchemaStatusArgs']]):
        ...


@pulumi.input_type
class FlowSchemaConditionArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        FlowSchemaCondition describes conditions for a FlowSchema.
        :param pulumi.Input[str] last_transition_time: `lastTransitionTime` is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: `message` is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
        :param pulumi.Input[str] status: `status` is the status of the condition. Can be True, False, Unknown. Required.
        :param pulumi.Input[str] type: `type` is the type of the condition. Required.
        """
        pulumi.set(__self__, "lastTransitionTime", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        `lastTransitionTime` is the last time the condition transitioned from one status to another.
        """
        ...

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        `message` is a human-readable message indicating details about last transition.
        """
        ...

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        ...

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        `status` is the status of the condition. Can be True, False, Unknown. Required.
        """
        ...

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        `type` is the type of the condition. Required.
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class FlowSchemaSpecArgs:
    def __init__(__self__, *,
                 priority_level_configuration: pulumi.Input['PriorityLevelConfigurationReferenceArgs'],
                 distinguisher_method: Optional[pulumi.Input['FlowDistinguisherMethodArgs']] = None,
                 matching_precedence: Optional[pulumi.Input[float]] = None,
                 rules: Optional[pulumi.Input[List[pulumi.Input['PolicyRulesWithSubjectsArgs']]]] = None):
        """
        FlowSchemaSpec describes how the FlowSchema's specification looks like.
        :param pulumi.Input['PriorityLevelConfigurationReferenceArgs'] priority_level_configuration: `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
        :param pulumi.Input['FlowDistinguisherMethodArgs'] distinguisher_method: `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
        :param pulumi.Input[float] matching_precedence: `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
        :param pulumi.Input[List[pulumi.Input['PolicyRulesWithSubjectsArgs']]] rules: `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
        """
        pulumi.set(__self__, "priorityLevelConfiguration", priority_level_configuration)
        pulumi.set(__self__, "distinguisherMethod", distinguisher_method)
        pulumi.set(__self__, "matchingPrecedence", matching_precedence)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="priorityLevelConfiguration")
    def priority_level_configuration(self) -> pulumi.Input['PriorityLevelConfigurationReferenceArgs']:
        """
        `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
        """
        ...

    @priority_level_configuration.setter
    def priority_level_configuration(self, value: pulumi.Input['PriorityLevelConfigurationReferenceArgs']):
        ...

    @property
    @pulumi.getter(name="distinguisherMethod")
    def distinguisher_method(self) -> Optional[pulumi.Input['FlowDistinguisherMethodArgs']]:
        """
        `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
        """
        ...

    @distinguisher_method.setter
    def distinguisher_method(self, value: Optional[pulumi.Input['FlowDistinguisherMethodArgs']]):
        ...

    @property
    @pulumi.getter(name="matchingPrecedence")
    def matching_precedence(self) -> Optional[pulumi.Input[float]]:
        """
        `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
        """
        ...

    @matching_precedence.setter
    def matching_precedence(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[List[pulumi.Input['PolicyRulesWithSubjectsArgs']]]]:
        """
        `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
        """
        ...

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[List[pulumi.Input['PolicyRulesWithSubjectsArgs']]]]):
        ...


@pulumi.input_type
class FlowSchemaStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[List[pulumi.Input['FlowSchemaConditionArgs']]]] = None):
        """
        FlowSchemaStatus represents the current state of a FlowSchema.
        :param pulumi.Input[List[pulumi.Input['FlowSchemaConditionArgs']]] conditions: `conditions` is a list of the current states of FlowSchema.
        """
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[List[pulumi.Input['FlowSchemaConditionArgs']]]]:
        """
        `conditions` is a list of the current states of FlowSchema.
        """
        ...

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[List[pulumi.Input['FlowSchemaConditionArgs']]]]):
        ...


@pulumi.input_type
class GroupSubjectArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        GroupSubject holds detailed information for group-kind subject.
        :param pulumi.Input[str] name: name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class LimitResponseArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 queuing: Optional[pulumi.Input['QueuingConfigurationArgs']] = None):
        """
        LimitResponse defines how to handle requests that can not be executed right now.
        :param pulumi.Input[str] type: `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
        :param pulumi.Input['QueuingConfigurationArgs'] queuing: `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "queuing", queuing)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def queuing(self) -> Optional[pulumi.Input['QueuingConfigurationArgs']]:
        """
        `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
        """
        ...

    @queuing.setter
    def queuing(self, value: Optional[pulumi.Input['QueuingConfigurationArgs']]):
        ...


@pulumi.input_type
class LimitedPriorityLevelConfigurationArgs:
    def __init__(__self__, *,
                 assured_concurrency_shares: Optional[pulumi.Input[float]] = None,
                 limit_response: Optional[pulumi.Input['LimitResponseArgs']] = None):
        """
        LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
         * How are requests for this priority level limited?
         * What should be done with requests that exceed the limit?
        :param pulumi.Input[float] assured_concurrency_shares: `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
               
                           ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
               
               bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
        :param pulumi.Input['LimitResponseArgs'] limit_response: `limitResponse` indicates what to do with requests that can not be executed right now
        """
        pulumi.set(__self__, "assuredConcurrencyShares", assured_concurrency_shares)
        pulumi.set(__self__, "limitResponse", limit_response)

    @property
    @pulumi.getter(name="assuredConcurrencyShares")
    def assured_concurrency_shares(self) -> Optional[pulumi.Input[float]]:
        """
        `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:

                    ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )

        bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
        """
        ...

    @assured_concurrency_shares.setter
    def assured_concurrency_shares(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="limitResponse")
    def limit_response(self) -> Optional[pulumi.Input['LimitResponseArgs']]:
        """
        `limitResponse` indicates what to do with requests that can not be executed right now
        """
        ...

    @limit_response.setter
    def limit_response(self, value: Optional[pulumi.Input['LimitResponseArgs']]):
        ...


@pulumi.input_type
class NonResourcePolicyRuleArgs:
    def __init__(__self__, *,
                 non_resource_urls: pulumi.Input[List[pulumi.Input[str]]],
                 verbs: pulumi.Input[List[pulumi.Input[str]]]):
        """
        NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
        :param pulumi.Input[List[pulumi.Input[str]]] non_resource_urls: `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
                 - "/healthz" is legal
                 - "/hea*" is illegal
                 - "/hea" is legal but matches nothing
                 - "/hea/*" also matches nothing
                 - "/healthz/*" matches all per-component health checks.
               "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
        :param pulumi.Input[List[pulumi.Input[str]]] verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
        """
        pulumi.set(__self__, "nonResourceURLs", non_resource_urls)
        pulumi.set(__self__, "verbs", verbs)

    @property
    @pulumi.getter(name="nonResourceURLs")
    def non_resource_urls(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
          - "/healthz" is legal
          - "/hea*" is illegal
          - "/hea" is legal but matches nothing
          - "/hea/*" also matches nothing
          - "/healthz/*" matches all per-component health checks.
        "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
        """
        ...

    @non_resource_urls.setter
    def non_resource_urls(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter
    def verbs(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
        """
        ...

    @verbs.setter
    def verbs(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...


@pulumi.input_type
class PolicyRulesWithSubjectsArgs:
    def __init__(__self__, *,
                 subjects: pulumi.Input[List[pulumi.Input['SubjectArgs']]],
                 non_resource_rules: Optional[pulumi.Input[List[pulumi.Input['NonResourcePolicyRuleArgs']]]] = None,
                 resource_rules: Optional[pulumi.Input[List[pulumi.Input['ResourcePolicyRuleArgs']]]] = None):
        """
        PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
        :param pulumi.Input[List[pulumi.Input['SubjectArgs']]] subjects: subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
        :param pulumi.Input[List[pulumi.Input['NonResourcePolicyRuleArgs']]] non_resource_rules: `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
        :param pulumi.Input[List[pulumi.Input['ResourcePolicyRuleArgs']]] resource_rules: `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
        """
        pulumi.set(__self__, "subjects", subjects)
        pulumi.set(__self__, "nonResourceRules", non_resource_rules)
        pulumi.set(__self__, "resourceRules", resource_rules)

    @property
    @pulumi.getter
    def subjects(self) -> pulumi.Input[List[pulumi.Input['SubjectArgs']]]:
        """
        subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
        """
        ...

    @subjects.setter
    def subjects(self, value: pulumi.Input[List[pulumi.Input['SubjectArgs']]]):
        ...

    @property
    @pulumi.getter(name="nonResourceRules")
    def non_resource_rules(self) -> Optional[pulumi.Input[List[pulumi.Input['NonResourcePolicyRuleArgs']]]]:
        """
        `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
        """
        ...

    @non_resource_rules.setter
    def non_resource_rules(self, value: Optional[pulumi.Input[List[pulumi.Input['NonResourcePolicyRuleArgs']]]]):
        ...

    @property
    @pulumi.getter(name="resourceRules")
    def resource_rules(self) -> Optional[pulumi.Input[List[pulumi.Input['ResourcePolicyRuleArgs']]]]:
        """
        `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
        """
        ...

    @resource_rules.setter
    def resource_rules(self, value: Optional[pulumi.Input[List[pulumi.Input['ResourcePolicyRuleArgs']]]]):
        ...


@pulumi.input_type
class PriorityLevelConfigurationArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = None,
                 spec: Optional[pulumi.Input['PriorityLevelConfigurationSpecArgs']] = None,
                 status: Optional[pulumi.Input['PriorityLevelConfigurationStatusArgs']] = None):
        """
        PriorityLevelConfiguration represents the configuration of a priority level.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaArgs'] metadata: `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['PriorityLevelConfigurationSpecArgs'] spec: `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['PriorityLevelConfigurationStatusArgs'] status: `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        pulumi.set(__self__, "apiVersion", 'flowcontrol.apiserver.k8s.io/v1alpha1')
        pulumi.set(__self__, "kind", 'PriorityLevelConfiguration')
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        ...

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        ...

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']]:
        """
        `metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        ...

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']]):
        ...

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['PriorityLevelConfigurationSpecArgs']]:
        """
        `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        ...

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['PriorityLevelConfigurationSpecArgs']]):
        ...

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['PriorityLevelConfigurationStatusArgs']]:
        """
        `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        ...

    @status.setter
    def status(self, value: Optional[pulumi.Input['PriorityLevelConfigurationStatusArgs']]):
        ...


@pulumi.input_type
class PriorityLevelConfigurationConditionArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        PriorityLevelConfigurationCondition defines the condition of priority level.
        :param pulumi.Input[str] last_transition_time: `lastTransitionTime` is the last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: `message` is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
        :param pulumi.Input[str] status: `status` is the status of the condition. Can be True, False, Unknown. Required.
        :param pulumi.Input[str] type: `type` is the type of the condition. Required.
        """
        pulumi.set(__self__, "lastTransitionTime", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        `lastTransitionTime` is the last time the condition transitioned from one status to another.
        """
        ...

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        `message` is a human-readable message indicating details about last transition.
        """
        ...

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        ...

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        `status` is the status of the condition. Can be True, False, Unknown. Required.
        """
        ...

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        `type` is the type of the condition. Required.
        """
        ...

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class PriorityLevelConfigurationReferenceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
        :param pulumi.Input[str] name: `name` is the name of the priority level configuration being referenced Required.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        `name` is the name of the priority level configuration being referenced Required.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class PriorityLevelConfigurationSpecArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 limited: Optional[pulumi.Input['LimitedPriorityLevelConfigurationArgs']] = None):
        """
        PriorityLevelConfigurationSpec specifies the configuration of a priority level.
        :param pulumi.Input[str] type: `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
        :param pulumi.Input['LimitedPriorityLevelConfigurationArgs'] limited: `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "limited", limited)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
        """
        ...

    @type.setter
    def type(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def limited(self) -> Optional[pulumi.Input['LimitedPriorityLevelConfigurationArgs']]:
        """
        `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
        """
        ...

    @limited.setter
    def limited(self, value: Optional[pulumi.Input['LimitedPriorityLevelConfigurationArgs']]):
        ...


@pulumi.input_type
class PriorityLevelConfigurationStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[List[pulumi.Input['PriorityLevelConfigurationConditionArgs']]]] = None):
        """
        PriorityLevelConfigurationStatus represents the current state of a "request-priority".
        :param pulumi.Input[List[pulumi.Input['PriorityLevelConfigurationConditionArgs']]] conditions: `conditions` is the current state of "request-priority".
        """
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[List[pulumi.Input['PriorityLevelConfigurationConditionArgs']]]]:
        """
        `conditions` is the current state of "request-priority".
        """
        ...

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[List[pulumi.Input['PriorityLevelConfigurationConditionArgs']]]]):
        ...


@pulumi.input_type
class QueuingConfigurationArgs:
    def __init__(__self__, *,
                 hand_size: Optional[pulumi.Input[float]] = None,
                 queue_length_limit: Optional[pulumi.Input[float]] = None,
                 queues: Optional[pulumi.Input[float]] = None):
        """
        QueuingConfiguration holds the configuration parameters for queuing
        :param pulumi.Input[float] hand_size: `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
        :param pulumi.Input[float] queue_length_limit: `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
        :param pulumi.Input[float] queues: `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
        """
        pulumi.set(__self__, "handSize", hand_size)
        pulumi.set(__self__, "queueLengthLimit", queue_length_limit)
        pulumi.set(__self__, "queues", queues)

    @property
    @pulumi.getter(name="handSize")
    def hand_size(self) -> Optional[pulumi.Input[float]]:
        """
        `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
        """
        ...

    @hand_size.setter
    def hand_size(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="queueLengthLimit")
    def queue_length_limit(self) -> Optional[pulumi.Input[float]]:
        """
        `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
        """
        ...

    @queue_length_limit.setter
    def queue_length_limit(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def queues(self) -> Optional[pulumi.Input[float]]:
        """
        `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
        """
        ...

    @queues.setter
    def queues(self, value: Optional[pulumi.Input[float]]):
        ...


@pulumi.input_type
class ResourcePolicyRuleArgs:
    def __init__(__self__, *,
                 api_groups: pulumi.Input[List[pulumi.Input[str]]],
                 resources: pulumi.Input[List[pulumi.Input[str]]],
                 verbs: pulumi.Input[List[pulumi.Input[str]]],
                 cluster_scope: Optional[pulumi.Input[bool]] = None,
                 namespaces: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
        :param pulumi.Input[List[pulumi.Input[str]]] api_groups: `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
        :param pulumi.Input[List[pulumi.Input[str]]] resources: `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
        :param pulumi.Input[List[pulumi.Input[str]]] verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
        :param pulumi.Input[bool] cluster_scope: `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
        :param pulumi.Input[List[pulumi.Input[str]]] namespaces: `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
        """
        pulumi.set(__self__, "apiGroups", api_groups)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "verbs", verbs)
        pulumi.set(__self__, "clusterScope", cluster_scope)
        pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="apiGroups")
    def api_groups(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
        """
        ...

    @api_groups.setter
    def api_groups(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
        """
        ...

    @resources.setter
    def resources(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter
    def verbs(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
        """
        ...

    @verbs.setter
    def verbs(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        ...

    @property
    @pulumi.getter(name="clusterScope")
    def cluster_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
        """
        ...

    @cluster_scope.setter
    def cluster_scope(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
        """
        ...

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ServiceAccountSubjectArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        ServiceAccountSubject holds detailed information for service-account-kind subject.
        :param pulumi.Input[str] name: `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
        :param pulumi.Input[str] namespace: `namespace` is the namespace of matching ServiceAccount objects. Required.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        `namespace` is the namespace of matching ServiceAccount objects. Required.
        """
        ...

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        ...


@pulumi.input_type
class SubjectArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 group: Optional[pulumi.Input['GroupSubjectArgs']] = None,
                 service_account: Optional[pulumi.Input['ServiceAccountSubjectArgs']] = None,
                 user: Optional[pulumi.Input['UserSubjectArgs']] = None):
        """
        Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
        :param pulumi.Input[str] kind: Required
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "serviceAccount", service_account)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Required
        """
        ...

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input['GroupSubjectArgs']]:
        ...

    @group.setter
    def group(self, value: Optional[pulumi.Input['GroupSubjectArgs']]):
        ...

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input['ServiceAccountSubjectArgs']]:
        ...

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input['ServiceAccountSubjectArgs']]):
        ...

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input['UserSubjectArgs']]:
        ...

    @user.setter
    def user(self, value: Optional[pulumi.Input['UserSubjectArgs']]):
        ...


@pulumi.input_type
class UserSubjectArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        UserSubject holds detailed information for user-kind subject.
        :param pulumi.Input[str] name: `name` is the username that matches, or "*" to match all usernames. Required.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        `name` is the username that matches, or "*" to match all usernames. Required.
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...


