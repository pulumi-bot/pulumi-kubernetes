# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs
from ... import meta as _meta

__all__ = [
    'CrossVersionObjectReference',
    'ExternalMetricSource',
    'ExternalMetricStatus',
    'HPAScalingPolicy',
    'HPAScalingRules',
    'HorizontalPodAutoscaler',
    'HorizontalPodAutoscalerBehavior',
    'HorizontalPodAutoscalerCondition',
    'HorizontalPodAutoscalerSpec',
    'HorizontalPodAutoscalerStatus',
    'MetricIdentifier',
    'MetricSpec',
    'MetricStatus',
    'MetricTarget',
    'MetricValueStatus',
    'ObjectMetricSource',
    'ObjectMetricStatus',
    'PodsMetricSource',
    'PodsMetricStatus',
    'ResourceMetricSource',
    'ResourceMetricStatus',
]

@pulumi.output_type
class CrossVersionObjectReference(dict):
    """
    CrossVersionObjectReference contains enough information to let you identify the referred resource.
    """
    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        API version of the referent
        """
        ...

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ExternalMetricSource(dict):
    """
    ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
    """
    @property
    @pulumi.getter
    def metric(self) -> 'outputs.MetricIdentifier':
        """
        metric identifies the target metric by name and selector
        """
        ...

    @property
    @pulumi.getter
    def target(self) -> 'outputs.MetricTarget':
        """
        target specifies the target value for the given metric
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ExternalMetricStatus(dict):
    """
    ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
    """
    @property
    @pulumi.getter
    def current(self) -> 'outputs.MetricValueStatus':
        """
        current contains the current value for the given metric
        """
        ...

    @property
    @pulumi.getter
    def metric(self) -> 'outputs.MetricIdentifier':
        """
        metric identifies the target metric by name and selector
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HPAScalingPolicy(dict):
    """
    HPAScalingPolicy is a single policy which must hold true for a specified past interval.
    """
    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> float:
        """
        PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is used to specify the scaling policy.
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        Value contains the amount of change which is permitted by the policy. It must be greater than zero
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HPAScalingRules(dict):
    """
    HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
    """
    @property
    @pulumi.getter
    def policies(self) -> Optional[List['outputs.HPAScalingPolicy']]:
        """
        policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
        """
        ...

    @property
    @pulumi.getter(name="selectPolicy")
    def select_policy(self) -> Optional[str]:
        """
        selectPolicy is used to specify which policy should be used. If not set, the default value MaxPolicySelect is used.
        """
        ...

    @property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> Optional[float]:
        """
        StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorizontalPodAutoscaler(dict):
    """
    HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
    """
    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        ...

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        ...

    @property
    @pulumi.getter
    def metadata(self) -> Optional['_meta.v1.outputs.ObjectMeta']:
        """
        metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        ...

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.HorizontalPodAutoscalerSpec']:
        """
        spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
        """
        ...

    @property
    @pulumi.getter
    def status(self) -> Optional['outputs.HorizontalPodAutoscalerStatus']:
        """
        status is the current information about the autoscaler.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorizontalPodAutoscalerBehavior(dict):
    """
    HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
    """
    @property
    @pulumi.getter(name="scaleDown")
    def scale_down(self) -> Optional['outputs.HPAScalingRules']:
        """
        scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).
        """
        ...

    @property
    @pulumi.getter(name="scaleUp")
    def scale_up(self) -> Optional['outputs.HPAScalingRules']:
        """
        scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:
          * increase no more than 4 pods per 60 seconds
          * double the number of pods per 60 seconds
        No stabilization is used.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorizontalPodAutoscalerCondition(dict):
    """
    HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
    """
    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        lastTransitionTime is the last time the condition transitioned from one status to another
        """
        ...

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        message is a human-readable explanation containing details about the transition
        """
        ...

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        reason is the reason for the condition's last transition.
        """
        ...

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status is the status of the condition (True, False, Unknown)
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type describes the current condition
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorizontalPodAutoscalerSpec(dict):
    """
    HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
    """
    @property
    @pulumi.getter
    def behavior(self) -> Optional['outputs.HorizontalPodAutoscalerBehavior']:
        """
        behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.
        """
        ...

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> float:
        """
        maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        """
        ...

    @property
    @pulumi.getter
    def metrics(self) -> Optional[List['outputs.MetricSpec']]:
        """
        metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
        """
        ...

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[float]:
        """
        minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
        """
        ...

    @property
    @pulumi.getter(name="scaleTargetRef")
    def scale_target_ref(self) -> 'outputs.CrossVersionObjectReference':
        """
        scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorizontalPodAutoscalerStatus(dict):
    """
    HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
    """
    @property
    @pulumi.getter
    def conditions(self) -> List['outputs.HorizontalPodAutoscalerCondition']:
        """
        conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
        """
        ...

    @property
    @pulumi.getter(name="currentMetrics")
    def current_metrics(self) -> Optional[List['outputs.MetricStatus']]:
        """
        currentMetrics is the last read state of the metrics used by this autoscaler.
        """
        ...

    @property
    @pulumi.getter(name="currentReplicas")
    def current_replicas(self) -> float:
        """
        currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
        """
        ...

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> float:
        """
        desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
        """
        ...

    @property
    @pulumi.getter(name="lastScaleTime")
    def last_scale_time(self) -> Optional[str]:
        """
        lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
        """
        ...

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[float]:
        """
        observedGeneration is the most recent generation observed by this autoscaler.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricIdentifier(dict):
    """
    MetricIdentifier defines the name and optionally selector for a metric
    """
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the name of the given metric
        """
        ...

    @property
    @pulumi.getter
    def selector(self) -> Optional['_meta.v1.outputs.LabelSelector']:
        """
        selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricSpec(dict):
    """
    MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
    """
    @property
    @pulumi.getter
    def external(self) -> Optional['outputs.ExternalMetricSource']:
        """
        external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
        """
        ...

    @property
    @pulumi.getter
    def object(self) -> Optional['outputs.ObjectMetricSource']:
        """
        object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
        """
        ...

    @property
    @pulumi.getter
    def pods(self) -> Optional['outputs.PodsMetricSource']:
        """
        pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
        """
        ...

    @property
    @pulumi.getter
    def resource(self) -> Optional['outputs.ResourceMetricSource']:
        """
        resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type is the type of metric source.  It should be one of "Object", "Pods" or "Resource", each mapping to a matching field in the object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricStatus(dict):
    """
    MetricStatus describes the last-read state of a single metric.
    """
    @property
    @pulumi.getter
    def external(self) -> Optional['outputs.ExternalMetricStatus']:
        """
        external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
        """
        ...

    @property
    @pulumi.getter
    def object(self) -> Optional['outputs.ObjectMetricStatus']:
        """
        object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
        """
        ...

    @property
    @pulumi.getter
    def pods(self) -> Optional['outputs.PodsMetricStatus']:
        """
        pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
        """
        ...

    @property
    @pulumi.getter
    def resource(self) -> Optional['outputs.ResourceMetricStatus']:
        """
        resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type is the type of metric source.  It will be one of "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricTarget(dict):
    """
    MetricTarget defines the target value, average value, or average utilization of a specific metric
    """
    @property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[float]:
        """
        averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
        """
        ...

    @property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[str]:
        """
        averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
        """
        ...

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type represents whether the metric type is Utilization, Value, or AverageValue
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value is the target value of the metric (as a quantity).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricValueStatus(dict):
    """
    MetricValueStatus holds the current value for a metric
    """
    @property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[float]:
        """
        currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
        """
        ...

    @property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[str]:
        """
        averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
        """
        ...

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value is the current value of the metric (as a quantity).
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ObjectMetricSource(dict):
    """
    ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
    """
    @property
    @pulumi.getter(name="describedObject")
    def described_object(self) -> 'outputs.CrossVersionObjectReference':
        ...

    @property
    @pulumi.getter
    def metric(self) -> 'outputs.MetricIdentifier':
        """
        metric identifies the target metric by name and selector
        """
        ...

    @property
    @pulumi.getter
    def target(self) -> 'outputs.MetricTarget':
        """
        target specifies the target value for the given metric
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ObjectMetricStatus(dict):
    """
    ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
    """
    @property
    @pulumi.getter
    def current(self) -> 'outputs.MetricValueStatus':
        """
        current contains the current value for the given metric
        """
        ...

    @property
    @pulumi.getter(name="describedObject")
    def described_object(self) -> 'outputs.CrossVersionObjectReference':
        ...

    @property
    @pulumi.getter
    def metric(self) -> 'outputs.MetricIdentifier':
        """
        metric identifies the target metric by name and selector
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PodsMetricSource(dict):
    """
    PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
    """
    @property
    @pulumi.getter
    def metric(self) -> 'outputs.MetricIdentifier':
        """
        metric identifies the target metric by name and selector
        """
        ...

    @property
    @pulumi.getter
    def target(self) -> 'outputs.MetricTarget':
        """
        target specifies the target value for the given metric
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PodsMetricStatus(dict):
    """
    PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
    """
    @property
    @pulumi.getter
    def current(self) -> 'outputs.MetricValueStatus':
        """
        current contains the current value for the given metric
        """
        ...

    @property
    @pulumi.getter
    def metric(self) -> 'outputs.MetricIdentifier':
        """
        metric identifies the target metric by name and selector
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourceMetricSource(dict):
    """
    ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
    """
    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name is the name of the resource in question.
        """
        ...

    @property
    @pulumi.getter
    def target(self) -> 'outputs.MetricTarget':
        """
        target specifies the target value for the given metric
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourceMetricStatus(dict):
    """
    ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
    """
    @property
    @pulumi.getter
    def current(self) -> 'outputs.MetricValueStatus':
        """
        current contains the current value for the given metric
        """
        ...

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the resource in question.
        """
        ...

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


