# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.output_type
class CrossVersionObjectReference(dict):
    """
    CrossVersionObjectReference contains enough information to let you identify the referred resource.
    """
    api_version: Optional[str] = pulumi.output_property("apiVersion")
    """
    API version of the referent
    """
    kind: str = pulumi.output_property("kind")
    """
    Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    """
    name: str = pulumi.output_property("name")
    """
    Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorizontalPodAutoscaler(dict):
    """
    configuration of a horizontal pod autoscaler.
    """
    api_version: Optional[str] = pulumi.output_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[str] = pulumi.output_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional['outputs.ObjectMeta'] = pulumi.output_property("metadata")
    """
    Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional['outputs.HorizontalPodAutoscalerSpec'] = pulumi.output_property("spec")
    """
    behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    """
    status: Optional['outputs.HorizontalPodAutoscalerStatus'] = pulumi.output_property("status")
    """
    current information about the autoscaler.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorizontalPodAutoscalerSpec(dict):
    """
    specification of a horizontal pod autoscaler.
    """
    max_replicas: float = pulumi.output_property("maxReplicas")
    """
    upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
    """
    min_replicas: Optional[float] = pulumi.output_property("minReplicas")
    """
    minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
    """
    scale_target_ref: 'outputs.CrossVersionObjectReference' = pulumi.output_property("scaleTargetRef")
    """
    reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
    """
    target_cpu_utilization_percentage: Optional[float] = pulumi.output_property("targetCPUUtilizationPercentage")
    """
    target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HorizontalPodAutoscalerStatus(dict):
    """
    current status of a horizontal pod autoscaler
    """
    current_cpu_utilization_percentage: Optional[float] = pulumi.output_property("currentCPUUtilizationPercentage")
    """
    current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
    """
    current_replicas: float = pulumi.output_property("currentReplicas")
    """
    current number of replicas of pods managed by this autoscaler.
    """
    desired_replicas: float = pulumi.output_property("desiredReplicas")
    """
    desired number of replicas of pods managed by this autoscaler.
    """
    last_scale_time: Optional[str] = pulumi.output_property("lastScaleTime")
    """
    last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
    """
    observed_generation: Optional[float] = pulumi.output_property("observedGeneration")
    """
    most recent generation observed by this autoscaler.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


