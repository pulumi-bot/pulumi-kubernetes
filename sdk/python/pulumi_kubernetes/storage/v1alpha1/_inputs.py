# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class VolumeAttachmentArgs:
    spec: pulumi.Input['VolumeAttachmentSpecArgs'] = pulumi.input_property("spec")
    """
    Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
    """
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    status: Optional[pulumi.Input['VolumeAttachmentStatusArgs']] = pulumi.input_property("status")
    """
    Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, spec: pulumi.Input['VolumeAttachmentSpecArgs'], api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, status: Optional[pulumi.Input['VolumeAttachmentStatusArgs']] = None) -> None:
        """
        VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.

        VolumeAttachment objects are non-namespaced.
        :param pulumi.Input['VolumeAttachmentSpecArgs'] spec: Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['VolumeAttachmentStatusArgs'] status: Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
        """
        __self__.spec = spec
        __self__.api_version = 'storage.k8s.io/v1alpha1'
        __self__.kind = 'VolumeAttachment'
        __self__.metadata = metadata
        __self__.status = status

@pulumi.input_type
class VolumeAttachmentSourceArgs:
    inline_volume_spec: Optional[pulumi.Input['PersistentVolumeSpecArgs']] = pulumi.input_property("inlineVolumeSpec")
    """
    inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
    """
    persistent_volume_name: Optional[pulumi.Input[str]] = pulumi.input_property("persistentVolumeName")
    """
    Name of the persistent volume to attach.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, inline_volume_spec: Optional[pulumi.Input['PersistentVolumeSpecArgs']] = None, persistent_volume_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
        :param pulumi.Input['PersistentVolumeSpecArgs'] inline_volume_spec: inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
        :param pulumi.Input[str] persistent_volume_name: Name of the persistent volume to attach.
        """
        __self__.inline_volume_spec = inline_volume_spec
        __self__.persistent_volume_name = persistent_volume_name

@pulumi.input_type
class VolumeAttachmentSpecArgs:
    attacher: pulumi.Input[str] = pulumi.input_property("attacher")
    """
    Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
    """
    node_name: pulumi.Input[str] = pulumi.input_property("nodeName")
    """
    The node that the volume should be attached to.
    """
    source: pulumi.Input['VolumeAttachmentSourceArgs'] = pulumi.input_property("source")
    """
    Source represents the volume that should be attached.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, attacher: pulumi.Input[str], node_name: pulumi.Input[str], source: pulumi.Input['VolumeAttachmentSourceArgs']) -> None:
        """
        VolumeAttachmentSpec is the specification of a VolumeAttachment request.
        :param pulumi.Input[str] attacher: Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
        :param pulumi.Input[str] node_name: The node that the volume should be attached to.
        :param pulumi.Input['VolumeAttachmentSourceArgs'] source: Source represents the volume that should be attached.
        """
        __self__.attacher = attacher
        __self__.node_name = node_name
        __self__.source = source

@pulumi.input_type
class VolumeAttachmentStatusArgs:
    attached: pulumi.Input[bool] = pulumi.input_property("attached")
    """
    Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
    """
    attach_error: Optional[pulumi.Input['VolumeErrorArgs']] = pulumi.input_property("attachError")
    """
    The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
    """
    attachment_metadata: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("attachmentMetadata")
    """
    Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
    """
    detach_error: Optional[pulumi.Input['VolumeErrorArgs']] = pulumi.input_property("detachError")
    """
    The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, attached: pulumi.Input[bool], attach_error: Optional[pulumi.Input['VolumeErrorArgs']] = None, attachment_metadata: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, detach_error: Optional[pulumi.Input['VolumeErrorArgs']] = None) -> None:
        """
        VolumeAttachmentStatus is the status of a VolumeAttachment request.
        :param pulumi.Input[bool] attached: Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
        :param pulumi.Input['VolumeErrorArgs'] attach_error: The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] attachment_metadata: Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
        :param pulumi.Input['VolumeErrorArgs'] detach_error: The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
        """
        __self__.attached = attached
        __self__.attach_error = attach_error
        __self__.attachment_metadata = attachment_metadata
        __self__.detach_error = detach_error

@pulumi.input_type
class VolumeErrorArgs:
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
    """
    time: Optional[pulumi.Input[str]] = pulumi.input_property("time")
    """
    Time the error was encountered.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, message: Optional[pulumi.Input[str]] = None, time: Optional[pulumi.Input[str]] = None) -> None:
        """
        VolumeError captures an error encountered during a volume operation.
        :param pulumi.Input[str] message: String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
        :param pulumi.Input[str] time: Time the error was encountered.
        """
        __self__.message = message
        __self__.time = time

