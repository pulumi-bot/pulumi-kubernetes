# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class CertificateSigningRequestArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    spec: Optional[pulumi.Input['CertificateSigningRequestSpecArgs']] = pulumi.input_property("spec")
    """
    The certificate request itself and any additional information.
    """
    status: Optional[pulumi.Input['CertificateSigningRequestStatusArgs']] = pulumi.input_property("status")
    """
    Derived information about the request.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['CertificateSigningRequestSpecArgs']] = None, status: Optional[pulumi.Input['CertificateSigningRequestStatusArgs']] = None) -> None:
        """
        Describes a certificate signing request
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['CertificateSigningRequestSpecArgs'] spec: The certificate request itself and any additional information.
        :param pulumi.Input['CertificateSigningRequestStatusArgs'] status: Derived information about the request.
        """
        __self__.api_version = 'certificates.k8s.io/v1beta1'
        __self__.kind = 'CertificateSigningRequest'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class CertificateSigningRequestConditionArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    request approval state, currently Approved or Denied.
    """
    last_update_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastUpdateTime")
    """
    timestamp for the last update to this condition
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    human readable message with details about the request state
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    brief reason for the request state
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], last_update_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        :param pulumi.Input[str] type: request approval state, currently Approved or Denied.
        :param pulumi.Input[str] last_update_time: timestamp for the last update to this condition
        :param pulumi.Input[str] message: human readable message with details about the request state
        :param pulumi.Input[str] reason: brief reason for the request state
        """
        __self__.type = type
        __self__.last_update_time = last_update_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class CertificateSigningRequestSpecArgs:
    request: pulumi.Input[str] = pulumi.input_property("request")
    """
    Base64-encoded PKCS#10 CSR data
    """
    extra: Optional[pulumi.Input[Dict[str, pulumi.Input[List[pulumi.Input[str]]]]]] = pulumi.input_property("extra")
    """
    Extra information about the requesting user. See user.Info interface for details.
    """
    groups: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("groups")
    """
    Group information about the requesting user. See user.Info interface for details.
    """
    signer_name: Optional[pulumi.Input[str]] = pulumi.input_property("signerName")
    """
    Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
     1. If it's a kubelet client certificate, it is assigned
        "kubernetes.io/kube-apiserver-client-kubelet".
     2. If it's a kubelet serving certificate, it is assigned
        "kubernetes.io/kubelet-serving".
     3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
    Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
    """
    uid: Optional[pulumi.Input[str]] = pulumi.input_property("uid")
    """
    UID information about the requesting user. See user.Info interface for details.
    """
    usages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("usages")
    """
    allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
         https://tools.ietf.org/html/rfc5280#section-4.2.1.12
    """
    username: Optional[pulumi.Input[str]] = pulumi.input_property("username")
    """
    Information about the requesting user. See user.Info interface for details.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, request: pulumi.Input[str], extra: Optional[pulumi.Input[Dict[str, pulumi.Input[List[pulumi.Input[str]]]]]] = None, groups: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, signer_name: Optional[pulumi.Input[str]] = None, uid: Optional[pulumi.Input[str]] = None, usages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, username: Optional[pulumi.Input[str]] = None) -> None:
        """
        This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
        :param pulumi.Input[str] request: Base64-encoded PKCS#10 CSR data
        :param pulumi.Input[Dict[str, pulumi.Input[List[pulumi.Input[str]]]]] extra: Extra information about the requesting user. See user.Info interface for details.
        :param pulumi.Input[List[pulumi.Input[str]]] groups: Group information about the requesting user. See user.Info interface for details.
        :param pulumi.Input[str] signer_name: Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
                1. If it's a kubelet client certificate, it is assigned
                   "kubernetes.io/kube-apiserver-client-kubelet".
                2. If it's a kubelet serving certificate, it is assigned
                   "kubernetes.io/kubelet-serving".
                3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
               Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
        :param pulumi.Input[str] uid: UID information about the requesting user. See user.Info interface for details.
        :param pulumi.Input[List[pulumi.Input[str]]] usages: allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
                    https://tools.ietf.org/html/rfc5280#section-4.2.1.12
        :param pulumi.Input[str] username: Information about the requesting user. See user.Info interface for details.
        """
        __self__.request = request
        __self__.extra = extra
        __self__.groups = groups
        __self__.signer_name = signer_name
        __self__.uid = uid
        __self__.usages = usages
        __self__.username = username

@pulumi.input_type
class CertificateSigningRequestStatusArgs:
    certificate: Optional[pulumi.Input[str]] = pulumi.input_property("certificate")
    """
    If request was approved, the controller will place the issued certificate here.
    """
    conditions: Optional[pulumi.Input[List[pulumi.Input['CertificateSigningRequestConditionArgs']]]] = pulumi.input_property("conditions")
    """
    Conditions applied to the request, such as approval or denial.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, certificate: Optional[pulumi.Input[str]] = None, conditions: Optional[pulumi.Input[List[pulumi.Input['CertificateSigningRequestConditionArgs']]]] = None) -> None:
        """
        :param pulumi.Input[str] certificate: If request was approved, the controller will place the issued certificate here.
        :param pulumi.Input[List[pulumi.Input['CertificateSigningRequestConditionArgs']]] conditions: Conditions applied to the request, such as approval or denial.
        """
        __self__.certificate = certificate
        __self__.conditions = conditions

