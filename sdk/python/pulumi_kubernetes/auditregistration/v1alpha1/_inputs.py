# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ... import meta as _meta

__all__ = [
    'AuditSinkArgs',
    'AuditSinkSpecArgs',
    'PolicyArgs',
    'ServiceReferenceArgs',
    'WebhookArgs',
    'WebhookClientConfigArgs',
    'WebhookThrottleConfigArgs',
]

@pulumi.input_type
class AuditSinkArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = pulumi.input_property("metadata")
    spec: Optional[pulumi.Input['AuditSinkSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines the audit configuration spec
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['AuditSinkSpecArgs']] = None) -> None:
        """
        AuditSink represents a cluster level audit sink
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['AuditSinkSpecArgs'] spec: Spec defines the audit configuration spec
        """
        __self__.api_version = 'auditregistration.k8s.io/v1alpha1'
        __self__.kind = 'AuditSink'
        __self__.metadata = metadata
        __self__.spec = spec

@pulumi.input_type
class AuditSinkSpecArgs:
    policy: pulumi.Input['PolicyArgs'] = pulumi.input_property("policy")
    """
    Policy defines the policy for selecting which events should be sent to the webhook required
    """
    webhook: pulumi.Input['WebhookArgs'] = pulumi.input_property("webhook")
    """
    Webhook to send events required
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, policy: pulumi.Input['PolicyArgs'], webhook: pulumi.Input['WebhookArgs']) -> None:
        """
        AuditSinkSpec holds the spec for the audit sink
        :param pulumi.Input['PolicyArgs'] policy: Policy defines the policy for selecting which events should be sent to the webhook required
        :param pulumi.Input['WebhookArgs'] webhook: Webhook to send events required
        """
        __self__.policy = policy
        __self__.webhook = webhook

@pulumi.input_type
class PolicyArgs:
    level: pulumi.Input[str] = pulumi.input_property("level")
    """
    The Level that all requests are recorded at. available options: None, Metadata, Request, RequestResponse required
    """
    stages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("stages")
    """
    Stages is a list of stages for which events are created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, level: pulumi.Input[str], stages: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        Policy defines the configuration of how audit events are logged
        :param pulumi.Input[str] level: The Level that all requests are recorded at. available options: None, Metadata, Request, RequestResponse required
        :param pulumi.Input[List[pulumi.Input[str]]] stages: Stages is a list of stages for which events are created.
        """
        __self__.level = level
        __self__.stages = stages

@pulumi.input_type
class ServiceReferenceArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    `name` is the name of the service. Required
    """
    namespace: pulumi.Input[str] = pulumi.input_property("namespace")
    """
    `namespace` is the namespace of the service. Required
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    `path` is an optional URL path which will be sent in any request to this service.
    """
    port: Optional[pulumi.Input[float]] = pulumi.input_property("port")
    """
    If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], namespace: pulumi.Input[str], path: Optional[pulumi.Input[str]] = None, port: Optional[pulumi.Input[float]] = None) -> None:
        """
        ServiceReference holds a reference to Service.legacy.k8s.io
        :param pulumi.Input[str] name: `name` is the name of the service. Required
        :param pulumi.Input[str] namespace: `namespace` is the namespace of the service. Required
        :param pulumi.Input[str] path: `path` is an optional URL path which will be sent in any request to this service.
        :param pulumi.Input[float] port: If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
        """
        __self__.name = name
        __self__.namespace = namespace
        __self__.path = path
        __self__.port = port

@pulumi.input_type
class WebhookArgs:
    client_config: pulumi.Input['WebhookClientConfigArgs'] = pulumi.input_property("clientConfig")
    """
    ClientConfig holds the connection parameters for the webhook required
    """
    throttle: Optional[pulumi.Input['WebhookThrottleConfigArgs']] = pulumi.input_property("throttle")
    """
    Throttle holds the options for throttling the webhook
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, client_config: pulumi.Input['WebhookClientConfigArgs'], throttle: Optional[pulumi.Input['WebhookThrottleConfigArgs']] = None) -> None:
        """
        Webhook holds the configuration of the webhook
        :param pulumi.Input['WebhookClientConfigArgs'] client_config: ClientConfig holds the connection parameters for the webhook required
        :param pulumi.Input['WebhookThrottleConfigArgs'] throttle: Throttle holds the options for throttling the webhook
        """
        __self__.client_config = client_config
        __self__.throttle = throttle

@pulumi.input_type
class WebhookClientConfigArgs:
    ca_bundle: Optional[pulumi.Input[str]] = pulumi.input_property("caBundle")
    """
    `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
    """
    service: Optional[pulumi.Input['ServiceReferenceArgs']] = pulumi.input_property("service")
    """
    `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.

    If the webhook is running within the cluster, then you should use `service`.
    """
    url: Optional[pulumi.Input[str]] = pulumi.input_property("url")
    """
    `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.

    The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.

    Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.

    The scheme must be "https"; the URL must begin with "https://".

    A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.

    Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ca_bundle: Optional[pulumi.Input[str]] = None, service: Optional[pulumi.Input['ServiceReferenceArgs']] = None, url: Optional[pulumi.Input[str]] = None) -> None:
        """
        WebhookClientConfig contains the information to make a connection with the webhook
        :param pulumi.Input[str] ca_bundle: `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
        :param pulumi.Input['ServiceReferenceArgs'] service: `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.
               
               If the webhook is running within the cluster, then you should use `service`.
        :param pulumi.Input[str] url: `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
               
               The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
               
               Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
               
               The scheme must be "https"; the URL must begin with "https://".
               
               A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
               
               Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
        """
        __self__.ca_bundle = ca_bundle
        __self__.service = service
        __self__.url = url

@pulumi.input_type
class WebhookThrottleConfigArgs:
    burst: Optional[pulumi.Input[float]] = pulumi.input_property("burst")
    """
    ThrottleBurst is the maximum number of events sent at the same moment default 15 QPS
    """
    qps: Optional[pulumi.Input[float]] = pulumi.input_property("qps")
    """
    ThrottleQPS maximum number of batches per second default 10 QPS
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, burst: Optional[pulumi.Input[float]] = None, qps: Optional[pulumi.Input[float]] = None) -> None:
        """
        WebhookThrottleConfig holds the configuration for throttling events
        :param pulumi.Input[float] burst: ThrottleBurst is the maximum number of events sent at the same moment default 15 QPS
        :param pulumi.Input[float] qps: ThrottleQPS maximum number of batches per second default 10 QPS
        """
        __self__.burst = burst
        __self__.qps = qps

