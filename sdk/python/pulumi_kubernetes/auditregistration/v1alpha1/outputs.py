# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ... import meta as _meta

@pulumi.output_type
class AuditSink(dict):
    """
    AuditSink represents a cluster level audit sink
    """
    api_version: Optional[str] = pulumi.output_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[str] = pulumi.output_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional['_meta.v1.outputs.ObjectMeta'] = pulumi.output_property("metadata")
    spec: Optional['outputs.AuditSinkSpec'] = pulumi.output_property("spec")
    """
    Spec defines the audit configuration spec
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AuditSinkSpec(dict):
    """
    AuditSinkSpec holds the spec for the audit sink
    """
    policy: 'outputs.Policy' = pulumi.output_property("policy")
    """
    Policy defines the policy for selecting which events should be sent to the webhook required
    """
    webhook: 'outputs.Webhook' = pulumi.output_property("webhook")
    """
    Webhook to send events required
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class Policy(dict):
    """
    Policy defines the configuration of how audit events are logged
    """
    level: str = pulumi.output_property("level")
    """
    The Level that all requests are recorded at. available options: None, Metadata, Request, RequestResponse required
    """
    stages: Optional[List[str]] = pulumi.output_property("stages")
    """
    Stages is a list of stages for which events are created.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ServiceReference(dict):
    """
    ServiceReference holds a reference to Service.legacy.k8s.io
    """
    name: str = pulumi.output_property("name")
    """
    `name` is the name of the service. Required
    """
    namespace: str = pulumi.output_property("namespace")
    """
    `namespace` is the namespace of the service. Required
    """
    path: Optional[str] = pulumi.output_property("path")
    """
    `path` is an optional URL path which will be sent in any request to this service.
    """
    port: Optional[float] = pulumi.output_property("port")
    """
    If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class Webhook(dict):
    """
    Webhook holds the configuration of the webhook
    """
    client_config: 'outputs.WebhookClientConfig' = pulumi.output_property("clientConfig")
    """
    ClientConfig holds the connection parameters for the webhook required
    """
    throttle: Optional['outputs.WebhookThrottleConfig'] = pulumi.output_property("throttle")
    """
    Throttle holds the options for throttling the webhook
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WebhookClientConfig(dict):
    """
    WebhookClientConfig contains the information to make a connection with the webhook
    """
    ca_bundle: Optional[str] = pulumi.output_property("caBundle")
    """
    `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
    """
    service: Optional['outputs.ServiceReference'] = pulumi.output_property("service")
    """
    `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.

    If the webhook is running within the cluster, then you should use `service`.
    """
    url: Optional[str] = pulumi.output_property("url")
    """
    `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.

    The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.

    Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.

    The scheme must be "https"; the URL must begin with "https://".

    A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.

    Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class WebhookThrottleConfig(dict):
    """
    WebhookThrottleConfig holds the configuration for throttling events
    """
    burst: Optional[float] = pulumi.output_property("burst")
    """
    ThrottleBurst is the maximum number of events sent at the same moment default 15 QPS
    """
    qps: Optional[float] = pulumi.output_property("qps")
    """
    ThrottleQPS maximum number of batches per second default 10 QPS
    """

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


