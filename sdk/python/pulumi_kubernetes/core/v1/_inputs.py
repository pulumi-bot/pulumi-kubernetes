# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class AWSElasticBlockStoreVolumeSourceArgs:
    volume_id: pulumi.Input[str] = pulumi.input_property("volumeID")
    """
    Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    """
    partition: Optional[pulumi.Input[float]] = pulumi.input_property("partition")
    """
    The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, volume_id: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, partition: Optional[pulumi.Input[float]] = None, read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        Represents a Persistent Disk resource in AWS.

        An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[str] volume_id: Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[float] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        :param pulumi.Input[bool] read_only: Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        __self__.volume_id = volume_id
        __self__.fs_type = fs_type
        __self__.partition = partition
        __self__.read_only = read_only

@pulumi.input_type
class AffinityArgs:
    node_affinity: Optional[pulumi.Input['NodeAffinityArgs']] = pulumi.input_property("nodeAffinity")
    """
    Describes node affinity scheduling rules for the pod.
    """
    pod_affinity: Optional[pulumi.Input['PodAffinityArgs']] = pulumi.input_property("podAffinity")
    """
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    """
    pod_anti_affinity: Optional[pulumi.Input['PodAntiAffinityArgs']] = pulumi.input_property("podAntiAffinity")
    """
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, node_affinity: Optional[pulumi.Input['NodeAffinityArgs']] = None, pod_affinity: Optional[pulumi.Input['PodAffinityArgs']] = None, pod_anti_affinity: Optional[pulumi.Input['PodAntiAffinityArgs']] = None) -> None:
        """
        Affinity is a group of affinity scheduling rules.
        :param pulumi.Input['NodeAffinityArgs'] node_affinity: Describes node affinity scheduling rules for the pod.
        :param pulumi.Input['PodAffinityArgs'] pod_affinity: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input['PodAntiAffinityArgs'] pod_anti_affinity: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        __self__.node_affinity = node_affinity
        __self__.pod_affinity = pod_affinity
        __self__.pod_anti_affinity = pod_anti_affinity

@pulumi.input_type
class AttachedVolumeArgs:
    device_path: pulumi.Input[str] = pulumi.input_property("devicePath")
    """
    DevicePath represents the device path where the volume should be available
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of the attached volume
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, device_path: pulumi.Input[str], name: pulumi.Input[str]) -> None:
        """
        AttachedVolume describes a volume attached to a node
        :param pulumi.Input[str] device_path: DevicePath represents the device path where the volume should be available
        :param pulumi.Input[str] name: Name of the attached volume
        """
        __self__.device_path = device_path
        __self__.name = name

@pulumi.input_type
class AzureDiskVolumeSourceArgs:
    disk_name: pulumi.Input[str] = pulumi.input_property("diskName")
    """
    The Name of the data disk in the blob storage
    """
    disk_uri: pulumi.Input[str] = pulumi.input_property("diskURI")
    """
    The URI the data disk in the blob storage
    """
    caching_mode: Optional[pulumi.Input[str]] = pulumi.input_property("cachingMode")
    """
    Host Caching mode: None, Read Only, Read Write.
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, disk_name: pulumi.Input[str], disk_uri: pulumi.Input[str], caching_mode: Optional[pulumi.Input[str]] = None, fs_type: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input[str] disk_name: The Name of the data disk in the blob storage
        :param pulumi.Input[str] disk_uri: The URI the data disk in the blob storage
        :param pulumi.Input[str] caching_mode: Host Caching mode: None, Read Only, Read Write.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] kind: Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        __self__.disk_name = disk_name
        __self__.disk_uri = disk_uri
        __self__.caching_mode = caching_mode
        __self__.fs_type = fs_type
        __self__.kind = kind
        __self__.read_only = read_only

@pulumi.input_type
class AzureFilePersistentVolumeSourceArgs:
    secret_name: pulumi.Input[str] = pulumi.input_property("secretName")
    """
    the name of secret that contains Azure Storage Account Name and Key
    """
    share_name: pulumi.Input[str] = pulumi.input_property("shareName")
    """
    Share Name
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """
    secret_namespace: Optional[pulumi.Input[str]] = pulumi.input_property("secretNamespace")
    """
    the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, secret_name: pulumi.Input[str], share_name: pulumi.Input[str], read_only: Optional[pulumi.Input[bool]] = None, secret_namespace: Optional[pulumi.Input[str]] = None) -> None:
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input[str] secret_name: the name of secret that contains Azure Storage Account Name and Key
        :param pulumi.Input[str] share_name: Share Name
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[str] secret_namespace: the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
        """
        __self__.secret_name = secret_name
        __self__.share_name = share_name
        __self__.read_only = read_only
        __self__.secret_namespace = secret_namespace

@pulumi.input_type
class AzureFileVolumeSourceArgs:
    secret_name: pulumi.Input[str] = pulumi.input_property("secretName")
    """
    the name of secret that contains Azure Storage Account Name and Key
    """
    share_name: pulumi.Input[str] = pulumi.input_property("shareName")
    """
    Share Name
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, secret_name: pulumi.Input[str], share_name: pulumi.Input[str], read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input[str] secret_name: the name of secret that contains Azure Storage Account Name and Key
        :param pulumi.Input[str] share_name: Share Name
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        __self__.secret_name = secret_name
        __self__.share_name = share_name
        __self__.read_only = read_only

@pulumi.input_type
class CSIPersistentVolumeSourceArgs:
    driver: pulumi.Input[str] = pulumi.input_property("driver")
    """
    Driver is the name of the driver to use for this volume. Required.
    """
    volume_handle: pulumi.Input[str] = pulumi.input_property("volumeHandle")
    """
    VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
    """
    controller_expand_secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = pulumi.input_property("controllerExpandSecretRef")
    """
    ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
    """
    controller_publish_secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = pulumi.input_property("controllerPublishSecretRef")
    """
    ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
    """
    node_publish_secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = pulumi.input_property("nodePublishSecretRef")
    """
    NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
    """
    node_stage_secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = pulumi.input_property("nodeStageSecretRef")
    """
    NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
    """
    volume_attributes: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("volumeAttributes")
    """
    Attributes of the volume to publish.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, driver: pulumi.Input[str], volume_handle: pulumi.Input[str], controller_expand_secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = None, controller_publish_secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = None, fs_type: Optional[pulumi.Input[str]] = None, node_publish_secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = None, node_stage_secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = None, read_only: Optional[pulumi.Input[bool]] = None, volume_attributes: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        Represents storage that is managed by an external CSI volume driver (Beta feature)
        :param pulumi.Input[str] driver: Driver is the name of the driver to use for this volume. Required.
        :param pulumi.Input[str] volume_handle: VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
        :param pulumi.Input['SecretReferenceArgs'] controller_expand_secret_ref: ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        :param pulumi.Input['SecretReferenceArgs'] controller_publish_secret_ref: ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
        :param pulumi.Input['SecretReferenceArgs'] node_publish_secret_ref: NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        :param pulumi.Input['SecretReferenceArgs'] node_stage_secret_ref: NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
        :param pulumi.Input[bool] read_only: Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] volume_attributes: Attributes of the volume to publish.
        """
        __self__.driver = driver
        __self__.volume_handle = volume_handle
        __self__.controller_expand_secret_ref = controller_expand_secret_ref
        __self__.controller_publish_secret_ref = controller_publish_secret_ref
        __self__.fs_type = fs_type
        __self__.node_publish_secret_ref = node_publish_secret_ref
        __self__.node_stage_secret_ref = node_stage_secret_ref
        __self__.read_only = read_only
        __self__.volume_attributes = volume_attributes

@pulumi.input_type
class CSIVolumeSourceArgs:
    driver: pulumi.Input[str] = pulumi.input_property("driver")
    """
    Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
    """
    node_publish_secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = pulumi.input_property("nodePublishSecretRef")
    """
    NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Specifies a read-only configuration for the volume. Defaults to false (read/write).
    """
    volume_attributes: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("volumeAttributes")
    """
    VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, driver: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, node_publish_secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = None, read_only: Optional[pulumi.Input[bool]] = None, volume_attributes: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        Represents a source location of a volume to mount, managed by an external CSI driver
        :param pulumi.Input[str] driver: Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        :param pulumi.Input['LocalObjectReferenceArgs'] node_publish_secret_ref: NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param pulumi.Input[bool] read_only: Specifies a read-only configuration for the volume. Defaults to false (read/write).
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] volume_attributes: VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        __self__.driver = driver
        __self__.fs_type = fs_type
        __self__.node_publish_secret_ref = node_publish_secret_ref
        __self__.read_only = read_only
        __self__.volume_attributes = volume_attributes

@pulumi.input_type
class CapabilitiesArgs:
    add: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("add")
    """
    Added capabilities
    """
    drop: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("drop")
    """
    Removed capabilities
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, add: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, drop: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        Adds and removes POSIX capabilities from running containers.
        :param pulumi.Input[List[pulumi.Input[str]]] add: Added capabilities
        :param pulumi.Input[List[pulumi.Input[str]]] drop: Removed capabilities
        """
        __self__.add = add
        __self__.drop = drop

@pulumi.input_type
class CephFSPersistentVolumeSourceArgs:
    monitors: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("monitors")
    """
    Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    secret_file: Optional[pulumi.Input[str]] = pulumi.input_property("secretFile")
    """
    Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = pulumi.input_property("secretRef")
    """
    Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    user: Optional[pulumi.Input[str]] = pulumi.input_property("user")
    """
    Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, monitors: pulumi.Input[List[pulumi.Input[str]]], path: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_file: Optional[pulumi.Input[str]] = None, secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = None, user: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
        :param pulumi.Input[List[pulumi.Input[str]]] monitors: Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] path: Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] secret_file: Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input['SecretReferenceArgs'] secret_ref: Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] user: Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        __self__.monitors = monitors
        __self__.path = path
        __self__.read_only = read_only
        __self__.secret_file = secret_file
        __self__.secret_ref = secret_ref
        __self__.user = user

@pulumi.input_type
class CephFSVolumeSourceArgs:
    monitors: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("monitors")
    """
    Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    secret_file: Optional[pulumi.Input[str]] = pulumi.input_property("secretFile")
    """
    Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = pulumi.input_property("secretRef")
    """
    Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    user: Optional[pulumi.Input[str]] = pulumi.input_property("user")
    """
    Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, monitors: pulumi.Input[List[pulumi.Input[str]]], path: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_file: Optional[pulumi.Input[str]] = None, secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = None, user: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
        :param pulumi.Input[List[pulumi.Input[str]]] monitors: Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] path: Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] secret_file: Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input['LocalObjectReferenceArgs'] secret_ref: Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] user: Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        __self__.monitors = monitors
        __self__.path = path
        __self__.read_only = read_only
        __self__.secret_file = secret_file
        __self__.secret_ref = secret_ref
        __self__.user = user

@pulumi.input_type
class CinderPersistentVolumeSourceArgs:
    volume_id: pulumi.Input[str] = pulumi.input_property("volumeID")
    """
    volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = pulumi.input_property("secretRef")
    """
    Optional: points to a secret object containing parameters used to connect to OpenStack.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, volume_id: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = None) -> None:
        """
        Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[str] volume_id: volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['SecretReferenceArgs'] secret_ref: Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        __self__.volume_id = volume_id
        __self__.fs_type = fs_type
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref

@pulumi.input_type
class CinderVolumeSourceArgs:
    volume_id: pulumi.Input[str] = pulumi.input_property("volumeID")
    """
    volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = pulumi.input_property("secretRef")
    """
    Optional: points to a secret object containing parameters used to connect to OpenStack.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, volume_id: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = None) -> None:
        """
        Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[str] volume_id: volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['LocalObjectReferenceArgs'] secret_ref: Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        __self__.volume_id = volume_id
        __self__.fs_type = fs_type
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref

@pulumi.input_type
class ClientIPConfigArgs:
    timeout_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("timeoutSeconds")
    """
    timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, timeout_seconds: Optional[pulumi.Input[float]] = None) -> None:
        """
        ClientIPConfig represents the configurations of Client IP based session affinity.
        :param pulumi.Input[float] timeout_seconds: timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
        """
        __self__.timeout_seconds = timeout_seconds

@pulumi.input_type
class ComponentConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    """
    Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type of condition for a component. Valid value: "Healthy"
    """
    error: Optional[pulumi.Input[str]] = pulumi.input_property("error")
    """
    Condition error code for a component. For example, a health check error code.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    Message about the condition for a component. For example, information about a health check.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], error: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None) -> None:
        """
        Information about the condition of a component.
        :param pulumi.Input[str] status: Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
        :param pulumi.Input[str] type: Type of condition for a component. Valid value: "Healthy"
        :param pulumi.Input[str] error: Condition error code for a component. For example, a health check error code.
        :param pulumi.Input[str] message: Message about the condition for a component. For example, information about a health check.
        """
        __self__.status = status
        __self__.type = type
        __self__.error = error
        __self__.message = message

@pulumi.input_type
class ComponentStatusArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    conditions: Optional[pulumi.Input[List[pulumi.Input['ComponentConditionArgs']]]] = pulumi.input_property("conditions")
    """
    List of component conditions observed
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, conditions: Optional[pulumi.Input[List[pulumi.Input['ComponentConditionArgs']]]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None) -> None:
        """
        ComponentStatus (and ComponentStatusList) holds the cluster validation info.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[List[pulumi.Input['ComponentConditionArgs']]] conditions: List of component conditions observed
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        __self__.api_version = 'v1'
        __self__.conditions = conditions
        __self__.kind = 'ComponentStatus'
        __self__.metadata = metadata

@pulumi.input_type
class ConfigMapArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    binary_data: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("binaryData")
    """
    BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
    """
    data: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("data")
    """
    Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
    """
    immutable: Optional[pulumi.Input[bool]] = pulumi.input_property("immutable")
    """
    Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate.
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, binary_data: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, data: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, immutable: Optional[pulumi.Input[bool]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None) -> None:
        """
        ConfigMap holds configuration data for pods to consume.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] binary_data: BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] data: Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
        :param pulumi.Input[bool] immutable: Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate.
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        __self__.api_version = 'v1'
        __self__.binary_data = binary_data
        __self__.data = data
        __self__.immutable = immutable
        __self__.kind = 'ConfigMap'
        __self__.metadata = metadata

@pulumi.input_type
class ConfigMapEnvSourceArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    optional: Optional[pulumi.Input[bool]] = pulumi.input_property("optional")
    """
    Specify whether the ConfigMap must be defined
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None, optional: Optional[pulumi.Input[bool]] = None) -> None:
        """
        ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

        The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap must be defined
        """
        __self__.name = name
        __self__.optional = optional

@pulumi.input_type
class ConfigMapKeySelectorArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    The key to select.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    optional: Optional[pulumi.Input[bool]] = pulumi.input_property("optional")
    """
    Specify whether the ConfigMap or its key must be defined
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], name: Optional[pulumi.Input[str]] = None, optional: Optional[pulumi.Input[bool]] = None) -> None:
        """
        Selects a key from a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        __self__.key = key
        __self__.name = name
        __self__.optional = optional

@pulumi.input_type
class ConfigMapNodeConfigSourceArgs:
    kubelet_config_key: pulumi.Input[str] = pulumi.input_property("kubeletConfigKey")
    """
    KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
    """
    namespace: pulumi.Input[str] = pulumi.input_property("namespace")
    """
    Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
    """
    resource_version: Optional[pulumi.Input[str]] = pulumi.input_property("resourceVersion")
    """
    ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
    """
    uid: Optional[pulumi.Input[str]] = pulumi.input_property("uid")
    """
    UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, kubelet_config_key: pulumi.Input[str], name: pulumi.Input[str], namespace: pulumi.Input[str], resource_version: Optional[pulumi.Input[str]] = None, uid: Optional[pulumi.Input[str]] = None) -> None:
        """
        ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.
        :param pulumi.Input[str] kubelet_config_key: KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
        :param pulumi.Input[str] name: Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
        :param pulumi.Input[str] namespace: Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
        :param pulumi.Input[str] resource_version: ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
        :param pulumi.Input[str] uid: UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
        """
        __self__.kubelet_config_key = kubelet_config_key
        __self__.name = name
        __self__.namespace = namespace
        __self__.resource_version = resource_version
        __self__.uid = uid

@pulumi.input_type
class ConfigMapProjectionArgs:
    items: Optional[pulumi.Input[List[pulumi.Input['KeyToPathArgs']]]] = pulumi.input_property("items")
    """
    If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    optional: Optional[pulumi.Input[bool]] = pulumi.input_property("optional")
    """
    Specify whether the ConfigMap or its keys must be defined
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, items: Optional[pulumi.Input[List[pulumi.Input['KeyToPathArgs']]]] = None, name: Optional[pulumi.Input[str]] = None, optional: Optional[pulumi.Input[bool]] = None) -> None:
        """
        Adapts a ConfigMap into a projected volume.

        The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
        :param pulumi.Input[List[pulumi.Input['KeyToPathArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        __self__.items = items
        __self__.name = name
        __self__.optional = optional

@pulumi.input_type
class ConfigMapVolumeSourceArgs:
    default_mode: Optional[pulumi.Input[float]] = pulumi.input_property("defaultMode")
    """
    Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    """
    items: Optional[pulumi.Input[List[pulumi.Input['KeyToPathArgs']]]] = pulumi.input_property("items")
    """
    If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    optional: Optional[pulumi.Input[bool]] = pulumi.input_property("optional")
    """
    Specify whether the ConfigMap or its keys must be defined
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, default_mode: Optional[pulumi.Input[float]] = None, items: Optional[pulumi.Input[List[pulumi.Input['KeyToPathArgs']]]] = None, name: Optional[pulumi.Input[str]] = None, optional: Optional[pulumi.Input[bool]] = None) -> None:
        """
        Adapts a ConfigMap into a volume.

        The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[float] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[List[pulumi.Input['KeyToPathArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        __self__.default_mode = default_mode
        __self__.items = items
        __self__.name = name
        __self__.optional = optional

@pulumi.input_type
class ContainerArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
    """
    args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("args")
    """
    Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    """
    command: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("command")
    """
    Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    """
    env: Optional[pulumi.Input[List[pulumi.Input['EnvVarArgs']]]] = pulumi.input_property("env")
    """
    List of environment variables to set in the container. Cannot be updated.
    """
    env_from: Optional[pulumi.Input[List[pulumi.Input['EnvFromSourceArgs']]]] = pulumi.input_property("envFrom")
    """
    List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    """
    image: Optional[pulumi.Input[str]] = pulumi.input_property("image")
    """
    Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
    """
    image_pull_policy: Optional[pulumi.Input[str]] = pulumi.input_property("imagePullPolicy")
    """
    Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    """
    lifecycle: Optional[pulumi.Input['LifecycleArgs']] = pulumi.input_property("lifecycle")
    """
    Actions that the management system should take in response to container lifecycle events. Cannot be updated.
    """
    liveness_probe: Optional[pulumi.Input['ProbeArgs']] = pulumi.input_property("livenessProbe")
    """
    Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    ports: Optional[pulumi.Input[List[pulumi.Input['ContainerPortArgs']]]] = pulumi.input_property("ports")
    """
    List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
    """
    readiness_probe: Optional[pulumi.Input['ProbeArgs']] = pulumi.input_property("readinessProbe")
    """
    Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    resources: Optional[pulumi.Input['ResourceRequirementsArgs']] = pulumi.input_property("resources")
    """
    Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    """
    security_context: Optional[pulumi.Input['SecurityContextArgs']] = pulumi.input_property("securityContext")
    """
    Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    """
    startup_probe: Optional[pulumi.Input['ProbeArgs']] = pulumi.input_property("startupProbe")
    """
    StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    stdin: Optional[pulumi.Input[bool]] = pulumi.input_property("stdin")
    """
    Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    """
    stdin_once: Optional[pulumi.Input[bool]] = pulumi.input_property("stdinOnce")
    """
    Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    """
    termination_message_path: Optional[pulumi.Input[str]] = pulumi.input_property("terminationMessagePath")
    """
    Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    """
    termination_message_policy: Optional[pulumi.Input[str]] = pulumi.input_property("terminationMessagePolicy")
    """
    Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
    """
    tty: Optional[pulumi.Input[bool]] = pulumi.input_property("tty")
    """
    Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    """
    volume_devices: Optional[pulumi.Input[List[pulumi.Input['VolumeDeviceArgs']]]] = pulumi.input_property("volumeDevices")
    """
    volumeDevices is the list of block devices to be used by the container.
    """
    volume_mounts: Optional[pulumi.Input[List[pulumi.Input['VolumeMountArgs']]]] = pulumi.input_property("volumeMounts")
    """
    Pod volumes to mount into the container's filesystem. Cannot be updated.
    """
    working_dir: Optional[pulumi.Input[str]] = pulumi.input_property("workingDir")
    """
    Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, command: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, env: Optional[pulumi.Input[List[pulumi.Input['EnvVarArgs']]]] = None, env_from: Optional[pulumi.Input[List[pulumi.Input['EnvFromSourceArgs']]]] = None, image: Optional[pulumi.Input[str]] = None, image_pull_policy: Optional[pulumi.Input[str]] = None, lifecycle: Optional[pulumi.Input['LifecycleArgs']] = None, liveness_probe: Optional[pulumi.Input['ProbeArgs']] = None, ports: Optional[pulumi.Input[List[pulumi.Input['ContainerPortArgs']]]] = None, readiness_probe: Optional[pulumi.Input['ProbeArgs']] = None, resources: Optional[pulumi.Input['ResourceRequirementsArgs']] = None, security_context: Optional[pulumi.Input['SecurityContextArgs']] = None, startup_probe: Optional[pulumi.Input['ProbeArgs']] = None, stdin: Optional[pulumi.Input[bool]] = None, stdin_once: Optional[pulumi.Input[bool]] = None, termination_message_path: Optional[pulumi.Input[str]] = None, termination_message_policy: Optional[pulumi.Input[str]] = None, tty: Optional[pulumi.Input[bool]] = None, volume_devices: Optional[pulumi.Input[List[pulumi.Input['VolumeDeviceArgs']]]] = None, volume_mounts: Optional[pulumi.Input[List[pulumi.Input['VolumeMountArgs']]]] = None, working_dir: Optional[pulumi.Input[str]] = None) -> None:
        """
        A single application container that you want to run within a pod.
        :param pulumi.Input[str] name: Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
        :param pulumi.Input[List[pulumi.Input[str]]] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[List[pulumi.Input[str]]] command: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[List[pulumi.Input['EnvVarArgs']]] env: List of environment variables to set in the container. Cannot be updated.
        :param pulumi.Input[List[pulumi.Input['EnvFromSourceArgs']]] env_from: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param pulumi.Input[str] image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
        :param pulumi.Input[str] image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        :param pulumi.Input['LifecycleArgs'] lifecycle: Actions that the management system should take in response to container lifecycle events. Cannot be updated.
        :param pulumi.Input['ProbeArgs'] liveness_probe: Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[List[pulumi.Input['ContainerPortArgs']]] ports: List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
        :param pulumi.Input['ProbeArgs'] readiness_probe: Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input['ResourceRequirementsArgs'] resources: Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input['SecurityContextArgs'] security_context: Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        :param pulumi.Input['ProbeArgs'] startup_probe: StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[bool] stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        :param pulumi.Input[bool] stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        :param pulumi.Input[str] termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        :param pulumi.Input[str] termination_message_policy: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param pulumi.Input[bool] tty: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        :param pulumi.Input[List[pulumi.Input['VolumeDeviceArgs']]] volume_devices: volumeDevices is the list of block devices to be used by the container.
        :param pulumi.Input[List[pulumi.Input['VolumeMountArgs']]] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param pulumi.Input[str] working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        __self__.name = name
        __self__.args = args
        __self__.command = command
        __self__.env = env
        __self__.env_from = env_from
        __self__.image = image
        __self__.image_pull_policy = image_pull_policy
        __self__.lifecycle = lifecycle
        __self__.liveness_probe = liveness_probe
        __self__.ports = ports
        __self__.readiness_probe = readiness_probe
        __self__.resources = resources
        __self__.security_context = security_context
        __self__.startup_probe = startup_probe
        __self__.stdin = stdin
        __self__.stdin_once = stdin_once
        __self__.termination_message_path = termination_message_path
        __self__.termination_message_policy = termination_message_policy
        __self__.tty = tty
        __self__.volume_devices = volume_devices
        __self__.volume_mounts = volume_mounts
        __self__.working_dir = working_dir

@pulumi.input_type
class ContainerImageArgs:
    names: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("names")
    """
    Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7", "dockerhub.io/google_containers/hyperkube:v1.0.7"]
    """
    size_bytes: Optional[pulumi.Input[float]] = pulumi.input_property("sizeBytes")
    """
    The size of the image in bytes.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, names: pulumi.Input[List[pulumi.Input[str]]], size_bytes: Optional[pulumi.Input[float]] = None) -> None:
        """
        Describe a container image
        :param pulumi.Input[List[pulumi.Input[str]]] names: Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7", "dockerhub.io/google_containers/hyperkube:v1.0.7"]
        :param pulumi.Input[float] size_bytes: The size of the image in bytes.
        """
        __self__.names = names
        __self__.size_bytes = size_bytes

@pulumi.input_type
class ContainerPortArgs:
    container_port: pulumi.Input[float] = pulumi.input_property("containerPort")
    """
    Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    """
    host_ip: Optional[pulumi.Input[str]] = pulumi.input_property("hostIP")
    """
    What host IP to bind the external port to.
    """
    host_port: Optional[pulumi.Input[float]] = pulumi.input_property("hostPort")
    """
    Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    """
    protocol: Optional[pulumi.Input[str]] = pulumi.input_property("protocol")
    """
    Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, container_port: pulumi.Input[float], host_ip: Optional[pulumi.Input[str]] = None, host_port: Optional[pulumi.Input[float]] = None, name: Optional[pulumi.Input[str]] = None, protocol: Optional[pulumi.Input[str]] = None) -> None:
        """
        ContainerPort represents a network port in a single container.
        :param pulumi.Input[float] container_port: Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        :param pulumi.Input[str] host_ip: What host IP to bind the external port to.
        :param pulumi.Input[float] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input[str] name: If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
        :param pulumi.Input[str] protocol: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        """
        __self__.container_port = container_port
        __self__.host_ip = host_ip
        __self__.host_port = host_port
        __self__.name = name
        __self__.protocol = protocol

@pulumi.input_type
class ContainerStateArgs:
    running: Optional[pulumi.Input['ContainerStateRunningArgs']] = pulumi.input_property("running")
    """
    Details about a running container
    """
    terminated: Optional[pulumi.Input['ContainerStateTerminatedArgs']] = pulumi.input_property("terminated")
    """
    Details about a terminated container
    """
    waiting: Optional[pulumi.Input['ContainerStateWaitingArgs']] = pulumi.input_property("waiting")
    """
    Details about a waiting container
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, running: Optional[pulumi.Input['ContainerStateRunningArgs']] = None, terminated: Optional[pulumi.Input['ContainerStateTerminatedArgs']] = None, waiting: Optional[pulumi.Input['ContainerStateWaitingArgs']] = None) -> None:
        """
        ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
        :param pulumi.Input['ContainerStateRunningArgs'] running: Details about a running container
        :param pulumi.Input['ContainerStateTerminatedArgs'] terminated: Details about a terminated container
        :param pulumi.Input['ContainerStateWaitingArgs'] waiting: Details about a waiting container
        """
        __self__.running = running
        __self__.terminated = terminated
        __self__.waiting = waiting

@pulumi.input_type
class ContainerStateRunningArgs:
    started_at: Optional[pulumi.Input[str]] = pulumi.input_property("startedAt")
    """
    Time at which the container was last (re-)started
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, started_at: Optional[pulumi.Input[str]] = None) -> None:
        """
        ContainerStateRunning is a running state of a container.
        :param pulumi.Input[str] started_at: Time at which the container was last (re-)started
        """
        __self__.started_at = started_at

@pulumi.input_type
class ContainerStateTerminatedArgs:
    exit_code: pulumi.Input[float] = pulumi.input_property("exitCode")
    """
    Exit status from the last termination of the container
    """
    container_id: Optional[pulumi.Input[str]] = pulumi.input_property("containerID")
    """
    Container's ID in the format 'docker://<container_id>'
    """
    finished_at: Optional[pulumi.Input[str]] = pulumi.input_property("finishedAt")
    """
    Time at which the container last terminated
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    Message regarding the last termination of the container
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    (brief) reason from the last termination of the container
    """
    signal: Optional[pulumi.Input[float]] = pulumi.input_property("signal")
    """
    Signal from the last termination of the container
    """
    started_at: Optional[pulumi.Input[str]] = pulumi.input_property("startedAt")
    """
    Time at which previous execution of the container started
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, exit_code: pulumi.Input[float], container_id: Optional[pulumi.Input[str]] = None, finished_at: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None, signal: Optional[pulumi.Input[float]] = None, started_at: Optional[pulumi.Input[str]] = None) -> None:
        """
        ContainerStateTerminated is a terminated state of a container.
        :param pulumi.Input[float] exit_code: Exit status from the last termination of the container
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'
        :param pulumi.Input[str] finished_at: Time at which the container last terminated
        :param pulumi.Input[str] message: Message regarding the last termination of the container
        :param pulumi.Input[str] reason: (brief) reason from the last termination of the container
        :param pulumi.Input[float] signal: Signal from the last termination of the container
        :param pulumi.Input[str] started_at: Time at which previous execution of the container started
        """
        __self__.exit_code = exit_code
        __self__.container_id = container_id
        __self__.finished_at = finished_at
        __self__.message = message
        __self__.reason = reason
        __self__.signal = signal
        __self__.started_at = started_at

@pulumi.input_type
class ContainerStateWaitingArgs:
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    Message regarding why the container is not yet running.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    (brief) reason the container is not yet running.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        ContainerStateWaiting is a waiting state of a container.
        :param pulumi.Input[str] message: Message regarding why the container is not yet running.
        :param pulumi.Input[str] reason: (brief) reason the container is not yet running.
        """
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class ContainerStatusArgs:
    image: pulumi.Input[str] = pulumi.input_property("image")
    """
    The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images
    """
    image_id: pulumi.Input[str] = pulumi.input_property("imageID")
    """
    ImageID of the container's image.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
    """
    ready: pulumi.Input[bool] = pulumi.input_property("ready")
    """
    Specifies whether the container has passed its readiness probe.
    """
    restart_count: pulumi.Input[float] = pulumi.input_property("restartCount")
    """
    The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
    """
    container_id: Optional[pulumi.Input[str]] = pulumi.input_property("containerID")
    """
    Container's ID in the format 'docker://<container_id>'.
    """
    last_state: Optional[pulumi.Input['ContainerStateArgs']] = pulumi.input_property("lastState")
    """
    Details about the container's last termination condition.
    """
    started: Optional[pulumi.Input[bool]] = pulumi.input_property("started")
    """
    Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
    """
    state: Optional[pulumi.Input['ContainerStateArgs']] = pulumi.input_property("state")
    """
    Details about the container's current condition.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, image: pulumi.Input[str], image_id: pulumi.Input[str], name: pulumi.Input[str], ready: pulumi.Input[bool], restart_count: pulumi.Input[float], container_id: Optional[pulumi.Input[str]] = None, last_state: Optional[pulumi.Input['ContainerStateArgs']] = None, started: Optional[pulumi.Input[bool]] = None, state: Optional[pulumi.Input['ContainerStateArgs']] = None) -> None:
        """
        ContainerStatus contains details for the current status of this container.
        :param pulumi.Input[str] image: The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images
        :param pulumi.Input[str] image_id: ImageID of the container's image.
        :param pulumi.Input[str] name: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        :param pulumi.Input[bool] ready: Specifies whether the container has passed its readiness probe.
        :param pulumi.Input[float] restart_count: The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'.
        :param pulumi.Input['ContainerStateArgs'] last_state: Details about the container's last termination condition.
        :param pulumi.Input[bool] started: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        :param pulumi.Input['ContainerStateArgs'] state: Details about the container's current condition.
        """
        __self__.image = image
        __self__.image_id = image_id
        __self__.name = name
        __self__.ready = ready
        __self__.restart_count = restart_count
        __self__.container_id = container_id
        __self__.last_state = last_state
        __self__.started = started
        __self__.state = state

@pulumi.input_type
class DaemonEndpointArgs:
    port: pulumi.Input[float] = pulumi.input_property("Port")
    """
    Port number of the given endpoint.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port: pulumi.Input[float]) -> None:
        """
        DaemonEndpoint contains information about a single Daemon endpoint.
        :param pulumi.Input[float] port: Port number of the given endpoint.
        """
        __self__.port = port

@pulumi.input_type
class DownwardAPIProjectionArgs:
    items: Optional[pulumi.Input[List[pulumi.Input['DownwardAPIVolumeFileArgs']]]] = pulumi.input_property("items")
    """
    Items is a list of DownwardAPIVolume file
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, items: Optional[pulumi.Input[List[pulumi.Input['DownwardAPIVolumeFileArgs']]]] = None) -> None:
        """
        Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
        :param pulumi.Input[List[pulumi.Input['DownwardAPIVolumeFileArgs']]] items: Items is a list of DownwardAPIVolume file
        """
        __self__.items = items

@pulumi.input_type
class DownwardAPIVolumeFileArgs:
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    """
    field_ref: Optional[pulumi.Input['ObjectFieldSelectorArgs']] = pulumi.input_property("fieldRef")
    """
    Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
    """
    mode: Optional[pulumi.Input[float]] = pulumi.input_property("mode")
    """
    Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    """
    resource_field_ref: Optional[pulumi.Input['ResourceFieldSelectorArgs']] = pulumi.input_property("resourceFieldRef")
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, path: pulumi.Input[str], field_ref: Optional[pulumi.Input['ObjectFieldSelectorArgs']] = None, mode: Optional[pulumi.Input[float]] = None, resource_field_ref: Optional[pulumi.Input['ResourceFieldSelectorArgs']] = None) -> None:
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param pulumi.Input[str] path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['ObjectFieldSelectorArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[float] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['ResourceFieldSelectorArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        __self__.path = path
        __self__.field_ref = field_ref
        __self__.mode = mode
        __self__.resource_field_ref = resource_field_ref

@pulumi.input_type
class DownwardAPIVolumeSourceArgs:
    default_mode: Optional[pulumi.Input[float]] = pulumi.input_property("defaultMode")
    """
    Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    """
    items: Optional[pulumi.Input[List[pulumi.Input['DownwardAPIVolumeFileArgs']]]] = pulumi.input_property("items")
    """
    Items is a list of downward API volume file
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, default_mode: Optional[pulumi.Input[float]] = None, items: Optional[pulumi.Input[List[pulumi.Input['DownwardAPIVolumeFileArgs']]]] = None) -> None:
        """
        DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[float] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[List[pulumi.Input['DownwardAPIVolumeFileArgs']]] items: Items is a list of downward API volume file
        """
        __self__.default_mode = default_mode
        __self__.items = items

@pulumi.input_type
class EmptyDirVolumeSourceArgs:
    medium: Optional[pulumi.Input[str]] = pulumi.input_property("medium")
    """
    What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    """
    size_limit: Optional[pulumi.Input[str]] = pulumi.input_property("sizeLimit")
    """
    Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, medium: Optional[pulumi.Input[str]] = None, size_limit: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[str] medium: What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input[str] size_limit: Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        __self__.medium = medium
        __self__.size_limit = size_limit

@pulumi.input_type
class EndpointAddressArgs:
    ip: pulumi.Input[str] = pulumi.input_property("ip")
    """
    The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
    """
    hostname: Optional[pulumi.Input[str]] = pulumi.input_property("hostname")
    """
    The Hostname of this endpoint
    """
    node_name: Optional[pulumi.Input[str]] = pulumi.input_property("nodeName")
    """
    Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
    """
    target_ref: Optional[pulumi.Input['ObjectReferenceArgs']] = pulumi.input_property("targetRef")
    """
    Reference to object providing the endpoint.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ip: pulumi.Input[str], hostname: Optional[pulumi.Input[str]] = None, node_name: Optional[pulumi.Input[str]] = None, target_ref: Optional[pulumi.Input['ObjectReferenceArgs']] = None) -> None:
        """
        EndpointAddress is a tuple that describes single IP address.
        :param pulumi.Input[str] ip: The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
        :param pulumi.Input[str] hostname: The Hostname of this endpoint
        :param pulumi.Input[str] node_name: Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
        :param pulumi.Input['ObjectReferenceArgs'] target_ref: Reference to object providing the endpoint.
        """
        __self__.ip = ip
        __self__.hostname = hostname
        __self__.node_name = node_name
        __self__.target_ref = target_ref

@pulumi.input_type
class EndpointPortArgs:
    port: pulumi.Input[float] = pulumi.input_property("port")
    """
    The port number of the endpoint.
    """
    app_protocol: Optional[pulumi.Input[str]] = pulumi.input_property("appProtocol")
    """
    The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
    """
    protocol: Optional[pulumi.Input[str]] = pulumi.input_property("protocol")
    """
    The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port: pulumi.Input[float], app_protocol: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, protocol: Optional[pulumi.Input[str]] = None) -> None:
        """
        EndpointPort is a tuple that describes a single port.
        :param pulumi.Input[float] port: The port number of the endpoint.
        :param pulumi.Input[str] app_protocol: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
        :param pulumi.Input[str] name: The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
        :param pulumi.Input[str] protocol: The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
        """
        __self__.port = port
        __self__.app_protocol = app_protocol
        __self__.name = name
        __self__.protocol = protocol

@pulumi.input_type
class EndpointSubsetArgs:
    addresses: Optional[pulumi.Input[List[pulumi.Input['EndpointAddressArgs']]]] = pulumi.input_property("addresses")
    """
    IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
    """
    not_ready_addresses: Optional[pulumi.Input[List[pulumi.Input['EndpointAddressArgs']]]] = pulumi.input_property("notReadyAddresses")
    """
    IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
    """
    ports: Optional[pulumi.Input[List[pulumi.Input['EndpointPortArgs']]]] = pulumi.input_property("ports")
    """
    Port numbers available on the related IP addresses.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, addresses: Optional[pulumi.Input[List[pulumi.Input['EndpointAddressArgs']]]] = None, not_ready_addresses: Optional[pulumi.Input[List[pulumi.Input['EndpointAddressArgs']]]] = None, ports: Optional[pulumi.Input[List[pulumi.Input['EndpointPortArgs']]]] = None) -> None:
        """
        EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
          {
            Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
            Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
          }
        The resulting set of endpoints can be viewed as:
            a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
            b: [ 10.10.1.1:309, 10.10.2.2:309 ]
        :param pulumi.Input[List[pulumi.Input['EndpointAddressArgs']]] addresses: IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
        :param pulumi.Input[List[pulumi.Input['EndpointAddressArgs']]] not_ready_addresses: IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
        :param pulumi.Input[List[pulumi.Input['EndpointPortArgs']]] ports: Port numbers available on the related IP addresses.
        """
        __self__.addresses = addresses
        __self__.not_ready_addresses = not_ready_addresses
        __self__.ports = ports

@pulumi.input_type
class EndpointsArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    subsets: Optional[pulumi.Input[List[pulumi.Input['EndpointSubsetArgs']]]] = pulumi.input_property("subsets")
    """
    The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, subsets: Optional[pulumi.Input[List[pulumi.Input['EndpointSubsetArgs']]]] = None) -> None:
        """
        Endpoints is a collection of endpoints that implement the actual service. Example:
          Name: "mysvc",
          Subsets: [
            {
              Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
              Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
            },
            {
              Addresses: [{"ip": "10.10.3.3"}],
              Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
            },
         ]
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[List[pulumi.Input['EndpointSubsetArgs']]] subsets: The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
        """
        __self__.api_version = 'v1'
        __self__.kind = 'Endpoints'
        __self__.metadata = metadata
        __self__.subsets = subsets

@pulumi.input_type
class EnvFromSourceArgs:
    config_map_ref: Optional[pulumi.Input['ConfigMapEnvSourceArgs']] = pulumi.input_property("configMapRef")
    """
    The ConfigMap to select from
    """
    prefix: Optional[pulumi.Input[str]] = pulumi.input_property("prefix")
    """
    An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    """
    secret_ref: Optional[pulumi.Input['SecretEnvSourceArgs']] = pulumi.input_property("secretRef")
    """
    The Secret to select from
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, config_map_ref: Optional[pulumi.Input['ConfigMapEnvSourceArgs']] = None, prefix: Optional[pulumi.Input[str]] = None, secret_ref: Optional[pulumi.Input['SecretEnvSourceArgs']] = None) -> None:
        """
        EnvFromSource represents the source of a set of ConfigMaps
        :param pulumi.Input['ConfigMapEnvSourceArgs'] config_map_ref: The ConfigMap to select from
        :param pulumi.Input[str] prefix: An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        :param pulumi.Input['SecretEnvSourceArgs'] secret_ref: The Secret to select from
        """
        __self__.config_map_ref = config_map_ref
        __self__.prefix = prefix
        __self__.secret_ref = secret_ref

@pulumi.input_type
class EnvVarArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of the environment variable. Must be a C_IDENTIFIER.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")
    """
    Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    """
    value_from: Optional[pulumi.Input['EnvVarSourceArgs']] = pulumi.input_property("valueFrom")
    """
    Source for the environment variable's value. Cannot be used if value is not empty.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: Optional[pulumi.Input[str]] = None, value_from: Optional[pulumi.Input['EnvVarSourceArgs']] = None) -> None:
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['EnvVarSourceArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        __self__.name = name
        __self__.value = value
        __self__.value_from = value_from

@pulumi.input_type
class EnvVarSourceArgs:
    config_map_key_ref: Optional[pulumi.Input['ConfigMapKeySelectorArgs']] = pulumi.input_property("configMapKeyRef")
    """
    Selects a key of a ConfigMap.
    """
    field_ref: Optional[pulumi.Input['ObjectFieldSelectorArgs']] = pulumi.input_property("fieldRef")
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
    """
    resource_field_ref: Optional[pulumi.Input['ResourceFieldSelectorArgs']] = pulumi.input_property("resourceFieldRef")
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    """
    secret_key_ref: Optional[pulumi.Input['SecretKeySelectorArgs']] = pulumi.input_property("secretKeyRef")
    """
    Selects a key of a secret in the pod's namespace
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, config_map_key_ref: Optional[pulumi.Input['ConfigMapKeySelectorArgs']] = None, field_ref: Optional[pulumi.Input['ObjectFieldSelectorArgs']] = None, resource_field_ref: Optional[pulumi.Input['ResourceFieldSelectorArgs']] = None, secret_key_ref: Optional[pulumi.Input['SecretKeySelectorArgs']] = None) -> None:
        """
        EnvVarSource represents a source for the value of an EnvVar.
        :param pulumi.Input['ConfigMapKeySelectorArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['ObjectFieldSelectorArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['ResourceFieldSelectorArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['SecretKeySelectorArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        __self__.config_map_key_ref = config_map_key_ref
        __self__.field_ref = field_ref
        __self__.resource_field_ref = resource_field_ref
        __self__.secret_key_ref = secret_key_ref

@pulumi.input_type
class EphemeralContainerArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
    """
    args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("args")
    """
    Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    """
    command: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("command")
    """
    Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    """
    env: Optional[pulumi.Input[List[pulumi.Input['EnvVarArgs']]]] = pulumi.input_property("env")
    """
    List of environment variables to set in the container. Cannot be updated.
    """
    env_from: Optional[pulumi.Input[List[pulumi.Input['EnvFromSourceArgs']]]] = pulumi.input_property("envFrom")
    """
    List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    """
    image: Optional[pulumi.Input[str]] = pulumi.input_property("image")
    """
    Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
    """
    image_pull_policy: Optional[pulumi.Input[str]] = pulumi.input_property("imagePullPolicy")
    """
    Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    """
    lifecycle: Optional[pulumi.Input['LifecycleArgs']] = pulumi.input_property("lifecycle")
    """
    Lifecycle is not allowed for ephemeral containers.
    """
    liveness_probe: Optional[pulumi.Input['ProbeArgs']] = pulumi.input_property("livenessProbe")
    """
    Probes are not allowed for ephemeral containers.
    """
    ports: Optional[pulumi.Input[List[pulumi.Input['ContainerPortArgs']]]] = pulumi.input_property("ports")
    """
    Ports are not allowed for ephemeral containers.
    """
    readiness_probe: Optional[pulumi.Input['ProbeArgs']] = pulumi.input_property("readinessProbe")
    """
    Probes are not allowed for ephemeral containers.
    """
    resources: Optional[pulumi.Input['ResourceRequirementsArgs']] = pulumi.input_property("resources")
    """
    Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
    """
    security_context: Optional[pulumi.Input['SecurityContextArgs']] = pulumi.input_property("securityContext")
    """
    SecurityContext is not allowed for ephemeral containers.
    """
    startup_probe: Optional[pulumi.Input['ProbeArgs']] = pulumi.input_property("startupProbe")
    """
    Probes are not allowed for ephemeral containers.
    """
    stdin: Optional[pulumi.Input[bool]] = pulumi.input_property("stdin")
    """
    Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    """
    stdin_once: Optional[pulumi.Input[bool]] = pulumi.input_property("stdinOnce")
    """
    Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    """
    target_container_name: Optional[pulumi.Input[str]] = pulumi.input_property("targetContainerName")
    """
    If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
    """
    termination_message_path: Optional[pulumi.Input[str]] = pulumi.input_property("terminationMessagePath")
    """
    Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    """
    termination_message_policy: Optional[pulumi.Input[str]] = pulumi.input_property("terminationMessagePolicy")
    """
    Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
    """
    tty: Optional[pulumi.Input[bool]] = pulumi.input_property("tty")
    """
    Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    """
    volume_devices: Optional[pulumi.Input[List[pulumi.Input['VolumeDeviceArgs']]]] = pulumi.input_property("volumeDevices")
    """
    volumeDevices is the list of block devices to be used by the container.
    """
    volume_mounts: Optional[pulumi.Input[List[pulumi.Input['VolumeMountArgs']]]] = pulumi.input_property("volumeMounts")
    """
    Pod volumes to mount into the container's filesystem. Cannot be updated.
    """
    working_dir: Optional[pulumi.Input[str]] = pulumi.input_property("workingDir")
    """
    Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], args: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, command: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, env: Optional[pulumi.Input[List[pulumi.Input['EnvVarArgs']]]] = None, env_from: Optional[pulumi.Input[List[pulumi.Input['EnvFromSourceArgs']]]] = None, image: Optional[pulumi.Input[str]] = None, image_pull_policy: Optional[pulumi.Input[str]] = None, lifecycle: Optional[pulumi.Input['LifecycleArgs']] = None, liveness_probe: Optional[pulumi.Input['ProbeArgs']] = None, ports: Optional[pulumi.Input[List[pulumi.Input['ContainerPortArgs']]]] = None, readiness_probe: Optional[pulumi.Input['ProbeArgs']] = None, resources: Optional[pulumi.Input['ResourceRequirementsArgs']] = None, security_context: Optional[pulumi.Input['SecurityContextArgs']] = None, startup_probe: Optional[pulumi.Input['ProbeArgs']] = None, stdin: Optional[pulumi.Input[bool]] = None, stdin_once: Optional[pulumi.Input[bool]] = None, target_container_name: Optional[pulumi.Input[str]] = None, termination_message_path: Optional[pulumi.Input[str]] = None, termination_message_policy: Optional[pulumi.Input[str]] = None, tty: Optional[pulumi.Input[bool]] = None, volume_devices: Optional[pulumi.Input[List[pulumi.Input['VolumeDeviceArgs']]]] = None, volume_mounts: Optional[pulumi.Input[List[pulumi.Input['VolumeMountArgs']]]] = None, working_dir: Optional[pulumi.Input[str]] = None) -> None:
        """
        An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
        :param pulumi.Input[str] name: Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
        :param pulumi.Input[List[pulumi.Input[str]]] args: Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[List[pulumi.Input[str]]] command: Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        :param pulumi.Input[List[pulumi.Input['EnvVarArgs']]] env: List of environment variables to set in the container. Cannot be updated.
        :param pulumi.Input[List[pulumi.Input['EnvFromSourceArgs']]] env_from: List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
        :param pulumi.Input[str] image: Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
        :param pulumi.Input[str] image_pull_policy: Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
        :param pulumi.Input['LifecycleArgs'] lifecycle: Lifecycle is not allowed for ephemeral containers.
        :param pulumi.Input['ProbeArgs'] liveness_probe: Probes are not allowed for ephemeral containers.
        :param pulumi.Input[List[pulumi.Input['ContainerPortArgs']]] ports: Ports are not allowed for ephemeral containers.
        :param pulumi.Input['ProbeArgs'] readiness_probe: Probes are not allowed for ephemeral containers.
        :param pulumi.Input['ResourceRequirementsArgs'] resources: Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
        :param pulumi.Input['SecurityContextArgs'] security_context: SecurityContext is not allowed for ephemeral containers.
        :param pulumi.Input['ProbeArgs'] startup_probe: Probes are not allowed for ephemeral containers.
        :param pulumi.Input[bool] stdin: Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        :param pulumi.Input[bool] stdin_once: Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        :param pulumi.Input[str] target_container_name: If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
        :param pulumi.Input[str] termination_message_path: Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
        :param pulumi.Input[str] termination_message_policy: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
        :param pulumi.Input[bool] tty: Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        :param pulumi.Input[List[pulumi.Input['VolumeDeviceArgs']]] volume_devices: volumeDevices is the list of block devices to be used by the container.
        :param pulumi.Input[List[pulumi.Input['VolumeMountArgs']]] volume_mounts: Pod volumes to mount into the container's filesystem. Cannot be updated.
        :param pulumi.Input[str] working_dir: Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
        """
        __self__.name = name
        __self__.args = args
        __self__.command = command
        __self__.env = env
        __self__.env_from = env_from
        __self__.image = image
        __self__.image_pull_policy = image_pull_policy
        __self__.lifecycle = lifecycle
        __self__.liveness_probe = liveness_probe
        __self__.ports = ports
        __self__.readiness_probe = readiness_probe
        __self__.resources = resources
        __self__.security_context = security_context
        __self__.startup_probe = startup_probe
        __self__.stdin = stdin
        __self__.stdin_once = stdin_once
        __self__.target_container_name = target_container_name
        __self__.termination_message_path = termination_message_path
        __self__.termination_message_policy = termination_message_policy
        __self__.tty = tty
        __self__.volume_devices = volume_devices
        __self__.volume_mounts = volume_mounts
        __self__.working_dir = working_dir

@pulumi.input_type
class EventArgs:
    involved_object: pulumi.Input['ObjectReferenceArgs'] = pulumi.input_property("involvedObject")
    """
    The object that this event is about.
    """
    metadata: pulumi.Input['ObjectMetaArgs'] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    action: Optional[pulumi.Input[str]] = pulumi.input_property("action")
    """
    What action was taken/failed regarding to the Regarding object.
    """
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    count: Optional[pulumi.Input[float]] = pulumi.input_property("count")
    """
    The number of times this event has occurred.
    """
    event_time: Optional[pulumi.Input[str]] = pulumi.input_property("eventTime")
    """
    Time when this Event was first observed.
    """
    first_timestamp: Optional[pulumi.Input[str]] = pulumi.input_property("firstTimestamp")
    """
    The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    last_timestamp: Optional[pulumi.Input[str]] = pulumi.input_property("lastTimestamp")
    """
    The time at which the most recent occurrence of this event was recorded.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    A human-readable description of the status of this operation.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
    """
    related: Optional[pulumi.Input['ObjectReferenceArgs']] = pulumi.input_property("related")
    """
    Optional secondary object for more complex actions.
    """
    reporting_component: Optional[pulumi.Input[str]] = pulumi.input_property("reportingComponent")
    """
    Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
    """
    reporting_instance: Optional[pulumi.Input[str]] = pulumi.input_property("reportingInstance")
    """
    ID of the controller instance, e.g. `kubelet-xyzf`.
    """
    series: Optional[pulumi.Input['EventSeriesArgs']] = pulumi.input_property("series")
    """
    Data about the Event series this event represents or nil if it's a singleton Event.
    """
    source: Optional[pulumi.Input['EventSourceArgs']] = pulumi.input_property("source")
    """
    The component reporting this event. Should be a short machine understandable string.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    Type of this event (Normal, Warning), new types could be added in the future
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, involved_object: pulumi.Input['ObjectReferenceArgs'], metadata: pulumi.Input['ObjectMetaArgs'], action: Optional[pulumi.Input[str]] = None, api_version: Optional[pulumi.Input[str]] = None, count: Optional[pulumi.Input[float]] = None, event_time: Optional[pulumi.Input[str]] = None, first_timestamp: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, last_timestamp: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None, related: Optional[pulumi.Input['ObjectReferenceArgs']] = None, reporting_component: Optional[pulumi.Input[str]] = None, reporting_instance: Optional[pulumi.Input[str]] = None, series: Optional[pulumi.Input['EventSeriesArgs']] = None, source: Optional[pulumi.Input['EventSourceArgs']] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        Event is a report of an event somewhere in the cluster.
        :param pulumi.Input['ObjectReferenceArgs'] involved_object: The object that this event is about.
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[str] action: What action was taken/failed regarding to the Regarding object.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[float] count: The number of times this event has occurred.
        :param pulumi.Input[str] event_time: Time when this Event was first observed.
        :param pulumi.Input[str] first_timestamp: The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[str] last_timestamp: The time at which the most recent occurrence of this event was recorded.
        :param pulumi.Input[str] message: A human-readable description of the status of this operation.
        :param pulumi.Input[str] reason: This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
        :param pulumi.Input['ObjectReferenceArgs'] related: Optional secondary object for more complex actions.
        :param pulumi.Input[str] reporting_component: Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
        :param pulumi.Input[str] reporting_instance: ID of the controller instance, e.g. `kubelet-xyzf`.
        :param pulumi.Input['EventSeriesArgs'] series: Data about the Event series this event represents or nil if it's a singleton Event.
        :param pulumi.Input['EventSourceArgs'] source: The component reporting this event. Should be a short machine understandable string.
        :param pulumi.Input[str] type: Type of this event (Normal, Warning), new types could be added in the future
        """
        __self__.involved_object = involved_object
        __self__.metadata = metadata
        __self__.action = action
        __self__.api_version = 'v1'
        __self__.count = count
        __self__.event_time = event_time
        __self__.first_timestamp = first_timestamp
        __self__.kind = 'Event'
        __self__.last_timestamp = last_timestamp
        __self__.message = message
        __self__.reason = reason
        __self__.related = related
        __self__.reporting_component = reporting_component
        __self__.reporting_instance = reporting_instance
        __self__.series = series
        __self__.source = source
        __self__.type = type

@pulumi.input_type
class EventSeriesArgs:
    count: Optional[pulumi.Input[float]] = pulumi.input_property("count")
    """
    Number of occurrences in this series up to the last heartbeat time
    """
    last_observed_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastObservedTime")
    """
    Time of the last occurrence observed
    """
    state: Optional[pulumi.Input[str]] = pulumi.input_property("state")
    """
    State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, count: Optional[pulumi.Input[float]] = None, last_observed_time: Optional[pulumi.Input[str]] = None, state: Optional[pulumi.Input[str]] = None) -> None:
        """
        EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
        :param pulumi.Input[float] count: Number of occurrences in this series up to the last heartbeat time
        :param pulumi.Input[str] last_observed_time: Time of the last occurrence observed
        :param pulumi.Input[str] state: State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18
        """
        __self__.count = count
        __self__.last_observed_time = last_observed_time
        __self__.state = state

@pulumi.input_type
class EventSourceArgs:
    component: Optional[pulumi.Input[str]] = pulumi.input_property("component")
    """
    Component from which the event is generated.
    """
    host: Optional[pulumi.Input[str]] = pulumi.input_property("host")
    """
    Node name on which the event is generated.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, component: Optional[pulumi.Input[str]] = None, host: Optional[pulumi.Input[str]] = None) -> None:
        """
        EventSource contains information for an event.
        :param pulumi.Input[str] component: Component from which the event is generated.
        :param pulumi.Input[str] host: Node name on which the event is generated.
        """
        __self__.component = component
        __self__.host = host

@pulumi.input_type
class ExecActionArgs:
    command: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("command")
    """
    Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, command: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        ExecAction describes a "run in container" action.
        :param pulumi.Input[List[pulumi.Input[str]]] command: Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        """
        __self__.command = command

@pulumi.input_type
class FCVolumeSourceArgs:
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    """
    lun: Optional[pulumi.Input[float]] = pulumi.input_property("lun")
    """
    Optional: FC target lun number
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """
    target_ww_ns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("targetWWNs")
    """
    Optional: FC target worldwide names (WWNs)
    """
    wwids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("wwids")
    """
    Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, fs_type: Optional[pulumi.Input[str]] = None, lun: Optional[pulumi.Input[float]] = None, read_only: Optional[pulumi.Input[bool]] = None, target_ww_ns: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, wwids: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[float] lun: Optional: FC target lun number
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[List[pulumi.Input[str]]] target_ww_ns: Optional: FC target worldwide names (WWNs)
        :param pulumi.Input[List[pulumi.Input[str]]] wwids: Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        __self__.fs_type = fs_type
        __self__.lun = lun
        __self__.read_only = read_only
        __self__.target_ww_ns = target_ww_ns
        __self__.wwids = wwids

@pulumi.input_type
class FlexPersistentVolumeSourceArgs:
    driver: pulumi.Input[str] = pulumi.input_property("driver")
    """
    Driver is the name of the driver to use for this volume.
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    """
    options: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("options")
    """
    Optional: Extra command options if any.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """
    secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = pulumi.input_property("secretRef")
    """
    Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, driver: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, options: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = None) -> None:
        """
        FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input[str] driver: Driver is the name of the driver to use for this volume.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] options: Optional: Extra command options if any.
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['SecretReferenceArgs'] secret_ref: Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        __self__.driver = driver
        __self__.fs_type = fs_type
        __self__.options = options
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref

@pulumi.input_type
class FlexVolumeSourceArgs:
    driver: pulumi.Input[str] = pulumi.input_property("driver")
    """
    Driver is the name of the driver to use for this volume.
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    """
    options: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("options")
    """
    Optional: Extra command options if any.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """
    secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = pulumi.input_property("secretRef")
    """
    Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, driver: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, options: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = None) -> None:
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input[str] driver: Driver is the name of the driver to use for this volume.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] options: Optional: Extra command options if any.
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['LocalObjectReferenceArgs'] secret_ref: Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        __self__.driver = driver
        __self__.fs_type = fs_type
        __self__.options = options
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref

@pulumi.input_type
class FlockerVolumeSourceArgs:
    dataset_name: Optional[pulumi.Input[str]] = pulumi.input_property("datasetName")
    """
    Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
    """
    dataset_uuid: Optional[pulumi.Input[str]] = pulumi.input_property("datasetUUID")
    """
    UUID of the dataset. This is unique identifier of a Flocker dataset
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, dataset_name: Optional[pulumi.Input[str]] = None, dataset_uuid: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
        :param pulumi.Input[str] dataset_name: Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        :param pulumi.Input[str] dataset_uuid: UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        __self__.dataset_name = dataset_name
        __self__.dataset_uuid = dataset_uuid

@pulumi.input_type
class GCEPersistentDiskVolumeSourceArgs:
    pd_name: pulumi.Input[str] = pulumi.input_property("pdName")
    """
    Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """
    partition: Optional[pulumi.Input[float]] = pulumi.input_property("partition")
    """
    The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pd_name: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, partition: Optional[pulumi.Input[float]] = None, read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        Represents a Persistent Disk resource in Google Compute Engine.

        A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
        :param pulumi.Input[str] pd_name: Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[float] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        __self__.pd_name = pd_name
        __self__.fs_type = fs_type
        __self__.partition = partition
        __self__.read_only = read_only

@pulumi.input_type
class GitRepoVolumeSourceArgs:
    repository: pulumi.Input[str] = pulumi.input_property("repository")
    """
    Repository URL
    """
    directory: Optional[pulumi.Input[str]] = pulumi.input_property("directory")
    """
    Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
    """
    revision: Optional[pulumi.Input[str]] = pulumi.input_property("revision")
    """
    Commit hash for the specified revision.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, repository: pulumi.Input[str], directory: Optional[pulumi.Input[str]] = None, revision: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.

        DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input[str] repository: Repository URL
        :param pulumi.Input[str] directory: Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        :param pulumi.Input[str] revision: Commit hash for the specified revision.
        """
        __self__.repository = repository
        __self__.directory = directory
        __self__.revision = revision

@pulumi.input_type
class GlusterfsPersistentVolumeSourceArgs:
    endpoints: pulumi.Input[str] = pulumi.input_property("endpoints")
    """
    EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """
    endpoints_namespace: Optional[pulumi.Input[str]] = pulumi.input_property("endpointsNamespace")
    """
    EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, endpoints: pulumi.Input[str], path: pulumi.Input[str], endpoints_namespace: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
        :param pulumi.Input[str] endpoints: EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[str] path: Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[str] endpoints_namespace: EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        __self__.endpoints = endpoints
        __self__.path = path
        __self__.endpoints_namespace = endpoints_namespace
        __self__.read_only = read_only

@pulumi.input_type
class GlusterfsVolumeSourceArgs:
    endpoints: pulumi.Input[str] = pulumi.input_property("endpoints")
    """
    EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, endpoints: pulumi.Input[str], path: pulumi.Input[str], read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
        :param pulumi.Input[str] endpoints: EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[str] path: Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        __self__.endpoints = endpoints
        __self__.path = path
        __self__.read_only = read_only

@pulumi.input_type
class HTTPGetActionArgs:
    port: pulumi.Input[Union[float, str]] = pulumi.input_property("port")
    """
    Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    """
    host: Optional[pulumi.Input[str]] = pulumi.input_property("host")
    """
    Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    """
    http_headers: Optional[pulumi.Input[List[pulumi.Input['HTTPHeaderArgs']]]] = pulumi.input_property("httpHeaders")
    """
    Custom headers to set in the request. HTTP allows repeated headers.
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    Path to access on the HTTP server.
    """
    scheme: Optional[pulumi.Input[str]] = pulumi.input_property("scheme")
    """
    Scheme to use for connecting to the host. Defaults to HTTP.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port: pulumi.Input[Union[float, str]], host: Optional[pulumi.Input[str]] = None, http_headers: Optional[pulumi.Input[List[pulumi.Input['HTTPHeaderArgs']]]] = None, path: Optional[pulumi.Input[str]] = None, scheme: Optional[pulumi.Input[str]] = None) -> None:
        """
        HTTPGetAction describes an action based on HTTP Get requests.
        :param pulumi.Input[Union[float, str]] port: Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[List[pulumi.Input['HTTPHeaderArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
        :param pulumi.Input[str] path: Path to access on the HTTP server.
        :param pulumi.Input[str] scheme: Scheme to use for connecting to the host. Defaults to HTTP.
        """
        __self__.port = port
        __self__.host = host
        __self__.http_headers = http_headers
        __self__.path = path
        __self__.scheme = scheme

@pulumi.input_type
class HTTPHeaderArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    The header field name
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    The header field value
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        HTTPHeader describes a custom header to be used in HTTP probes
        :param pulumi.Input[str] name: The header field name
        :param pulumi.Input[str] value: The header field value
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class HandlerArgs:
    exec_: Optional[pulumi.Input['ExecActionArgs']] = pulumi.input_property("exec")
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    http_get: Optional[pulumi.Input['HTTPGetActionArgs']] = pulumi.input_property("httpGet")
    """
    HTTPGet specifies the http request to perform.
    """
    tcp_socket: Optional[pulumi.Input['TCPSocketActionArgs']] = pulumi.input_property("tcpSocket")
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, exec_: Optional[pulumi.Input['ExecActionArgs']] = None, http_get: Optional[pulumi.Input['HTTPGetActionArgs']] = None, tcp_socket: Optional[pulumi.Input['TCPSocketActionArgs']] = None) -> None:
        """
        Handler defines a specific action that should be taken
        :param pulumi.Input['ExecActionArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input['HTTPGetActionArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input['TCPSocketActionArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        """
        __self__.exec_ = exec_
        __self__.http_get = http_get
        __self__.tcp_socket = tcp_socket

@pulumi.input_type
class HostAliasArgs:
    hostnames: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("hostnames")
    """
    Hostnames for the above IP address.
    """
    ip: Optional[pulumi.Input[str]] = pulumi.input_property("ip")
    """
    IP address of the host file entry.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hostnames: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, ip: Optional[pulumi.Input[str]] = None) -> None:
        """
        HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
        :param pulumi.Input[List[pulumi.Input[str]]] hostnames: Hostnames for the above IP address.
        :param pulumi.Input[str] ip: IP address of the host file entry.
        """
        __self__.hostnames = hostnames
        __self__.ip = ip

@pulumi.input_type
class HostPathVolumeSourceArgs:
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, path: pulumi.Input[str], type: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
        :param pulumi.Input[str] path: Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input[str] type: Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        __self__.path = path
        __self__.type = type

@pulumi.input_type
class ISCSIPersistentVolumeSourceArgs:
    iqn: pulumi.Input[str] = pulumi.input_property("iqn")
    """
    Target iSCSI Qualified Name.
    """
    lun: pulumi.Input[float] = pulumi.input_property("lun")
    """
    iSCSI Target Lun number.
    """
    target_portal: pulumi.Input[str] = pulumi.input_property("targetPortal")
    """
    iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    """
    chap_auth_discovery: Optional[pulumi.Input[bool]] = pulumi.input_property("chapAuthDiscovery")
    """
    whether support iSCSI Discovery CHAP authentication
    """
    chap_auth_session: Optional[pulumi.Input[bool]] = pulumi.input_property("chapAuthSession")
    """
    whether support iSCSI Session CHAP authentication
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    """
    initiator_name: Optional[pulumi.Input[str]] = pulumi.input_property("initiatorName")
    """
    Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    """
    iscsi_interface: Optional[pulumi.Input[str]] = pulumi.input_property("iscsiInterface")
    """
    iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    """
    portals: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("portals")
    """
    iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    """
    secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = pulumi.input_property("secretRef")
    """
    CHAP Secret for iSCSI target and initiator authentication
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, iqn: pulumi.Input[str], lun: pulumi.Input[float], target_portal: pulumi.Input[str], chap_auth_discovery: Optional[pulumi.Input[bool]] = None, chap_auth_session: Optional[pulumi.Input[bool]] = None, fs_type: Optional[pulumi.Input[str]] = None, initiator_name: Optional[pulumi.Input[str]] = None, iscsi_interface: Optional[pulumi.Input[str]] = None, portals: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = None) -> None:
        """
        ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[str] iqn: Target iSCSI Qualified Name.
        :param pulumi.Input[float] lun: iSCSI Target Lun number.
        :param pulumi.Input[str] target_portal: iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] chap_auth_discovery: whether support iSCSI Discovery CHAP authentication
        :param pulumi.Input[bool] chap_auth_session: whether support iSCSI Session CHAP authentication
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        :param pulumi.Input[str] initiator_name: Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        :param pulumi.Input[str] iscsi_interface: iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        :param pulumi.Input[List[pulumi.Input[str]]] portals: iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        :param pulumi.Input['SecretReferenceArgs'] secret_ref: CHAP Secret for iSCSI target and initiator authentication
        """
        __self__.iqn = iqn
        __self__.lun = lun
        __self__.target_portal = target_portal
        __self__.chap_auth_discovery = chap_auth_discovery
        __self__.chap_auth_session = chap_auth_session
        __self__.fs_type = fs_type
        __self__.initiator_name = initiator_name
        __self__.iscsi_interface = iscsi_interface
        __self__.portals = portals
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref

@pulumi.input_type
class ISCSIVolumeSourceArgs:
    iqn: pulumi.Input[str] = pulumi.input_property("iqn")
    """
    Target iSCSI Qualified Name.
    """
    lun: pulumi.Input[float] = pulumi.input_property("lun")
    """
    iSCSI Target Lun number.
    """
    target_portal: pulumi.Input[str] = pulumi.input_property("targetPortal")
    """
    iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    """
    chap_auth_discovery: Optional[pulumi.Input[bool]] = pulumi.input_property("chapAuthDiscovery")
    """
    whether support iSCSI Discovery CHAP authentication
    """
    chap_auth_session: Optional[pulumi.Input[bool]] = pulumi.input_property("chapAuthSession")
    """
    whether support iSCSI Session CHAP authentication
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    """
    initiator_name: Optional[pulumi.Input[str]] = pulumi.input_property("initiatorName")
    """
    Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    """
    iscsi_interface: Optional[pulumi.Input[str]] = pulumi.input_property("iscsiInterface")
    """
    iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    """
    portals: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("portals")
    """
    iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    """
    secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = pulumi.input_property("secretRef")
    """
    CHAP Secret for iSCSI target and initiator authentication
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, iqn: pulumi.Input[str], lun: pulumi.Input[float], target_portal: pulumi.Input[str], chap_auth_discovery: Optional[pulumi.Input[bool]] = None, chap_auth_session: Optional[pulumi.Input[bool]] = None, fs_type: Optional[pulumi.Input[str]] = None, initiator_name: Optional[pulumi.Input[str]] = None, iscsi_interface: Optional[pulumi.Input[str]] = None, portals: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = None) -> None:
        """
        Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[str] iqn: Target iSCSI Qualified Name.
        :param pulumi.Input[float] lun: iSCSI Target Lun number.
        :param pulumi.Input[str] target_portal: iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] chap_auth_discovery: whether support iSCSI Discovery CHAP authentication
        :param pulumi.Input[bool] chap_auth_session: whether support iSCSI Session CHAP authentication
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        :param pulumi.Input[str] initiator_name: Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        :param pulumi.Input[str] iscsi_interface: iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        :param pulumi.Input[List[pulumi.Input[str]]] portals: iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        :param pulumi.Input['LocalObjectReferenceArgs'] secret_ref: CHAP Secret for iSCSI target and initiator authentication
        """
        __self__.iqn = iqn
        __self__.lun = lun
        __self__.target_portal = target_portal
        __self__.chap_auth_discovery = chap_auth_discovery
        __self__.chap_auth_session = chap_auth_session
        __self__.fs_type = fs_type
        __self__.initiator_name = initiator_name
        __self__.iscsi_interface = iscsi_interface
        __self__.portals = portals
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref

@pulumi.input_type
class KeyToPathArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    The key to project.
    """
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    """
    mode: Optional[pulumi.Input[float]] = pulumi.input_property("mode")
    """
    Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], path: pulumi.Input[str], mode: Optional[pulumi.Input[float]] = None) -> None:
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[float] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        __self__.key = key
        __self__.path = path
        __self__.mode = mode

@pulumi.input_type
class LifecycleArgs:
    post_start: Optional[pulumi.Input['HandlerArgs']] = pulumi.input_property("postStart")
    """
    PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    """
    pre_stop: Optional[pulumi.Input['HandlerArgs']] = pulumi.input_property("preStop")
    """
    PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, post_start: Optional[pulumi.Input['HandlerArgs']] = None, pre_stop: Optional[pulumi.Input['HandlerArgs']] = None) -> None:
        """
        Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
        :param pulumi.Input['HandlerArgs'] post_start: PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        :param pulumi.Input['HandlerArgs'] pre_stop: PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
        """
        __self__.post_start = post_start
        __self__.pre_stop = pre_stop

@pulumi.input_type
class LimitRangeArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['LimitRangeSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['LimitRangeSpecArgs']] = None) -> None:
        """
        LimitRange sets resource usage limits for each kind of resource in a Namespace.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['LimitRangeSpecArgs'] spec: Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'v1'
        __self__.kind = 'LimitRange'
        __self__.metadata = metadata
        __self__.spec = spec

@pulumi.input_type
class LimitRangeItemArgs:
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type of resource that this limit applies to.
    """
    default: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("default")
    """
    Default resource requirement limit value by resource name if resource limit is omitted.
    """
    default_request: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("defaultRequest")
    """
    DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
    """
    max: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("max")
    """
    Max usage constraints on this kind by resource name.
    """
    max_limit_request_ratio: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("maxLimitRequestRatio")
    """
    MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
    """
    min: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("min")
    """
    Min usage constraints on this kind by resource name.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, type: pulumi.Input[str], default: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, default_request: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, max: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, max_limit_request_ratio: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, min: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
        :param pulumi.Input[str] type: Type of resource that this limit applies to.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] default: Default resource requirement limit value by resource name if resource limit is omitted.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] default_request: DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] max: Max usage constraints on this kind by resource name.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] max_limit_request_ratio: MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] min: Min usage constraints on this kind by resource name.
        """
        __self__.type = type
        __self__.default = default
        __self__.default_request = default_request
        __self__.max = max
        __self__.max_limit_request_ratio = max_limit_request_ratio
        __self__.min = min

@pulumi.input_type
class LimitRangeSpecArgs:
    limits: pulumi.Input[List[pulumi.Input['LimitRangeItemArgs']]] = pulumi.input_property("limits")
    """
    Limits is the list of LimitRangeItem objects that are enforced.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, limits: pulumi.Input[List[pulumi.Input['LimitRangeItemArgs']]]) -> None:
        """
        LimitRangeSpec defines a min/max usage limit for resources that match on kind.
        :param pulumi.Input[List[pulumi.Input['LimitRangeItemArgs']]] limits: Limits is the list of LimitRangeItem objects that are enforced.
        """
        __self__.limits = limits

@pulumi.input_type
class LoadBalancerIngressArgs:
    hostname: Optional[pulumi.Input[str]] = pulumi.input_property("hostname")
    """
    Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
    """
    ip: Optional[pulumi.Input[str]] = pulumi.input_property("ip")
    """
    IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hostname: Optional[pulumi.Input[str]] = None, ip: Optional[pulumi.Input[str]] = None) -> None:
        """
        LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
        :param pulumi.Input[str] hostname: Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
        :param pulumi.Input[str] ip: IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
        """
        __self__.hostname = hostname
        __self__.ip = ip

@pulumi.input_type
class LoadBalancerStatusArgs:
    ingress: Optional[pulumi.Input[List[pulumi.Input['LoadBalancerIngressArgs']]]] = pulumi.input_property("ingress")
    """
    Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ingress: Optional[pulumi.Input[List[pulumi.Input['LoadBalancerIngressArgs']]]] = None) -> None:
        """
        LoadBalancerStatus represents the status of a load-balancer.
        :param pulumi.Input[List[pulumi.Input['LoadBalancerIngressArgs']]] ingress: Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
        """
        __self__.ingress = ingress

@pulumi.input_type
class LocalObjectReferenceArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None) -> None:
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        __self__.name = name

@pulumi.input_type
class LocalVolumeSourceArgs:
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a fileystem if unspecified.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, path: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        Local represents directly-attached storage with node affinity (Beta feature)
        :param pulumi.Input[str] path: The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
        :param pulumi.Input[str] fs_type: Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a fileystem if unspecified.
        """
        __self__.path = path
        __self__.fs_type = fs_type

@pulumi.input_type
class NFSVolumeSourceArgs:
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    """
    server: pulumi.Input[str] = pulumi.input_property("server")
    """
    Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, path: pulumi.Input[str], server: pulumi.Input[str], read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
        :param pulumi.Input[str] path: Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] server: Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[bool] read_only: ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        __self__.path = path
        __self__.server = server
        __self__.read_only = read_only

@pulumi.input_type
class NamespaceArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['NamespaceSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """
    status: Optional[pulumi.Input['NamespaceStatusArgs']] = pulumi.input_property("status")
    """
    Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['NamespaceSpecArgs']] = None, status: Optional[pulumi.Input['NamespaceStatusArgs']] = None) -> None:
        """
        Namespace provides a scope for Names. Use of multiple namespaces is optional.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['NamespaceSpecArgs'] spec: Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['NamespaceStatusArgs'] status: Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'v1'
        __self__.kind = 'Namespace'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class NamespaceConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    """
    Status of the condition, one of True, False, Unknown.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type of namespace controller condition.
    """
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        NamespaceCondition contains details about state of namespace.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of namespace controller condition.
        """
        __self__.status = status
        __self__.type = type
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class NamespaceSpecArgs:
    finalizers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("finalizers")
    """
    Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, finalizers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        NamespaceSpec describes the attributes on a Namespace.
        :param pulumi.Input[List[pulumi.Input[str]]] finalizers: Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
        """
        __self__.finalizers = finalizers

@pulumi.input_type
class NamespaceStatusArgs:
    conditions: Optional[pulumi.Input[List[pulumi.Input['NamespaceConditionArgs']]]] = pulumi.input_property("conditions")
    """
    Represents the latest available observations of a namespace's current state.
    """
    phase: Optional[pulumi.Input[str]] = pulumi.input_property("phase")
    """
    Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, conditions: Optional[pulumi.Input[List[pulumi.Input['NamespaceConditionArgs']]]] = None, phase: Optional[pulumi.Input[str]] = None) -> None:
        """
        NamespaceStatus is information about the current status of a Namespace.
        :param pulumi.Input[List[pulumi.Input['NamespaceConditionArgs']]] conditions: Represents the latest available observations of a namespace's current state.
        :param pulumi.Input[str] phase: Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
        """
        __self__.conditions = conditions
        __self__.phase = phase

@pulumi.input_type
class NodeArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['NodeSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """
    status: Optional[pulumi.Input['NodeStatusArgs']] = pulumi.input_property("status")
    """
    Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['NodeSpecArgs']] = None, status: Optional[pulumi.Input['NodeStatusArgs']] = None) -> None:
        """
        Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['NodeSpecArgs'] spec: Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['NodeStatusArgs'] status: Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'v1'
        __self__.kind = 'Node'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class NodeAddressArgs:
    address: pulumi.Input[str] = pulumi.input_property("address")
    """
    The node address.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Node address type, one of Hostname, ExternalIP or InternalIP.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, address: pulumi.Input[str], type: pulumi.Input[str]) -> None:
        """
        NodeAddress contains information for the node's address.
        :param pulumi.Input[str] address: The node address.
        :param pulumi.Input[str] type: Node address type, one of Hostname, ExternalIP or InternalIP.
        """
        __self__.address = address
        __self__.type = type

@pulumi.input_type
class NodeAffinityArgs:
    preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['PreferredSchedulingTermArgs']]]] = pulumi.input_property("preferredDuringSchedulingIgnoredDuringExecution")
    """
    The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
    """
    required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['NodeSelectorArgs']] = pulumi.input_property("requiredDuringSchedulingIgnoredDuringExecution")
    """
    If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['PreferredSchedulingTermArgs']]]] = None, required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['NodeSelectorArgs']] = None) -> None:
        """
        Node affinity is a group of node affinity scheduling rules.
        :param pulumi.Input[List[pulumi.Input['PreferredSchedulingTermArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input['NodeSelectorArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        __self__.preferred_during_scheduling_ignored_during_execution = preferred_during_scheduling_ignored_during_execution
        __self__.required_during_scheduling_ignored_during_execution = required_during_scheduling_ignored_during_execution

@pulumi.input_type
class NodeConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    """
    Status of the condition, one of True, False, Unknown.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type of node condition.
    """
    last_heartbeat_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastHeartbeatTime")
    """
    Last time we got an update on a given condition.
    """
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    Last time the condition transit from one status to another.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    Human readable message indicating details about last transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    (brief) reason for the condition's last transition.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], last_heartbeat_time: Optional[pulumi.Input[str]] = None, last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        NodeCondition contains condition information for a node.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of node condition.
        :param pulumi.Input[str] last_heartbeat_time: Last time we got an update on a given condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transit from one status to another.
        :param pulumi.Input[str] message: Human readable message indicating details about last transition.
        :param pulumi.Input[str] reason: (brief) reason for the condition's last transition.
        """
        __self__.status = status
        __self__.type = type
        __self__.last_heartbeat_time = last_heartbeat_time
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class NodeConfigSourceArgs:
    config_map: Optional[pulumi.Input['ConfigMapNodeConfigSourceArgs']] = pulumi.input_property("configMap")
    """
    ConfigMap is a reference to a Node's ConfigMap
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, config_map: Optional[pulumi.Input['ConfigMapNodeConfigSourceArgs']] = None) -> None:
        """
        NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.
        :param pulumi.Input['ConfigMapNodeConfigSourceArgs'] config_map: ConfigMap is a reference to a Node's ConfigMap
        """
        __self__.config_map = config_map

@pulumi.input_type
class NodeConfigStatusArgs:
    active: Optional[pulumi.Input['NodeConfigSourceArgs']] = pulumi.input_property("active")
    """
    Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
    """
    assigned: Optional[pulumi.Input['NodeConfigSourceArgs']] = pulumi.input_property("assigned")
    """
    Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
    """
    error: Optional[pulumi.Input[str]] = pulumi.input_property("error")
    """
    Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
    """
    last_known_good: Optional[pulumi.Input['NodeConfigSourceArgs']] = pulumi.input_property("lastKnownGood")
    """
    LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, active: Optional[pulumi.Input['NodeConfigSourceArgs']] = None, assigned: Optional[pulumi.Input['NodeConfigSourceArgs']] = None, error: Optional[pulumi.Input[str]] = None, last_known_good: Optional[pulumi.Input['NodeConfigSourceArgs']] = None) -> None:
        """
        NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
        :param pulumi.Input['NodeConfigSourceArgs'] active: Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
        :param pulumi.Input['NodeConfigSourceArgs'] assigned: Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
        :param pulumi.Input[str] error: Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
        :param pulumi.Input['NodeConfigSourceArgs'] last_known_good: LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
        """
        __self__.active = active
        __self__.assigned = assigned
        __self__.error = error
        __self__.last_known_good = last_known_good

@pulumi.input_type
class NodeDaemonEndpointsArgs:
    kubelet_endpoint: Optional[pulumi.Input['DaemonEndpointArgs']] = pulumi.input_property("kubeletEndpoint")
    """
    Endpoint on which Kubelet is listening.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, kubelet_endpoint: Optional[pulumi.Input['DaemonEndpointArgs']] = None) -> None:
        """
        NodeDaemonEndpoints lists ports opened by daemons running on the Node.
        :param pulumi.Input['DaemonEndpointArgs'] kubelet_endpoint: Endpoint on which Kubelet is listening.
        """
        __self__.kubelet_endpoint = kubelet_endpoint

@pulumi.input_type
class NodeSelectorArgs:
    node_selector_terms: pulumi.Input[List[pulumi.Input['NodeSelectorTermArgs']]] = pulumi.input_property("nodeSelectorTerms")
    """
    Required. A list of node selector terms. The terms are ORed.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, node_selector_terms: pulumi.Input[List[pulumi.Input['NodeSelectorTermArgs']]]) -> None:
        """
        A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
        :param pulumi.Input[List[pulumi.Input['NodeSelectorTermArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        __self__.node_selector_terms = node_selector_terms

@pulumi.input_type
class NodeSelectorRequirementArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    The label key that the selector applies to.
    """
    operator: pulumi.Input[str] = pulumi.input_property("operator")
    """
    Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    """
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], operator: pulumi.Input[str], values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[List[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        __self__.key = key
        __self__.operator = operator
        __self__.values = values

@pulumi.input_type
class NodeSelectorTermArgs:
    match_expressions: Optional[pulumi.Input[List[pulumi.Input['NodeSelectorRequirementArgs']]]] = pulumi.input_property("matchExpressions")
    """
    A list of node selector requirements by node's labels.
    """
    match_fields: Optional[pulumi.Input[List[pulumi.Input['NodeSelectorRequirementArgs']]]] = pulumi.input_property("matchFields")
    """
    A list of node selector requirements by node's fields.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, match_expressions: Optional[pulumi.Input[List[pulumi.Input['NodeSelectorRequirementArgs']]]] = None, match_fields: Optional[pulumi.Input[List[pulumi.Input['NodeSelectorRequirementArgs']]]] = None) -> None:
        """
        A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[List[pulumi.Input['NodeSelectorRequirementArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[List[pulumi.Input['NodeSelectorRequirementArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        __self__.match_expressions = match_expressions
        __self__.match_fields = match_fields

@pulumi.input_type
class NodeSpecArgs:
    config_source: Optional[pulumi.Input['NodeConfigSourceArgs']] = pulumi.input_property("configSource")
    """
    If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field
    """
    external_id: Optional[pulumi.Input[str]] = pulumi.input_property("externalID")
    """
    Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
    """
    pod_cidr: Optional[pulumi.Input[str]] = pulumi.input_property("podCIDR")
    """
    PodCIDR represents the pod IP range assigned to the node.
    """
    pod_cid_rs: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("podCIDRs")
    """
    podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
    """
    provider_id: Optional[pulumi.Input[str]] = pulumi.input_property("providerID")
    """
    ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
    """
    taints: Optional[pulumi.Input[List[pulumi.Input['TaintArgs']]]] = pulumi.input_property("taints")
    """
    If specified, the node's taints.
    """
    unschedulable: Optional[pulumi.Input[bool]] = pulumi.input_property("unschedulable")
    """
    Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, config_source: Optional[pulumi.Input['NodeConfigSourceArgs']] = None, external_id: Optional[pulumi.Input[str]] = None, pod_cidr: Optional[pulumi.Input[str]] = None, pod_cid_rs: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, provider_id: Optional[pulumi.Input[str]] = None, taints: Optional[pulumi.Input[List[pulumi.Input['TaintArgs']]]] = None, unschedulable: Optional[pulumi.Input[bool]] = None) -> None:
        """
        NodeSpec describes the attributes that a node is created with.
        :param pulumi.Input['NodeConfigSourceArgs'] config_source: If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field
        :param pulumi.Input[str] external_id: Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
        :param pulumi.Input[str] pod_cidr: PodCIDR represents the pod IP range assigned to the node.
        :param pulumi.Input[List[pulumi.Input[str]]] pod_cid_rs: podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
        :param pulumi.Input[str] provider_id: ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
        :param pulumi.Input[List[pulumi.Input['TaintArgs']]] taints: If specified, the node's taints.
        :param pulumi.Input[bool] unschedulable: Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
        """
        __self__.config_source = config_source
        __self__.external_id = external_id
        __self__.pod_cidr = pod_cidr
        __self__.pod_cid_rs = pod_cid_rs
        __self__.provider_id = provider_id
        __self__.taints = taints
        __self__.unschedulable = unschedulable

@pulumi.input_type
class NodeStatusArgs:
    addresses: Optional[pulumi.Input[List[pulumi.Input['NodeAddressArgs']]]] = pulumi.input_property("addresses")
    """
    List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
    """
    allocatable: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("allocatable")
    """
    Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
    """
    capacity: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("capacity")
    """
    Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    """
    conditions: Optional[pulumi.Input[List[pulumi.Input['NodeConditionArgs']]]] = pulumi.input_property("conditions")
    """
    Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
    """
    config: Optional[pulumi.Input['NodeConfigStatusArgs']] = pulumi.input_property("config")
    """
    Status of the config assigned to the node via the dynamic Kubelet config feature.
    """
    daemon_endpoints: Optional[pulumi.Input['NodeDaemonEndpointsArgs']] = pulumi.input_property("daemonEndpoints")
    """
    Endpoints of daemons running on the Node.
    """
    images: Optional[pulumi.Input[List[pulumi.Input['ContainerImageArgs']]]] = pulumi.input_property("images")
    """
    List of container images on this node
    """
    node_info: Optional[pulumi.Input['NodeSystemInfoArgs']] = pulumi.input_property("nodeInfo")
    """
    Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
    """
    phase: Optional[pulumi.Input[str]] = pulumi.input_property("phase")
    """
    NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
    """
    volumes_attached: Optional[pulumi.Input[List[pulumi.Input['AttachedVolumeArgs']]]] = pulumi.input_property("volumesAttached")
    """
    List of volumes that are attached to the node.
    """
    volumes_in_use: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("volumesInUse")
    """
    List of attachable volumes in use (mounted) by the node.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, addresses: Optional[pulumi.Input[List[pulumi.Input['NodeAddressArgs']]]] = None, allocatable: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, capacity: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, conditions: Optional[pulumi.Input[List[pulumi.Input['NodeConditionArgs']]]] = None, config: Optional[pulumi.Input['NodeConfigStatusArgs']] = None, daemon_endpoints: Optional[pulumi.Input['NodeDaemonEndpointsArgs']] = None, images: Optional[pulumi.Input[List[pulumi.Input['ContainerImageArgs']]]] = None, node_info: Optional[pulumi.Input['NodeSystemInfoArgs']] = None, phase: Optional[pulumi.Input[str]] = None, volumes_attached: Optional[pulumi.Input[List[pulumi.Input['AttachedVolumeArgs']]]] = None, volumes_in_use: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        NodeStatus is information about the current status of a node.
        :param pulumi.Input[List[pulumi.Input['NodeAddressArgs']]] addresses: List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] allocatable: Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] capacity: Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
        :param pulumi.Input[List[pulumi.Input['NodeConditionArgs']]] conditions: Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
        :param pulumi.Input['NodeConfigStatusArgs'] config: Status of the config assigned to the node via the dynamic Kubelet config feature.
        :param pulumi.Input['NodeDaemonEndpointsArgs'] daemon_endpoints: Endpoints of daemons running on the Node.
        :param pulumi.Input[List[pulumi.Input['ContainerImageArgs']]] images: List of container images on this node
        :param pulumi.Input['NodeSystemInfoArgs'] node_info: Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
        :param pulumi.Input[str] phase: NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
        :param pulumi.Input[List[pulumi.Input['AttachedVolumeArgs']]] volumes_attached: List of volumes that are attached to the node.
        :param pulumi.Input[List[pulumi.Input[str]]] volumes_in_use: List of attachable volumes in use (mounted) by the node.
        """
        __self__.addresses = addresses
        __self__.allocatable = allocatable
        __self__.capacity = capacity
        __self__.conditions = conditions
        __self__.config = config
        __self__.daemon_endpoints = daemon_endpoints
        __self__.images = images
        __self__.node_info = node_info
        __self__.phase = phase
        __self__.volumes_attached = volumes_attached
        __self__.volumes_in_use = volumes_in_use

@pulumi.input_type
class NodeSystemInfoArgs:
    architecture: pulumi.Input[str] = pulumi.input_property("architecture")
    """
    The Architecture reported by the node
    """
    boot_id: pulumi.Input[str] = pulumi.input_property("bootID")
    """
    Boot ID reported by the node.
    """
    container_runtime_version: pulumi.Input[str] = pulumi.input_property("containerRuntimeVersion")
    """
    ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
    """
    kernel_version: pulumi.Input[str] = pulumi.input_property("kernelVersion")
    """
    Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
    """
    kube_proxy_version: pulumi.Input[str] = pulumi.input_property("kubeProxyVersion")
    """
    KubeProxy Version reported by the node.
    """
    kubelet_version: pulumi.Input[str] = pulumi.input_property("kubeletVersion")
    """
    Kubelet Version reported by the node.
    """
    machine_id: pulumi.Input[str] = pulumi.input_property("machineID")
    """
    MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
    """
    operating_system: pulumi.Input[str] = pulumi.input_property("operatingSystem")
    """
    The Operating System reported by the node
    """
    os_image: pulumi.Input[str] = pulumi.input_property("osImage")
    """
    OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
    """
    system_uuid: pulumi.Input[str] = pulumi.input_property("systemUUID")
    """
    SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, architecture: pulumi.Input[str], boot_id: pulumi.Input[str], container_runtime_version: pulumi.Input[str], kernel_version: pulumi.Input[str], kube_proxy_version: pulumi.Input[str], kubelet_version: pulumi.Input[str], machine_id: pulumi.Input[str], operating_system: pulumi.Input[str], os_image: pulumi.Input[str], system_uuid: pulumi.Input[str]) -> None:
        """
        NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
        :param pulumi.Input[str] architecture: The Architecture reported by the node
        :param pulumi.Input[str] boot_id: Boot ID reported by the node.
        :param pulumi.Input[str] container_runtime_version: ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
        :param pulumi.Input[str] kernel_version: Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
        :param pulumi.Input[str] kube_proxy_version: KubeProxy Version reported by the node.
        :param pulumi.Input[str] kubelet_version: Kubelet Version reported by the node.
        :param pulumi.Input[str] machine_id: MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
        :param pulumi.Input[str] operating_system: The Operating System reported by the node
        :param pulumi.Input[str] os_image: OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
        :param pulumi.Input[str] system_uuid: SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
        """
        __self__.architecture = architecture
        __self__.boot_id = boot_id
        __self__.container_runtime_version = container_runtime_version
        __self__.kernel_version = kernel_version
        __self__.kube_proxy_version = kube_proxy_version
        __self__.kubelet_version = kubelet_version
        __self__.machine_id = machine_id
        __self__.operating_system = operating_system
        __self__.os_image = os_image
        __self__.system_uuid = system_uuid

@pulumi.input_type
class ObjectFieldSelectorArgs:
    field_path: pulumi.Input[str] = pulumi.input_property("fieldPath")
    """
    Path of the field to select in the specified API version.
    """
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    Version of the schema the FieldPath is written in terms of, defaults to "v1".
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, field_path: pulumi.Input[str], api_version: Optional[pulumi.Input[str]] = None) -> None:
        """
        ObjectFieldSelector selects an APIVersioned field of an object.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        __self__.field_path = field_path
        __self__.api_version = api_version

@pulumi.input_type
class ObjectReferenceArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    API version of the referent.
    """
    field_path: Optional[pulumi.Input[str]] = pulumi.input_property("fieldPath")
    """
    If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    namespace: Optional[pulumi.Input[str]] = pulumi.input_property("namespace")
    """
    Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    """
    resource_version: Optional[pulumi.Input[str]] = pulumi.input_property("resourceVersion")
    """
    Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    """
    uid: Optional[pulumi.Input[str]] = pulumi.input_property("uid")
    """
    UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, field_path: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, namespace: Optional[pulumi.Input[str]] = None, resource_version: Optional[pulumi.Input[str]] = None, uid: Optional[pulumi.Input[str]] = None) -> None:
        """
        ObjectReference contains enough information to let you inspect or modify the referred object.
        :param pulumi.Input[str] api_version: API version of the referent.
        :param pulumi.Input[str] field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
        :param pulumi.Input[str] kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param pulumi.Input[str] resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        __self__.api_version = api_version
        __self__.field_path = field_path
        __self__.kind = kind
        __self__.name = name
        __self__.namespace = namespace
        __self__.resource_version = resource_version
        __self__.uid = uid

@pulumi.input_type
class PersistentVolumeArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['PersistentVolumeSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
    """
    status: Optional[pulumi.Input['PersistentVolumeStatusArgs']] = pulumi.input_property("status")
    """
    Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['PersistentVolumeSpecArgs']] = None, status: Optional[pulumi.Input['PersistentVolumeStatusArgs']] = None) -> None:
        """
        PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['PersistentVolumeSpecArgs'] spec: Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
        :param pulumi.Input['PersistentVolumeStatusArgs'] status: Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
        """
        __self__.api_version = 'v1'
        __self__.kind = 'PersistentVolume'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class PersistentVolumeClaimArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['PersistentVolumeClaimSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    """
    status: Optional[pulumi.Input['PersistentVolumeClaimStatusArgs']] = pulumi.input_property("status")
    """
    Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['PersistentVolumeClaimSpecArgs']] = None, status: Optional[pulumi.Input['PersistentVolumeClaimStatusArgs']] = None) -> None:
        """
        PersistentVolumeClaim is a user's request for and claim to a persistent volume
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['PersistentVolumeClaimSpecArgs'] spec: Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input['PersistentVolumeClaimStatusArgs'] status: Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        __self__.api_version = 'v1'
        __self__.kind = 'PersistentVolumeClaim'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class PersistentVolumeClaimConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    type: pulumi.Input[str] = pulumi.input_property("type")
    last_probe_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastProbeTime")
    """
    Last time we probed the condition.
    """
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    Last time the condition transitioned from one status to another.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    Human-readable message indicating details about last transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], last_probe_time: Optional[pulumi.Input[str]] = None, last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        PersistentVolumeClaimCondition contails details about state of pvc
        :param pulumi.Input[str] last_probe_time: Last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
        """
        __self__.status = status
        __self__.type = type
        __self__.last_probe_time = last_probe_time
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class PersistentVolumeClaimSpecArgs:
    access_modes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("accessModes")
    """
    AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    """
    data_source: Optional[pulumi.Input['TypedLocalObjectReferenceArgs']] = pulumi.input_property("dataSource")
    """
    This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
    """
    resources: Optional[pulumi.Input['ResourceRequirementsArgs']] = pulumi.input_property("resources")
    """
    Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
    """
    selector: Optional[pulumi.Input['LabelSelectorArgs']] = pulumi.input_property("selector")
    """
    A label query over volumes to consider for binding.
    """
    storage_class_name: Optional[pulumi.Input[str]] = pulumi.input_property("storageClassName")
    """
    Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    """
    volume_mode: Optional[pulumi.Input[str]] = pulumi.input_property("volumeMode")
    """
    volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
    """
    volume_name: Optional[pulumi.Input[str]] = pulumi.input_property("volumeName")
    """
    VolumeName is the binding reference to the PersistentVolume backing this claim.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access_modes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, data_source: Optional[pulumi.Input['TypedLocalObjectReferenceArgs']] = None, resources: Optional[pulumi.Input['ResourceRequirementsArgs']] = None, selector: Optional[pulumi.Input['LabelSelectorArgs']] = None, storage_class_name: Optional[pulumi.Input[str]] = None, volume_mode: Optional[pulumi.Input[str]] = None, volume_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
        :param pulumi.Input[List[pulumi.Input[str]]] access_modes: AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        :param pulumi.Input['TypedLocalObjectReferenceArgs'] data_source: This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.
        :param pulumi.Input['ResourceRequirementsArgs'] resources: Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        :param pulumi.Input['LabelSelectorArgs'] selector: A label query over volumes to consider for binding.
        :param pulumi.Input[str] storage_class_name: Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        :param pulumi.Input[str] volume_mode: volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
        :param pulumi.Input[str] volume_name: VolumeName is the binding reference to the PersistentVolume backing this claim.
        """
        __self__.access_modes = access_modes
        __self__.data_source = data_source
        __self__.resources = resources
        __self__.selector = selector
        __self__.storage_class_name = storage_class_name
        __self__.volume_mode = volume_mode
        __self__.volume_name = volume_name

@pulumi.input_type
class PersistentVolumeClaimStatusArgs:
    access_modes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("accessModes")
    """
    AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    """
    capacity: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("capacity")
    """
    Represents the actual resources of the underlying volume.
    """
    conditions: Optional[pulumi.Input[List[pulumi.Input['PersistentVolumeClaimConditionArgs']]]] = pulumi.input_property("conditions")
    """
    Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
    """
    phase: Optional[pulumi.Input[str]] = pulumi.input_property("phase")
    """
    Phase represents the current phase of PersistentVolumeClaim.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access_modes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, capacity: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, conditions: Optional[pulumi.Input[List[pulumi.Input['PersistentVolumeClaimConditionArgs']]]] = None, phase: Optional[pulumi.Input[str]] = None) -> None:
        """
        PersistentVolumeClaimStatus is the current status of a persistent volume claim.
        :param pulumi.Input[List[pulumi.Input[str]]] access_modes: AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] capacity: Represents the actual resources of the underlying volume.
        :param pulumi.Input[List[pulumi.Input['PersistentVolumeClaimConditionArgs']]] conditions: Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
        :param pulumi.Input[str] phase: Phase represents the current phase of PersistentVolumeClaim.
        """
        __self__.access_modes = access_modes
        __self__.capacity = capacity
        __self__.conditions = conditions
        __self__.phase = phase

@pulumi.input_type
class PersistentVolumeClaimVolumeSourceArgs:
    claim_name: pulumi.Input[str] = pulumi.input_property("claimName")
    """
    ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Will force the ReadOnly setting in VolumeMounts. Default false.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, claim_name: pulumi.Input[str], read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
        :param pulumi.Input[str] claim_name: ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input[bool] read_only: Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        __self__.claim_name = claim_name
        __self__.read_only = read_only

@pulumi.input_type
class PersistentVolumeSpecArgs:
    access_modes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("accessModes")
    """
    AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
    """
    aws_elastic_block_store: Optional[pulumi.Input['AWSElasticBlockStoreVolumeSourceArgs']] = pulumi.input_property("awsElasticBlockStore")
    """
    AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    """
    azure_disk: Optional[pulumi.Input['AzureDiskVolumeSourceArgs']] = pulumi.input_property("azureDisk")
    """
    AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    """
    azure_file: Optional[pulumi.Input['AzureFilePersistentVolumeSourceArgs']] = pulumi.input_property("azureFile")
    """
    AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    """
    capacity: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("capacity")
    """
    A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    """
    cephfs: Optional[pulumi.Input['CephFSPersistentVolumeSourceArgs']] = pulumi.input_property("cephfs")
    """
    CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    """
    cinder: Optional[pulumi.Input['CinderPersistentVolumeSourceArgs']] = pulumi.input_property("cinder")
    """
    Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    claim_ref: Optional[pulumi.Input['ObjectReferenceArgs']] = pulumi.input_property("claimRef")
    """
    ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
    """
    csi: Optional[pulumi.Input['CSIPersistentVolumeSourceArgs']] = pulumi.input_property("csi")
    """
    CSI represents storage that is handled by an external CSI driver (Beta feature).
    """
    fc: Optional[pulumi.Input['FCVolumeSourceArgs']] = pulumi.input_property("fc")
    """
    FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    """
    flex_volume: Optional[pulumi.Input['FlexPersistentVolumeSourceArgs']] = pulumi.input_property("flexVolume")
    """
    FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    """
    flocker: Optional[pulumi.Input['FlockerVolumeSourceArgs']] = pulumi.input_property("flocker")
    """
    Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
    """
    gce_persistent_disk: Optional[pulumi.Input['GCEPersistentDiskVolumeSourceArgs']] = pulumi.input_property("gcePersistentDisk")
    """
    GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """
    glusterfs: Optional[pulumi.Input['GlusterfsPersistentVolumeSourceArgs']] = pulumi.input_property("glusterfs")
    """
    Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
    """
    host_path: Optional[pulumi.Input['HostPathVolumeSourceArgs']] = pulumi.input_property("hostPath")
    """
    HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    """
    iscsi: Optional[pulumi.Input['ISCSIPersistentVolumeSourceArgs']] = pulumi.input_property("iscsi")
    """
    ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
    """
    local: Optional[pulumi.Input['LocalVolumeSourceArgs']] = pulumi.input_property("local")
    """
    Local represents directly-attached storage with node affinity
    """
    mount_options: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("mountOptions")
    """
    A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
    """
    nfs: Optional[pulumi.Input['NFSVolumeSourceArgs']] = pulumi.input_property("nfs")
    """
    NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    """
    node_affinity: Optional[pulumi.Input['VolumeNodeAffinityArgs']] = pulumi.input_property("nodeAffinity")
    """
    NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
    """
    persistent_volume_reclaim_policy: Optional[pulumi.Input[str]] = pulumi.input_property("persistentVolumeReclaimPolicy")
    """
    What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
    """
    photon_persistent_disk: Optional[pulumi.Input['PhotonPersistentDiskVolumeSourceArgs']] = pulumi.input_property("photonPersistentDisk")
    """
    PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    """
    portworx_volume: Optional[pulumi.Input['PortworxVolumeSourceArgs']] = pulumi.input_property("portworxVolume")
    """
    PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
    """
    quobyte: Optional[pulumi.Input['QuobyteVolumeSourceArgs']] = pulumi.input_property("quobyte")
    """
    Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    """
    rbd: Optional[pulumi.Input['RBDPersistentVolumeSourceArgs']] = pulumi.input_property("rbd")
    """
    RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
    """
    scale_io: Optional[pulumi.Input['ScaleIOPersistentVolumeSourceArgs']] = pulumi.input_property("scaleIO")
    """
    ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    """
    storage_class_name: Optional[pulumi.Input[str]] = pulumi.input_property("storageClassName")
    """
    Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
    """
    storageos: Optional[pulumi.Input['StorageOSPersistentVolumeSourceArgs']] = pulumi.input_property("storageos")
    """
    StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
    """
    volume_mode: Optional[pulumi.Input[str]] = pulumi.input_property("volumeMode")
    """
    volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
    """
    vsphere_volume: Optional[pulumi.Input['VsphereVirtualDiskVolumeSourceArgs']] = pulumi.input_property("vsphereVolume")
    """
    VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, access_modes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, aws_elastic_block_store: Optional[pulumi.Input['AWSElasticBlockStoreVolumeSourceArgs']] = None, azure_disk: Optional[pulumi.Input['AzureDiskVolumeSourceArgs']] = None, azure_file: Optional[pulumi.Input['AzureFilePersistentVolumeSourceArgs']] = None, capacity: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, cephfs: Optional[pulumi.Input['CephFSPersistentVolumeSourceArgs']] = None, cinder: Optional[pulumi.Input['CinderPersistentVolumeSourceArgs']] = None, claim_ref: Optional[pulumi.Input['ObjectReferenceArgs']] = None, csi: Optional[pulumi.Input['CSIPersistentVolumeSourceArgs']] = None, fc: Optional[pulumi.Input['FCVolumeSourceArgs']] = None, flex_volume: Optional[pulumi.Input['FlexPersistentVolumeSourceArgs']] = None, flocker: Optional[pulumi.Input['FlockerVolumeSourceArgs']] = None, gce_persistent_disk: Optional[pulumi.Input['GCEPersistentDiskVolumeSourceArgs']] = None, glusterfs: Optional[pulumi.Input['GlusterfsPersistentVolumeSourceArgs']] = None, host_path: Optional[pulumi.Input['HostPathVolumeSourceArgs']] = None, iscsi: Optional[pulumi.Input['ISCSIPersistentVolumeSourceArgs']] = None, local: Optional[pulumi.Input['LocalVolumeSourceArgs']] = None, mount_options: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, nfs: Optional[pulumi.Input['NFSVolumeSourceArgs']] = None, node_affinity: Optional[pulumi.Input['VolumeNodeAffinityArgs']] = None, persistent_volume_reclaim_policy: Optional[pulumi.Input[str]] = None, photon_persistent_disk: Optional[pulumi.Input['PhotonPersistentDiskVolumeSourceArgs']] = None, portworx_volume: Optional[pulumi.Input['PortworxVolumeSourceArgs']] = None, quobyte: Optional[pulumi.Input['QuobyteVolumeSourceArgs']] = None, rbd: Optional[pulumi.Input['RBDPersistentVolumeSourceArgs']] = None, scale_io: Optional[pulumi.Input['ScaleIOPersistentVolumeSourceArgs']] = None, storage_class_name: Optional[pulumi.Input[str]] = None, storageos: Optional[pulumi.Input['StorageOSPersistentVolumeSourceArgs']] = None, volume_mode: Optional[pulumi.Input[str]] = None, vsphere_volume: Optional[pulumi.Input['VsphereVirtualDiskVolumeSourceArgs']] = None) -> None:
        """
        PersistentVolumeSpec is the specification of a persistent volume.
        :param pulumi.Input[List[pulumi.Input[str]]] access_modes: AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
        :param pulumi.Input['AWSElasticBlockStoreVolumeSourceArgs'] aws_elastic_block_store: AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input['AzureDiskVolumeSourceArgs'] azure_disk: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input['AzureFilePersistentVolumeSourceArgs'] azure_file: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] capacity: A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
        :param pulumi.Input['CephFSPersistentVolumeSourceArgs'] cephfs: CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input['CinderPersistentVolumeSourceArgs'] cinder: Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['ObjectReferenceArgs'] claim_ref: ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
        :param pulumi.Input['CSIPersistentVolumeSourceArgs'] csi: CSI represents storage that is handled by an external CSI driver (Beta feature).
        :param pulumi.Input['FCVolumeSourceArgs'] fc: FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input['FlexPersistentVolumeSourceArgs'] flex_volume: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input['FlockerVolumeSourceArgs'] flocker: Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
        :param pulumi.Input['GCEPersistentDiskVolumeSourceArgs'] gce_persistent_disk: GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input['GlusterfsPersistentVolumeSourceArgs'] glusterfs: Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input['HostPathVolumeSourceArgs'] host_path: HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input['ISCSIPersistentVolumeSourceArgs'] iscsi: ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
        :param pulumi.Input['LocalVolumeSourceArgs'] local: Local represents directly-attached storage with node affinity
        :param pulumi.Input[List[pulumi.Input[str]]] mount_options: A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
        :param pulumi.Input['NFSVolumeSourceArgs'] nfs: NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input['VolumeNodeAffinityArgs'] node_affinity: NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
        :param pulumi.Input[str] persistent_volume_reclaim_policy: What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
        :param pulumi.Input['PhotonPersistentDiskVolumeSourceArgs'] photon_persistent_disk: PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input['PortworxVolumeSourceArgs'] portworx_volume: PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input['QuobyteVolumeSourceArgs'] quobyte: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input['RBDPersistentVolumeSourceArgs'] rbd: RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input['ScaleIOPersistentVolumeSourceArgs'] scale_io: ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input[str] storage_class_name: Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
        :param pulumi.Input['StorageOSPersistentVolumeSourceArgs'] storageos: StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
        :param pulumi.Input[str] volume_mode: volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
        :param pulumi.Input['VsphereVirtualDiskVolumeSourceArgs'] vsphere_volume: VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        __self__.access_modes = access_modes
        __self__.aws_elastic_block_store = aws_elastic_block_store
        __self__.azure_disk = azure_disk
        __self__.azure_file = azure_file
        __self__.capacity = capacity
        __self__.cephfs = cephfs
        __self__.cinder = cinder
        __self__.claim_ref = claim_ref
        __self__.csi = csi
        __self__.fc = fc
        __self__.flex_volume = flex_volume
        __self__.flocker = flocker
        __self__.gce_persistent_disk = gce_persistent_disk
        __self__.glusterfs = glusterfs
        __self__.host_path = host_path
        __self__.iscsi = iscsi
        __self__.local = local
        __self__.mount_options = mount_options
        __self__.nfs = nfs
        __self__.node_affinity = node_affinity
        __self__.persistent_volume_reclaim_policy = persistent_volume_reclaim_policy
        __self__.photon_persistent_disk = photon_persistent_disk
        __self__.portworx_volume = portworx_volume
        __self__.quobyte = quobyte
        __self__.rbd = rbd
        __self__.scale_io = scale_io
        __self__.storage_class_name = storage_class_name
        __self__.storageos = storageos
        __self__.volume_mode = volume_mode
        __self__.vsphere_volume = vsphere_volume

@pulumi.input_type
class PersistentVolumeStatusArgs:
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    A human-readable message indicating details about why the volume is in this state.
    """
    phase: Optional[pulumi.Input[str]] = pulumi.input_property("phase")
    """
    Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, message: Optional[pulumi.Input[str]] = None, phase: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        PersistentVolumeStatus is the current status of a persistent volume.
        :param pulumi.Input[str] message: A human-readable message indicating details about why the volume is in this state.
        :param pulumi.Input[str] phase: Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
        :param pulumi.Input[str] reason: Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
        """
        __self__.message = message
        __self__.phase = phase
        __self__.reason = reason

@pulumi.input_type
class PhotonPersistentDiskVolumeSourceArgs:
    pd_id: pulumi.Input[str] = pulumi.input_property("pdID")
    """
    ID that identifies Photon Controller persistent disk
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pd_id: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a Photon Controller persistent disk resource.
        :param pulumi.Input[str] pd_id: ID that identifies Photon Controller persistent disk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        __self__.pd_id = pd_id
        __self__.fs_type = fs_type

@pulumi.input_type
class PodArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['PodSpecArgs']] = pulumi.input_property("spec")
    """
    Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """
    status: Optional[pulumi.Input['PodStatusArgs']] = pulumi.input_property("status")
    """
    Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['PodSpecArgs']] = None, status: Optional[pulumi.Input['PodStatusArgs']] = None) -> None:
        """
        Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.

        This resource waits until its status is ready before registering success
        for create/update, and populating output properties from the current state of the resource.
        The following conditions are used to determine whether the resource creation has
        succeeded or failed:

        1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
        2. The Pod is initialized ("Initialized" '.status.condition' is true).
        3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
           set to "Running".
        Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").

        If the Pod has not reached a Ready state after 10 minutes, it will
        time out and mark the resource update as Failed. You can override the default timeout value
        by setting the 'customTimeouts' option on the resource.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['PodSpecArgs'] spec: Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['PodStatusArgs'] status: Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'v1'
        __self__.kind = 'Pod'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class PodAffinityArgs:
    preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['WeightedPodAffinityTermArgs']]]] = pulumi.input_property("preferredDuringSchedulingIgnoredDuringExecution")
    """
    The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    """
    required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['PodAffinityTermArgs']]]] = pulumi.input_property("requiredDuringSchedulingIgnoredDuringExecution")
    """
    If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['WeightedPodAffinityTermArgs']]]] = None, required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['PodAffinityTermArgs']]]] = None) -> None:
        """
        Pod affinity is a group of inter pod affinity scheduling rules.
        :param pulumi.Input[List[pulumi.Input['WeightedPodAffinityTermArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[List[pulumi.Input['PodAffinityTermArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        __self__.preferred_during_scheduling_ignored_during_execution = preferred_during_scheduling_ignored_during_execution
        __self__.required_during_scheduling_ignored_during_execution = required_during_scheduling_ignored_during_execution

@pulumi.input_type
class PodAffinityTermArgs:
    topology_key: pulumi.Input[str] = pulumi.input_property("topologyKey")
    """
    This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """
    label_selector: Optional[pulumi.Input['LabelSelectorArgs']] = pulumi.input_property("labelSelector")
    """
    A label query over a set of resources, in this case pods.
    """
    namespaces: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("namespaces")
    """
    namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, topology_key: pulumi.Input[str], label_selector: Optional[pulumi.Input['LabelSelectorArgs']] = None, namespaces: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['LabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[List[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        __self__.topology_key = topology_key
        __self__.label_selector = label_selector
        __self__.namespaces = namespaces

@pulumi.input_type
class PodAntiAffinityArgs:
    preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['WeightedPodAffinityTermArgs']]]] = pulumi.input_property("preferredDuringSchedulingIgnoredDuringExecution")
    """
    The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    """
    required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['PodAffinityTermArgs']]]] = pulumi.input_property("requiredDuringSchedulingIgnoredDuringExecution")
    """
    If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['WeightedPodAffinityTermArgs']]]] = None, required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['PodAffinityTermArgs']]]] = None) -> None:
        """
        Pod anti affinity is a group of inter pod anti affinity scheduling rules.
        :param pulumi.Input[List[pulumi.Input['WeightedPodAffinityTermArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[List[pulumi.Input['PodAffinityTermArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        __self__.preferred_during_scheduling_ignored_during_execution = preferred_during_scheduling_ignored_during_execution
        __self__.required_during_scheduling_ignored_during_execution = required_during_scheduling_ignored_during_execution

@pulumi.input_type
class PodConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    """
    Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    """
    last_probe_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastProbeTime")
    """
    Last time we probed the condition.
    """
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    Last time the condition transitioned from one status to another.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    Human-readable message indicating details about last transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    Unique, one-word, CamelCase reason for the condition's last transition.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], last_probe_time: Optional[pulumi.Input[str]] = None, last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        PodCondition contains details for the current condition of this pod.
        :param pulumi.Input[str] status: Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        :param pulumi.Input[str] type: Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        :param pulumi.Input[str] last_probe_time: Last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Unique, one-word, CamelCase reason for the condition's last transition.
        """
        __self__.status = status
        __self__.type = type
        __self__.last_probe_time = last_probe_time
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class PodDNSConfigArgs:
    nameservers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("nameservers")
    """
    A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
    """
    options: Optional[pulumi.Input[List[pulumi.Input['PodDNSConfigOptionArgs']]]] = pulumi.input_property("options")
    """
    A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
    """
    searches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("searches")
    """
    A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, nameservers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, options: Optional[pulumi.Input[List[pulumi.Input['PodDNSConfigOptionArgs']]]] = None, searches: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
        :param pulumi.Input[List[pulumi.Input[str]]] nameservers: A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        :param pulumi.Input[List[pulumi.Input['PodDNSConfigOptionArgs']]] options: A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        :param pulumi.Input[List[pulumi.Input[str]]] searches: A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        __self__.nameservers = nameservers
        __self__.options = options
        __self__.searches = searches

@pulumi.input_type
class PodDNSConfigOptionArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Required.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        """
        PodDNSConfigOption defines DNS resolver options of a pod.
        :param pulumi.Input[str] name: Required.
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class PodIPArgs:
    ip: Optional[pulumi.Input[str]] = pulumi.input_property("ip")
    """
    ip is an IP address (IPv4 or IPv6) assigned to the pod
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ip: Optional[pulumi.Input[str]] = None) -> None:
        """
        IP address information for entries in the (plural) PodIPs field. Each entry includes:
           IP: An IP address allocated to the pod. Routable at least within the cluster.
        :param pulumi.Input[str] ip: ip is an IP address (IPv4 or IPv6) assigned to the pod
        """
        __self__.ip = ip

@pulumi.input_type
class PodReadinessGateArgs:
    condition_type: pulumi.Input[str] = pulumi.input_property("conditionType")
    """
    ConditionType refers to a condition in the pod's condition list with matching type.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, condition_type: pulumi.Input[str]) -> None:
        """
        PodReadinessGate contains the reference to a pod condition
        :param pulumi.Input[str] condition_type: ConditionType refers to a condition in the pod's condition list with matching type.
        """
        __self__.condition_type = condition_type

@pulumi.input_type
class PodSecurityContextArgs:
    fs_group: Optional[pulumi.Input[float]] = pulumi.input_property("fsGroup")
    """
    A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:

    1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----

    If unset, the Kubelet will not modify the ownership and permissions of any volume.
    """
    fs_group_change_policy: Optional[pulumi.Input[str]] = pulumi.input_property("fsGroupChangePolicy")
    """
    fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".
    """
    run_as_group: Optional[pulumi.Input[float]] = pulumi.input_property("runAsGroup")
    """
    The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
    """
    run_as_non_root: Optional[pulumi.Input[bool]] = pulumi.input_property("runAsNonRoot")
    """
    Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    run_as_user: Optional[pulumi.Input[float]] = pulumi.input_property("runAsUser")
    """
    The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
    """
    se_linux_options: Optional[pulumi.Input['SELinuxOptionsArgs']] = pulumi.input_property("seLinuxOptions")
    """
    The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
    """
    supplemental_groups: Optional[pulumi.Input[List[pulumi.Input[float]]]] = pulumi.input_property("supplementalGroups")
    """
    A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
    """
    sysctls: Optional[pulumi.Input[List[pulumi.Input['SysctlArgs']]]] = pulumi.input_property("sysctls")
    """
    Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
    """
    windows_options: Optional[pulumi.Input['WindowsSecurityContextOptionsArgs']] = pulumi.input_property("windowsOptions")
    """
    The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, fs_group: Optional[pulumi.Input[float]] = None, fs_group_change_policy: Optional[pulumi.Input[str]] = None, run_as_group: Optional[pulumi.Input[float]] = None, run_as_non_root: Optional[pulumi.Input[bool]] = None, run_as_user: Optional[pulumi.Input[float]] = None, se_linux_options: Optional[pulumi.Input['SELinuxOptionsArgs']] = None, supplemental_groups: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None, sysctls: Optional[pulumi.Input[List[pulumi.Input['SysctlArgs']]]] = None, windows_options: Optional[pulumi.Input['WindowsSecurityContextOptionsArgs']] = None) -> None:
        """
        PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
        :param pulumi.Input[float] fs_group: A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
               
               1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
               
               If unset, the Kubelet will not modify the ownership and permissions of any volume.
        :param pulumi.Input[str] fs_group_change_policy: fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".
        :param pulumi.Input[float] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[float] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input['SELinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        :param pulumi.Input[List[pulumi.Input[float]]] supplemental_groups: A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
        :param pulumi.Input[List[pulumi.Input['SysctlArgs']]] sysctls: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
        :param pulumi.Input['WindowsSecurityContextOptionsArgs'] windows_options: The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        __self__.fs_group = fs_group
        __self__.fs_group_change_policy = fs_group_change_policy
        __self__.run_as_group = run_as_group
        __self__.run_as_non_root = run_as_non_root
        __self__.run_as_user = run_as_user
        __self__.se_linux_options = se_linux_options
        __self__.supplemental_groups = supplemental_groups
        __self__.sysctls = sysctls
        __self__.windows_options = windows_options

@pulumi.input_type
class PodSpecArgs:
    containers: pulumi.Input[List[pulumi.Input['ContainerArgs']]] = pulumi.input_property("containers")
    """
    List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
    """
    active_deadline_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("activeDeadlineSeconds")
    """
    Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    """
    affinity: Optional[pulumi.Input['AffinityArgs']] = pulumi.input_property("affinity")
    """
    If specified, the pod's scheduling constraints
    """
    automount_service_account_token: Optional[pulumi.Input[bool]] = pulumi.input_property("automountServiceAccountToken")
    """
    AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    """
    dns_config: Optional[pulumi.Input['PodDNSConfigArgs']] = pulumi.input_property("dnsConfig")
    """
    Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
    """
    dns_policy: Optional[pulumi.Input[str]] = pulumi.input_property("dnsPolicy")
    """
    Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
    """
    enable_service_links: Optional[pulumi.Input[bool]] = pulumi.input_property("enableServiceLinks")
    """
    EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
    """
    ephemeral_containers: Optional[pulumi.Input[List[pulumi.Input['EphemeralContainerArgs']]]] = pulumi.input_property("ephemeralContainers")
    """
    List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
    """
    host_aliases: Optional[pulumi.Input[List[pulumi.Input['HostAliasArgs']]]] = pulumi.input_property("hostAliases")
    """
    HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
    """
    host_ipc: Optional[pulumi.Input[bool]] = pulumi.input_property("hostIPC")
    """
    Use the host's ipc namespace. Optional: Default to false.
    """
    host_network: Optional[pulumi.Input[bool]] = pulumi.input_property("hostNetwork")
    """
    Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
    """
    host_pid: Optional[pulumi.Input[bool]] = pulumi.input_property("hostPID")
    """
    Use the host's pid namespace. Optional: Default to false.
    """
    hostname: Optional[pulumi.Input[str]] = pulumi.input_property("hostname")
    """
    Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    """
    image_pull_secrets: Optional[pulumi.Input[List[pulumi.Input['LocalObjectReferenceArgs']]]] = pulumi.input_property("imagePullSecrets")
    """
    ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
    """
    init_containers: Optional[pulumi.Input[List[pulumi.Input['ContainerArgs']]]] = pulumi.input_property("initContainers")
    """
    List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    """
    node_name: Optional[pulumi.Input[str]] = pulumi.input_property("nodeName")
    """
    NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    """
    node_selector: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("nodeSelector")
    """
    NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    """
    overhead: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("overhead")
    """
    Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
    """
    preemption_policy: Optional[pulumi.Input[str]] = pulumi.input_property("preemptionPolicy")
    """
    PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.
    """
    priority: Optional[pulumi.Input[float]] = pulumi.input_property("priority")
    """
    The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
    """
    priority_class_name: Optional[pulumi.Input[str]] = pulumi.input_property("priorityClassName")
    """
    If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
    """
    readiness_gates: Optional[pulumi.Input[List[pulumi.Input['PodReadinessGateArgs']]]] = pulumi.input_property("readinessGates")
    """
    If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
    """
    restart_policy: Optional[pulumi.Input[str]] = pulumi.input_property("restartPolicy")
    """
    Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
    """
    runtime_class_name: Optional[pulumi.Input[str]] = pulumi.input_property("runtimeClassName")
    """
    RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
    """
    scheduler_name: Optional[pulumi.Input[str]] = pulumi.input_property("schedulerName")
    """
    If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    """
    security_context: Optional[pulumi.Input['PodSecurityContextArgs']] = pulumi.input_property("securityContext")
    """
    SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
    """
    service_account: Optional[pulumi.Input[str]] = pulumi.input_property("serviceAccount")
    """
    DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
    """
    service_account_name: Optional[pulumi.Input[str]] = pulumi.input_property("serviceAccountName")
    """
    ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    """
    share_process_namespace: Optional[pulumi.Input[bool]] = pulumi.input_property("shareProcessNamespace")
    """
    Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
    """
    subdomain: Optional[pulumi.Input[str]] = pulumi.input_property("subdomain")
    """
    If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
    """
    termination_grace_period_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("terminationGracePeriodSeconds")
    """
    Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
    """
    tolerations: Optional[pulumi.Input[List[pulumi.Input['TolerationArgs']]]] = pulumi.input_property("tolerations")
    """
    If specified, the pod's tolerations.
    """
    topology_spread_constraints: Optional[pulumi.Input[List[pulumi.Input['TopologySpreadConstraintArgs']]]] = pulumi.input_property("topologySpreadConstraints")
    """
    TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed.
    """
    volumes: Optional[pulumi.Input[List[pulumi.Input['VolumeArgs']]]] = pulumi.input_property("volumes")
    """
    List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, containers: pulumi.Input[List[pulumi.Input['ContainerArgs']]], active_deadline_seconds: Optional[pulumi.Input[float]] = None, affinity: Optional[pulumi.Input['AffinityArgs']] = None, automount_service_account_token: Optional[pulumi.Input[bool]] = None, dns_config: Optional[pulumi.Input['PodDNSConfigArgs']] = None, dns_policy: Optional[pulumi.Input[str]] = None, enable_service_links: Optional[pulumi.Input[bool]] = None, ephemeral_containers: Optional[pulumi.Input[List[pulumi.Input['EphemeralContainerArgs']]]] = None, host_aliases: Optional[pulumi.Input[List[pulumi.Input['HostAliasArgs']]]] = None, host_ipc: Optional[pulumi.Input[bool]] = None, host_network: Optional[pulumi.Input[bool]] = None, host_pid: Optional[pulumi.Input[bool]] = None, hostname: Optional[pulumi.Input[str]] = None, image_pull_secrets: Optional[pulumi.Input[List[pulumi.Input['LocalObjectReferenceArgs']]]] = None, init_containers: Optional[pulumi.Input[List[pulumi.Input['ContainerArgs']]]] = None, node_name: Optional[pulumi.Input[str]] = None, node_selector: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, overhead: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, preemption_policy: Optional[pulumi.Input[str]] = None, priority: Optional[pulumi.Input[float]] = None, priority_class_name: Optional[pulumi.Input[str]] = None, readiness_gates: Optional[pulumi.Input[List[pulumi.Input['PodReadinessGateArgs']]]] = None, restart_policy: Optional[pulumi.Input[str]] = None, runtime_class_name: Optional[pulumi.Input[str]] = None, scheduler_name: Optional[pulumi.Input[str]] = None, security_context: Optional[pulumi.Input['PodSecurityContextArgs']] = None, service_account: Optional[pulumi.Input[str]] = None, service_account_name: Optional[pulumi.Input[str]] = None, share_process_namespace: Optional[pulumi.Input[bool]] = None, subdomain: Optional[pulumi.Input[str]] = None, termination_grace_period_seconds: Optional[pulumi.Input[float]] = None, tolerations: Optional[pulumi.Input[List[pulumi.Input['TolerationArgs']]]] = None, topology_spread_constraints: Optional[pulumi.Input[List[pulumi.Input['TopologySpreadConstraintArgs']]]] = None, volumes: Optional[pulumi.Input[List[pulumi.Input['VolumeArgs']]]] = None) -> None:
        """
        PodSpec is a description of a pod.
        :param pulumi.Input[List[pulumi.Input['ContainerArgs']]] containers: List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
        :param pulumi.Input[float] active_deadline_seconds: Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
        :param pulumi.Input['AffinityArgs'] affinity: If specified, the pod's scheduling constraints
        :param pulumi.Input[bool] automount_service_account_token: AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
        :param pulumi.Input['PodDNSConfigArgs'] dns_config: Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        :param pulumi.Input[str] dns_policy: Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
        :param pulumi.Input[bool] enable_service_links: EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
        :param pulumi.Input[List[pulumi.Input['EphemeralContainerArgs']]] ephemeral_containers: List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
        :param pulumi.Input[List[pulumi.Input['HostAliasArgs']]] host_aliases: HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
        :param pulumi.Input[bool] host_ipc: Use the host's ipc namespace. Optional: Default to false.
        :param pulumi.Input[bool] host_network: Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
        :param pulumi.Input[bool] host_pid: Use the host's pid namespace. Optional: Default to false.
        :param pulumi.Input[str] hostname: Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
        :param pulumi.Input[List[pulumi.Input['LocalObjectReferenceArgs']]] image_pull_secrets: ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
        :param pulumi.Input[List[pulumi.Input['ContainerArgs']]] init_containers: List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        :param pulumi.Input[str] node_name: NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] overhead: Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
        :param pulumi.Input[str] preemption_policy: PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.
        :param pulumi.Input[float] priority: The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
        :param pulumi.Input[str] priority_class_name: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        :param pulumi.Input[List[pulumi.Input['PodReadinessGateArgs']]] readiness_gates: If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
        :param pulumi.Input[str] restart_policy: Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
        :param pulumi.Input[str] runtime_class_name: RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
        :param pulumi.Input[str] scheduler_name: If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
        :param pulumi.Input['PodSecurityContextArgs'] security_context: SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
        :param pulumi.Input[str] service_account: DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
        :param pulumi.Input[str] service_account_name: ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
        :param pulumi.Input[bool] share_process_namespace: Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
        :param pulumi.Input[str] subdomain: If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
        :param pulumi.Input[float] termination_grace_period_seconds: Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
        :param pulumi.Input[List[pulumi.Input['TolerationArgs']]] tolerations: If specified, the pod's tolerations.
        :param pulumi.Input[List[pulumi.Input['TopologySpreadConstraintArgs']]] topology_spread_constraints: TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed.
        :param pulumi.Input[List[pulumi.Input['VolumeArgs']]] volumes: List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        """
        __self__.containers = containers
        __self__.active_deadline_seconds = active_deadline_seconds
        __self__.affinity = affinity
        __self__.automount_service_account_token = automount_service_account_token
        __self__.dns_config = dns_config
        __self__.dns_policy = dns_policy
        __self__.enable_service_links = enable_service_links
        __self__.ephemeral_containers = ephemeral_containers
        __self__.host_aliases = host_aliases
        __self__.host_ipc = host_ipc
        __self__.host_network = host_network
        __self__.host_pid = host_pid
        __self__.hostname = hostname
        __self__.image_pull_secrets = image_pull_secrets
        __self__.init_containers = init_containers
        __self__.node_name = node_name
        __self__.node_selector = node_selector
        __self__.overhead = overhead
        __self__.preemption_policy = preemption_policy
        __self__.priority = priority
        __self__.priority_class_name = priority_class_name
        __self__.readiness_gates = readiness_gates
        __self__.restart_policy = restart_policy
        __self__.runtime_class_name = runtime_class_name
        __self__.scheduler_name = scheduler_name
        __self__.security_context = security_context
        __self__.service_account = service_account
        __self__.service_account_name = service_account_name
        __self__.share_process_namespace = share_process_namespace
        __self__.subdomain = subdomain
        __self__.termination_grace_period_seconds = termination_grace_period_seconds
        __self__.tolerations = tolerations
        __self__.topology_spread_constraints = topology_spread_constraints
        __self__.volumes = volumes

@pulumi.input_type
class PodStatusArgs:
    conditions: Optional[pulumi.Input[List[pulumi.Input['PodConditionArgs']]]] = pulumi.input_property("conditions")
    """
    Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
    """
    container_statuses: Optional[pulumi.Input[List[pulumi.Input['ContainerStatusArgs']]]] = pulumi.input_property("containerStatuses")
    """
    The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    """
    ephemeral_container_statuses: Optional[pulumi.Input[List[pulumi.Input['ContainerStatusArgs']]]] = pulumi.input_property("ephemeralContainerStatuses")
    """
    Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
    """
    host_ip: Optional[pulumi.Input[str]] = pulumi.input_property("hostIP")
    """
    IP address of the host to which the pod is assigned. Empty if not yet scheduled.
    """
    init_container_statuses: Optional[pulumi.Input[List[pulumi.Input['ContainerStatusArgs']]]] = pulumi.input_property("initContainerStatuses")
    """
    The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    A human readable message indicating details about why the pod is in this condition.
    """
    nominated_node_name: Optional[pulumi.Input[str]] = pulumi.input_property("nominatedNodeName")
    """
    nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
    """
    phase: Optional[pulumi.Input[str]] = pulumi.input_property("phase")
    """
    The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:

    Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.

    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
    """
    pod_ip: Optional[pulumi.Input[str]] = pulumi.input_property("podIP")
    """
    IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
    """
    pod_i_ps: Optional[pulumi.Input[List[pulumi.Input['PodIPArgs']]]] = pulumi.input_property("podIPs")
    """
    podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
    """
    qos_class: Optional[pulumi.Input[str]] = pulumi.input_property("qosClass")
    """
    The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
    """
    start_time: Optional[pulumi.Input[str]] = pulumi.input_property("startTime")
    """
    RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, conditions: Optional[pulumi.Input[List[pulumi.Input['PodConditionArgs']]]] = None, container_statuses: Optional[pulumi.Input[List[pulumi.Input['ContainerStatusArgs']]]] = None, ephemeral_container_statuses: Optional[pulumi.Input[List[pulumi.Input['ContainerStatusArgs']]]] = None, host_ip: Optional[pulumi.Input[str]] = None, init_container_statuses: Optional[pulumi.Input[List[pulumi.Input['ContainerStatusArgs']]]] = None, message: Optional[pulumi.Input[str]] = None, nominated_node_name: Optional[pulumi.Input[str]] = None, phase: Optional[pulumi.Input[str]] = None, pod_ip: Optional[pulumi.Input[str]] = None, pod_i_ps: Optional[pulumi.Input[List[pulumi.Input['PodIPArgs']]]] = None, qos_class: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None, start_time: Optional[pulumi.Input[str]] = None) -> None:
        """
        PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
        :param pulumi.Input[List[pulumi.Input['PodConditionArgs']]] conditions: Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        :param pulumi.Input[List[pulumi.Input['ContainerStatusArgs']]] container_statuses: The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        :param pulumi.Input[List[pulumi.Input['ContainerStatusArgs']]] ephemeral_container_statuses: Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
        :param pulumi.Input[str] host_ip: IP address of the host to which the pod is assigned. Empty if not yet scheduled.
        :param pulumi.Input[List[pulumi.Input['ContainerStatusArgs']]] init_container_statuses: The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        :param pulumi.Input[str] message: A human readable message indicating details about why the pod is in this condition.
        :param pulumi.Input[str] nominated_node_name: nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
        :param pulumi.Input[str] phase: The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
               
               Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
               
               More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
        :param pulumi.Input[str] pod_ip: IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
        :param pulumi.Input[List[pulumi.Input['PodIPArgs']]] pod_i_ps: podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
        :param pulumi.Input[str] qos_class: The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
        :param pulumi.Input[str] reason: A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
        :param pulumi.Input[str] start_time: RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
        """
        __self__.conditions = conditions
        __self__.container_statuses = container_statuses
        __self__.ephemeral_container_statuses = ephemeral_container_statuses
        __self__.host_ip = host_ip
        __self__.init_container_statuses = init_container_statuses
        __self__.message = message
        __self__.nominated_node_name = nominated_node_name
        __self__.phase = phase
        __self__.pod_ip = pod_ip
        __self__.pod_i_ps = pod_i_ps
        __self__.qos_class = qos_class
        __self__.reason = reason
        __self__.start_time = start_time

@pulumi.input_type
class PodTemplateArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    template: Optional[pulumi.Input['PodTemplateSpecArgs']] = pulumi.input_property("template")
    """
    Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, template: Optional[pulumi.Input['PodTemplateSpecArgs']] = None) -> None:
        """
        PodTemplate describes a template for creating copies of a predefined pod.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['PodTemplateSpecArgs'] template: Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'v1'
        __self__.kind = 'PodTemplate'
        __self__.metadata = metadata
        __self__.template = template

@pulumi.input_type
class PodTemplateSpecArgs:
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['PodSpecArgs']] = pulumi.input_property("spec")
    """
    Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['PodSpecArgs']] = None) -> None:
        """
        PodTemplateSpec describes the data a pod should have when created from a template
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['PodSpecArgs'] spec: Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.metadata = metadata
        __self__.spec = spec

@pulumi.input_type
class PortworxVolumeSourceArgs:
    volume_id: pulumi.Input[str] = pulumi.input_property("volumeID")
    """
    VolumeID uniquely identifies a Portworx volume
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, volume_id: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        PortworxVolumeSource represents a Portworx volume resource.
        :param pulumi.Input[str] volume_id: VolumeID uniquely identifies a Portworx volume
        :param pulumi.Input[str] fs_type: FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        __self__.volume_id = volume_id
        __self__.fs_type = fs_type
        __self__.read_only = read_only

@pulumi.input_type
class PreferredSchedulingTermArgs:
    preference: pulumi.Input['NodeSelectorTermArgs'] = pulumi.input_property("preference")
    """
    A node selector term, associated with the corresponding weight.
    """
    weight: pulumi.Input[float] = pulumi.input_property("weight")
    """
    Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, preference: pulumi.Input['NodeSelectorTermArgs'], weight: pulumi.Input[float]) -> None:
        """
        An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input['NodeSelectorTermArgs'] preference: A node selector term, associated with the corresponding weight.
        :param pulumi.Input[float] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        __self__.preference = preference
        __self__.weight = weight

@pulumi.input_type
class ProbeArgs:
    exec_: Optional[pulumi.Input['ExecActionArgs']] = pulumi.input_property("exec")
    """
    One and only one of the following should be specified. Exec specifies the action to take.
    """
    failure_threshold: Optional[pulumi.Input[float]] = pulumi.input_property("failureThreshold")
    """
    Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    """
    http_get: Optional[pulumi.Input['HTTPGetActionArgs']] = pulumi.input_property("httpGet")
    """
    HTTPGet specifies the http request to perform.
    """
    initial_delay_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("initialDelaySeconds")
    """
    Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    period_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("periodSeconds")
    """
    How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    """
    success_threshold: Optional[pulumi.Input[float]] = pulumi.input_property("successThreshold")
    """
    Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    """
    tcp_socket: Optional[pulumi.Input['TCPSocketActionArgs']] = pulumi.input_property("tcpSocket")
    """
    TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
    """
    timeout_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("timeoutSeconds")
    """
    Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, exec_: Optional[pulumi.Input['ExecActionArgs']] = None, failure_threshold: Optional[pulumi.Input[float]] = None, http_get: Optional[pulumi.Input['HTTPGetActionArgs']] = None, initial_delay_seconds: Optional[pulumi.Input[float]] = None, period_seconds: Optional[pulumi.Input[float]] = None, success_threshold: Optional[pulumi.Input[float]] = None, tcp_socket: Optional[pulumi.Input['TCPSocketActionArgs']] = None, timeout_seconds: Optional[pulumi.Input[float]] = None) -> None:
        """
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
        :param pulumi.Input['ExecActionArgs'] exec_: One and only one of the following should be specified. Exec specifies the action to take.
        :param pulumi.Input[float] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input['HTTPGetActionArgs'] http_get: HTTPGet specifies the http request to perform.
        :param pulumi.Input[float] initial_delay_seconds: Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        :param pulumi.Input[float] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[float] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
        :param pulumi.Input['TCPSocketActionArgs'] tcp_socket: TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        :param pulumi.Input[float] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        """
        __self__.exec_ = exec_
        __self__.failure_threshold = failure_threshold
        __self__.http_get = http_get
        __self__.initial_delay_seconds = initial_delay_seconds
        __self__.period_seconds = period_seconds
        __self__.success_threshold = success_threshold
        __self__.tcp_socket = tcp_socket
        __self__.timeout_seconds = timeout_seconds

@pulumi.input_type
class ProjectedVolumeSourceArgs:
    sources: pulumi.Input[List[pulumi.Input['VolumeProjectionArgs']]] = pulumi.input_property("sources")
    """
    list of volume projections
    """
    default_mode: Optional[pulumi.Input[float]] = pulumi.input_property("defaultMode")
    """
    Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, sources: pulumi.Input[List[pulumi.Input['VolumeProjectionArgs']]], default_mode: Optional[pulumi.Input[float]] = None) -> None:
        """
        Represents a projected volume source
        :param pulumi.Input[List[pulumi.Input['VolumeProjectionArgs']]] sources: list of volume projections
        :param pulumi.Input[float] default_mode: Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        __self__.sources = sources
        __self__.default_mode = default_mode

@pulumi.input_type
class QuobyteVolumeSourceArgs:
    registry: pulumi.Input[str] = pulumi.input_property("registry")
    """
    Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
    """
    volume: pulumi.Input[str] = pulumi.input_property("volume")
    """
    Volume is a string that references an already created Quobyte volume by name.
    """
    group: Optional[pulumi.Input[str]] = pulumi.input_property("group")
    """
    Group to map volume access to Default is no group
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
    """
    tenant: Optional[pulumi.Input[str]] = pulumi.input_property("tenant")
    """
    Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
    """
    user: Optional[pulumi.Input[str]] = pulumi.input_property("user")
    """
    User to map volume access to Defaults to serivceaccount user
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, registry: pulumi.Input[str], volume: pulumi.Input[str], group: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, tenant: Optional[pulumi.Input[str]] = None, user: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
        :param pulumi.Input[str] registry: Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        :param pulumi.Input[str] volume: Volume is a string that references an already created Quobyte volume by name.
        :param pulumi.Input[str] group: Group to map volume access to Default is no group
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        :param pulumi.Input[str] tenant: Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        :param pulumi.Input[str] user: User to map volume access to Defaults to serivceaccount user
        """
        __self__.registry = registry
        __self__.volume = volume
        __self__.group = group
        __self__.read_only = read_only
        __self__.tenant = tenant
        __self__.user = user

@pulumi.input_type
class RBDPersistentVolumeSourceArgs:
    image: pulumi.Input[str] = pulumi.input_property("image")
    """
    The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    monitors: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("monitors")
    """
    A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    """
    keyring: Optional[pulumi.Input[str]] = pulumi.input_property("keyring")
    """
    Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    pool: Optional[pulumi.Input[str]] = pulumi.input_property("pool")
    """
    The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = pulumi.input_property("secretRef")
    """
    SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    user: Optional[pulumi.Input[str]] = pulumi.input_property("user")
    """
    The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, image: pulumi.Input[str], monitors: pulumi.Input[List[pulumi.Input[str]]], fs_type: Optional[pulumi.Input[str]] = None, keyring: Optional[pulumi.Input[str]] = None, pool: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['SecretReferenceArgs']] = None, user: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[str] image: The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[List[pulumi.Input[str]]] monitors: A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
        :param pulumi.Input[str] keyring: Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] pool: The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input['SecretReferenceArgs'] secret_ref: SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] user: The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        __self__.image = image
        __self__.monitors = monitors
        __self__.fs_type = fs_type
        __self__.keyring = keyring
        __self__.pool = pool
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref
        __self__.user = user

@pulumi.input_type
class RBDVolumeSourceArgs:
    image: pulumi.Input[str] = pulumi.input_property("image")
    """
    The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    monitors: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("monitors")
    """
    A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    """
    keyring: Optional[pulumi.Input[str]] = pulumi.input_property("keyring")
    """
    Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    pool: Optional[pulumi.Input[str]] = pulumi.input_property("pool")
    """
    The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = pulumi.input_property("secretRef")
    """
    SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    user: Optional[pulumi.Input[str]] = pulumi.input_property("user")
    """
    The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, image: pulumi.Input[str], monitors: pulumi.Input[List[pulumi.Input[str]]], fs_type: Optional[pulumi.Input[str]] = None, keyring: Optional[pulumi.Input[str]] = None, pool: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = None, user: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[str] image: The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[List[pulumi.Input[str]]] monitors: A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
        :param pulumi.Input[str] keyring: Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] pool: The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input['LocalObjectReferenceArgs'] secret_ref: SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] user: The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        __self__.image = image
        __self__.monitors = monitors
        __self__.fs_type = fs_type
        __self__.keyring = keyring
        __self__.pool = pool
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref
        __self__.user = user

@pulumi.input_type
class ReplicationControllerArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['ReplicationControllerSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """
    status: Optional[pulumi.Input['ReplicationControllerStatusArgs']] = pulumi.input_property("status")
    """
    Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['ReplicationControllerSpecArgs']] = None, status: Optional[pulumi.Input['ReplicationControllerStatusArgs']] = None) -> None:
        """
        ReplicationController represents the configuration of a replication controller.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['ReplicationControllerSpecArgs'] spec: Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['ReplicationControllerStatusArgs'] status: Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'v1'
        __self__.kind = 'ReplicationController'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class ReplicationControllerConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    """
    Status of the condition, one of True, False, Unknown.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type of replication controller condition.
    """
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    The last time the condition transitioned from one status to another.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    A human readable message indicating details about the transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    The reason for the condition's last transition.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        ReplicationControllerCondition describes the state of a replication controller at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of replication controller condition.
        :param pulumi.Input[str] last_transition_time: The last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        __self__.status = status
        __self__.type = type
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class ReplicationControllerSpecArgs:
    min_ready_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("minReadySeconds")
    """
    Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    """
    replicas: Optional[pulumi.Input[float]] = pulumi.input_property("replicas")
    """
    Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
    """
    selector: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("selector")
    """
    Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    """
    template: Optional[pulumi.Input['PodTemplateSpecArgs']] = pulumi.input_property("template")
    """
    Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, min_ready_seconds: Optional[pulumi.Input[float]] = None, replicas: Optional[pulumi.Input[float]] = None, selector: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, template: Optional[pulumi.Input['PodTemplateSpecArgs']] = None) -> None:
        """
        ReplicationControllerSpec is the specification of a replication controller.
        :param pulumi.Input[float] min_ready_seconds: Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
        :param pulumi.Input[float] replicas: Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] selector: Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        :param pulumi.Input['PodTemplateSpecArgs'] template: Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
        """
        __self__.min_ready_seconds = min_ready_seconds
        __self__.replicas = replicas
        __self__.selector = selector
        __self__.template = template

@pulumi.input_type
class ReplicationControllerStatusArgs:
    replicas: pulumi.Input[float] = pulumi.input_property("replicas")
    """
    Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
    """
    available_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("availableReplicas")
    """
    The number of available replicas (ready for at least minReadySeconds) for this replication controller.
    """
    conditions: Optional[pulumi.Input[List[pulumi.Input['ReplicationControllerConditionArgs']]]] = pulumi.input_property("conditions")
    """
    Represents the latest available observations of a replication controller's current state.
    """
    fully_labeled_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("fullyLabeledReplicas")
    """
    The number of pods that have labels matching the labels of the pod template of the replication controller.
    """
    observed_generation: Optional[pulumi.Input[float]] = pulumi.input_property("observedGeneration")
    """
    ObservedGeneration reflects the generation of the most recently observed replication controller.
    """
    ready_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("readyReplicas")
    """
    The number of ready replicas for this replication controller.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, replicas: pulumi.Input[float], available_replicas: Optional[pulumi.Input[float]] = None, conditions: Optional[pulumi.Input[List[pulumi.Input['ReplicationControllerConditionArgs']]]] = None, fully_labeled_replicas: Optional[pulumi.Input[float]] = None, observed_generation: Optional[pulumi.Input[float]] = None, ready_replicas: Optional[pulumi.Input[float]] = None) -> None:
        """
        ReplicationControllerStatus represents the current status of a replication controller.
        :param pulumi.Input[float] replicas: Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
        :param pulumi.Input[float] available_replicas: The number of available replicas (ready for at least minReadySeconds) for this replication controller.
        :param pulumi.Input[List[pulumi.Input['ReplicationControllerConditionArgs']]] conditions: Represents the latest available observations of a replication controller's current state.
        :param pulumi.Input[float] fully_labeled_replicas: The number of pods that have labels matching the labels of the pod template of the replication controller.
        :param pulumi.Input[float] observed_generation: ObservedGeneration reflects the generation of the most recently observed replication controller.
        :param pulumi.Input[float] ready_replicas: The number of ready replicas for this replication controller.
        """
        __self__.replicas = replicas
        __self__.available_replicas = available_replicas
        __self__.conditions = conditions
        __self__.fully_labeled_replicas = fully_labeled_replicas
        __self__.observed_generation = observed_generation
        __self__.ready_replicas = ready_replicas

@pulumi.input_type
class ResourceFieldSelectorArgs:
    resource: pulumi.Input[str] = pulumi.input_property("resource")
    """
    Required: resource to select
    """
    container_name: Optional[pulumi.Input[str]] = pulumi.input_property("containerName")
    """
    Container name: required for volumes, optional for env vars
    """
    divisor: Optional[pulumi.Input[str]] = pulumi.input_property("divisor")
    """
    Specifies the output format of the exposed resources, defaults to "1"
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, resource: pulumi.Input[str], container_name: Optional[pulumi.Input[str]] = None, divisor: Optional[pulumi.Input[str]] = None) -> None:
        """
        ResourceFieldSelector represents container resources (cpu, memory) and their output format
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input[str] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        __self__.resource = resource
        __self__.container_name = container_name
        __self__.divisor = divisor

@pulumi.input_type
class ResourceQuotaArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['ResourceQuotaSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """
    status: Optional[pulumi.Input['ResourceQuotaStatusArgs']] = pulumi.input_property("status")
    """
    Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['ResourceQuotaSpecArgs']] = None, status: Optional[pulumi.Input['ResourceQuotaStatusArgs']] = None) -> None:
        """
        ResourceQuota sets aggregate quota restrictions enforced per namespace
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['ResourceQuotaSpecArgs'] spec: Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['ResourceQuotaStatusArgs'] status: Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'v1'
        __self__.kind = 'ResourceQuota'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class ResourceQuotaSpecArgs:
    hard: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("hard")
    """
    hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    """
    scope_selector: Optional[pulumi.Input['ScopeSelectorArgs']] = pulumi.input_property("scopeSelector")
    """
    scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
    """
    scopes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("scopes")
    """
    A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hard: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, scope_selector: Optional[pulumi.Input['ScopeSelectorArgs']] = None, scopes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] hard: hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
        :param pulumi.Input['ScopeSelectorArgs'] scope_selector: scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
        :param pulumi.Input[List[pulumi.Input[str]]] scopes: A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
        """
        __self__.hard = hard
        __self__.scope_selector = scope_selector
        __self__.scopes = scopes

@pulumi.input_type
class ResourceQuotaStatusArgs:
    hard: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("hard")
    """
    Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
    """
    used: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("used")
    """
    Used is the current observed total usage of the resource in the namespace.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, hard: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, used: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        ResourceQuotaStatus defines the enforced hard limits and observed use.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] hard: Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] used: Used is the current observed total usage of the resource in the namespace.
        """
        __self__.hard = hard
        __self__.used = used

@pulumi.input_type
class ResourceRequirementsArgs:
    limits: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("limits")
    """
    Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    """
    requests: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("requests")
    """
    Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, limits: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, requests: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None) -> None:
        """
        ResourceRequirements describes the compute resource requirements.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        __self__.limits = limits
        __self__.requests = requests

@pulumi.input_type
class SELinuxOptionsArgs:
    level: Optional[pulumi.Input[str]] = pulumi.input_property("level")
    """
    Level is SELinux level label that applies to the container.
    """
    role: Optional[pulumi.Input[str]] = pulumi.input_property("role")
    """
    Role is a SELinux role label that applies to the container.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    Type is a SELinux type label that applies to the container.
    """
    user: Optional[pulumi.Input[str]] = pulumi.input_property("user")
    """
    User is a SELinux user label that applies to the container.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, level: Optional[pulumi.Input[str]] = None, role: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None, user: Optional[pulumi.Input[str]] = None) -> None:
        """
        SELinuxOptions are the labels to be applied to the container
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        __self__.level = level
        __self__.role = role
        __self__.type = type
        __self__.user = user

@pulumi.input_type
class ScaleIOPersistentVolumeSourceArgs:
    gateway: pulumi.Input[str] = pulumi.input_property("gateway")
    """
    The host address of the ScaleIO API Gateway.
    """
    secret_ref: pulumi.Input['SecretReferenceArgs'] = pulumi.input_property("secretRef")
    """
    SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    """
    system: pulumi.Input[str] = pulumi.input_property("system")
    """
    The name of the storage system as configured in ScaleIO.
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
    """
    protection_domain: Optional[pulumi.Input[str]] = pulumi.input_property("protectionDomain")
    """
    The name of the ScaleIO Protection Domain for the configured storage.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """
    ssl_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("sslEnabled")
    """
    Flag to enable/disable SSL communication with Gateway, default false
    """
    storage_mode: Optional[pulumi.Input[str]] = pulumi.input_property("storageMode")
    """
    Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
    """
    storage_pool: Optional[pulumi.Input[str]] = pulumi.input_property("storagePool")
    """
    The ScaleIO Storage Pool associated with the protection domain.
    """
    volume_name: Optional[pulumi.Input[str]] = pulumi.input_property("volumeName")
    """
    The name of a volume already created in the ScaleIO system that is associated with this volume source.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, gateway: pulumi.Input[str], secret_ref: pulumi.Input['SecretReferenceArgs'], system: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, protection_domain: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, ssl_enabled: Optional[pulumi.Input[bool]] = None, storage_mode: Optional[pulumi.Input[str]] = None, storage_pool: Optional[pulumi.Input[str]] = None, volume_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
        :param pulumi.Input[str] gateway: The host address of the ScaleIO API Gateway.
        :param pulumi.Input['SecretReferenceArgs'] secret_ref: SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] system: The name of the storage system as configured in ScaleIO.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
        :param pulumi.Input[str] protection_domain: The name of the ScaleIO Protection Domain for the configured storage.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[bool] ssl_enabled: Flag to enable/disable SSL communication with Gateway, default false
        :param pulumi.Input[str] storage_mode: Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        :param pulumi.Input[str] storage_pool: The ScaleIO Storage Pool associated with the protection domain.
        :param pulumi.Input[str] volume_name: The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        __self__.gateway = gateway
        __self__.secret_ref = secret_ref
        __self__.system = system
        __self__.fs_type = fs_type
        __self__.protection_domain = protection_domain
        __self__.read_only = read_only
        __self__.ssl_enabled = ssl_enabled
        __self__.storage_mode = storage_mode
        __self__.storage_pool = storage_pool
        __self__.volume_name = volume_name

@pulumi.input_type
class ScaleIOVolumeSourceArgs:
    gateway: pulumi.Input[str] = pulumi.input_property("gateway")
    """
    The host address of the ScaleIO API Gateway.
    """
    secret_ref: pulumi.Input['LocalObjectReferenceArgs'] = pulumi.input_property("secretRef")
    """
    SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
    """
    system: pulumi.Input[str] = pulumi.input_property("system")
    """
    The name of the storage system as configured in ScaleIO.
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
    """
    protection_domain: Optional[pulumi.Input[str]] = pulumi.input_property("protectionDomain")
    """
    The name of the ScaleIO Protection Domain for the configured storage.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """
    ssl_enabled: Optional[pulumi.Input[bool]] = pulumi.input_property("sslEnabled")
    """
    Flag to enable/disable SSL communication with Gateway, default false
    """
    storage_mode: Optional[pulumi.Input[str]] = pulumi.input_property("storageMode")
    """
    Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
    """
    storage_pool: Optional[pulumi.Input[str]] = pulumi.input_property("storagePool")
    """
    The ScaleIO Storage Pool associated with the protection domain.
    """
    volume_name: Optional[pulumi.Input[str]] = pulumi.input_property("volumeName")
    """
    The name of a volume already created in the ScaleIO system that is associated with this volume source.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, gateway: pulumi.Input[str], secret_ref: pulumi.Input['LocalObjectReferenceArgs'], system: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, protection_domain: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, ssl_enabled: Optional[pulumi.Input[bool]] = None, storage_mode: Optional[pulumi.Input[str]] = None, storage_pool: Optional[pulumi.Input[str]] = None, volume_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        ScaleIOVolumeSource represents a persistent ScaleIO volume
        :param pulumi.Input[str] gateway: The host address of the ScaleIO API Gateway.
        :param pulumi.Input['LocalObjectReferenceArgs'] secret_ref: SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] system: The name of the storage system as configured in ScaleIO.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        :param pulumi.Input[str] protection_domain: The name of the ScaleIO Protection Domain for the configured storage.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[bool] ssl_enabled: Flag to enable/disable SSL communication with Gateway, default false
        :param pulumi.Input[str] storage_mode: Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        :param pulumi.Input[str] storage_pool: The ScaleIO Storage Pool associated with the protection domain.
        :param pulumi.Input[str] volume_name: The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        __self__.gateway = gateway
        __self__.secret_ref = secret_ref
        __self__.system = system
        __self__.fs_type = fs_type
        __self__.protection_domain = protection_domain
        __self__.read_only = read_only
        __self__.ssl_enabled = ssl_enabled
        __self__.storage_mode = storage_mode
        __self__.storage_pool = storage_pool
        __self__.volume_name = volume_name

@pulumi.input_type
class ScopeSelectorArgs:
    match_expressions: Optional[pulumi.Input[List[pulumi.Input['ScopedResourceSelectorRequirementArgs']]]] = pulumi.input_property("matchExpressions")
    """
    A list of scope selector requirements by scope of the resources.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, match_expressions: Optional[pulumi.Input[List[pulumi.Input['ScopedResourceSelectorRequirementArgs']]]] = None) -> None:
        """
        A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
        :param pulumi.Input[List[pulumi.Input['ScopedResourceSelectorRequirementArgs']]] match_expressions: A list of scope selector requirements by scope of the resources.
        """
        __self__.match_expressions = match_expressions

@pulumi.input_type
class ScopedResourceSelectorRequirementArgs:
    operator: pulumi.Input[str] = pulumi.input_property("operator")
    """
    Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
    """
    scope_name: pulumi.Input[str] = pulumi.input_property("scopeName")
    """
    The name of the scope that the selector applies to.
    """
    values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("values")
    """
    An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, operator: pulumi.Input[str], scope_name: pulumi.Input[str], values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
        :param pulumi.Input[str] operator: Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
        :param pulumi.Input[str] scope_name: The name of the scope that the selector applies to.
        :param pulumi.Input[List[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        __self__.operator = operator
        __self__.scope_name = scope_name
        __self__.values = values

@pulumi.input_type
class SecretArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    data: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("data")
    """
    Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
    """
    immutable: Optional[pulumi.Input[bool]] = pulumi.input_property("immutable")
    """
    Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate.
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    string_data: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("stringData")
    """
    stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    Used to facilitate programmatic handling of secret data.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, data: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, immutable: Optional[pulumi.Input[bool]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, string_data: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.

        Note: While Pulumi automatically encrypts the 'data' and 'stringData'
        fields, this encryption only applies to Pulumi's context, including the state file, 
        the Service, the CLI, etc. Kubernetes does not encrypt Secret resources by default,
        and the contents are visible to users with access to the Secret in Kubernetes using
        tools like 'kubectl'.

        For more information on securing Kubernetes Secrets, see the following links:
        https://kubernetes.io/docs/concepts/configuration/secret/#security-properties
        https://kubernetes.io/docs/concepts/configuration/secret/#risks
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] data: Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
        :param pulumi.Input[bool] immutable: Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate.
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] string_data: stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.
        :param pulumi.Input[str] type: Used to facilitate programmatic handling of secret data.
        """
        __self__.api_version = 'v1'
        __self__.data = data
        __self__.immutable = immutable
        __self__.kind = 'Secret'
        __self__.metadata = metadata
        __self__.string_data = string_data
        __self__.type = type

@pulumi.input_type
class SecretEnvSourceArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    optional: Optional[pulumi.Input[bool]] = pulumi.input_property("optional")
    """
    Specify whether the Secret must be defined
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None, optional: Optional[pulumi.Input[bool]] = None) -> None:
        """
        SecretEnvSource selects a Secret to populate the environment variables with.

        The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret must be defined
        """
        __self__.name = name
        __self__.optional = optional

@pulumi.input_type
class SecretKeySelectorArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    The key of the secret to select from.  Must be a valid secret key.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    optional: Optional[pulumi.Input[bool]] = pulumi.input_property("optional")
    """
    Specify whether the Secret or its key must be defined
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], name: Optional[pulumi.Input[str]] = None, optional: Optional[pulumi.Input[bool]] = None) -> None:
        """
        SecretKeySelector selects a key of a Secret.
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        __self__.key = key
        __self__.name = name
        __self__.optional = optional

@pulumi.input_type
class SecretProjectionArgs:
    items: Optional[pulumi.Input[List[pulumi.Input['KeyToPathArgs']]]] = pulumi.input_property("items")
    """
    If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    optional: Optional[pulumi.Input[bool]] = pulumi.input_property("optional")
    """
    Specify whether the Secret or its key must be defined
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, items: Optional[pulumi.Input[List[pulumi.Input['KeyToPathArgs']]]] = None, name: Optional[pulumi.Input[str]] = None, optional: Optional[pulumi.Input[bool]] = None) -> None:
        """
        Adapts a secret into a projected volume.

        The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
        :param pulumi.Input[List[pulumi.Input['KeyToPathArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        __self__.items = items
        __self__.name = name
        __self__.optional = optional

@pulumi.input_type
class SecretReferenceArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name is unique within a namespace to reference a secret resource.
    """
    namespace: Optional[pulumi.Input[str]] = pulumi.input_property("namespace")
    """
    Namespace defines the space within which the secret name must be unique.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None, namespace: Optional[pulumi.Input[str]] = None) -> None:
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param pulumi.Input[str] name: Name is unique within a namespace to reference a secret resource.
        :param pulumi.Input[str] namespace: Namespace defines the space within which the secret name must be unique.
        """
        __self__.name = name
        __self__.namespace = namespace

@pulumi.input_type
class SecretVolumeSourceArgs:
    default_mode: Optional[pulumi.Input[float]] = pulumi.input_property("defaultMode")
    """
    Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    """
    items: Optional[pulumi.Input[List[pulumi.Input['KeyToPathArgs']]]] = pulumi.input_property("items")
    """
    If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    """
    optional: Optional[pulumi.Input[bool]] = pulumi.input_property("optional")
    """
    Specify whether the Secret or its keys must be defined
    """
    secret_name: Optional[pulumi.Input[str]] = pulumi.input_property("secretName")
    """
    Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, default_mode: Optional[pulumi.Input[float]] = None, items: Optional[pulumi.Input[List[pulumi.Input['KeyToPathArgs']]]] = None, optional: Optional[pulumi.Input[bool]] = None, secret_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        Adapts a Secret into a volume.

        The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
        :param pulumi.Input[float] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[List[pulumi.Input['KeyToPathArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[bool] optional: Specify whether the Secret or its keys must be defined
        :param pulumi.Input[str] secret_name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        __self__.default_mode = default_mode
        __self__.items = items
        __self__.optional = optional
        __self__.secret_name = secret_name

@pulumi.input_type
class SecurityContextArgs:
    allow_privilege_escalation: Optional[pulumi.Input[bool]] = pulumi.input_property("allowPrivilegeEscalation")
    """
    AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
    """
    capabilities: Optional[pulumi.Input['CapabilitiesArgs']] = pulumi.input_property("capabilities")
    """
    The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
    """
    privileged: Optional[pulumi.Input[bool]] = pulumi.input_property("privileged")
    """
    Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
    """
    proc_mount: Optional[pulumi.Input[str]] = pulumi.input_property("procMount")
    """
    procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
    """
    read_only_root_filesystem: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnlyRootFilesystem")
    """
    Whether this container has a read-only root filesystem. Default is false.
    """
    run_as_group: Optional[pulumi.Input[float]] = pulumi.input_property("runAsGroup")
    """
    The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    run_as_non_root: Optional[pulumi.Input[bool]] = pulumi.input_property("runAsNonRoot")
    """
    Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    run_as_user: Optional[pulumi.Input[float]] = pulumi.input_property("runAsUser")
    """
    The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    se_linux_options: Optional[pulumi.Input['SELinuxOptionsArgs']] = pulumi.input_property("seLinuxOptions")
    """
    The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    windows_options: Optional[pulumi.Input['WindowsSecurityContextOptionsArgs']] = pulumi.input_property("windowsOptions")
    """
    The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allow_privilege_escalation: Optional[pulumi.Input[bool]] = None, capabilities: Optional[pulumi.Input['CapabilitiesArgs']] = None, privileged: Optional[pulumi.Input[bool]] = None, proc_mount: Optional[pulumi.Input[str]] = None, read_only_root_filesystem: Optional[pulumi.Input[bool]] = None, run_as_group: Optional[pulumi.Input[float]] = None, run_as_non_root: Optional[pulumi.Input[bool]] = None, run_as_user: Optional[pulumi.Input[float]] = None, se_linux_options: Optional[pulumi.Input['SELinuxOptionsArgs']] = None, windows_options: Optional[pulumi.Input['WindowsSecurityContextOptionsArgs']] = None) -> None:
        """
        SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        :param pulumi.Input['CapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        :param pulumi.Input[str] proc_mount: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false.
        :param pulumi.Input[float] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[float] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['SELinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['WindowsSecurityContextOptionsArgs'] windows_options: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        __self__.allow_privilege_escalation = allow_privilege_escalation
        __self__.capabilities = capabilities
        __self__.privileged = privileged
        __self__.proc_mount = proc_mount
        __self__.read_only_root_filesystem = read_only_root_filesystem
        __self__.run_as_group = run_as_group
        __self__.run_as_non_root = run_as_non_root
        __self__.run_as_user = run_as_user
        __self__.se_linux_options = se_linux_options
        __self__.windows_options = windows_options

@pulumi.input_type
class ServiceArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['ServiceSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """
    status: Optional[pulumi.Input['ServiceStatusArgs']] = pulumi.input_property("status")
    """
    Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['ServiceSpecArgs']] = None, status: Optional[pulumi.Input['ServiceStatusArgs']] = None) -> None:
        """
        Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.

        This resource waits until its status is ready before registering success
        for create/update, and populating output properties from the current state of the resource.
        The following conditions are used to determine whether the resource creation has
        succeeded or failed:

        1. Service object exists.
        2. Related Endpoint objects are created. Each time we get an update, wait 10 seconds
           for any stragglers.
        3. The endpoints objects target some number of living objects (unless the Service is
           an "empty headless" Service [1] or a Service with '.spec.type: ExternalName').
        4. External IP address is allocated (if Service has '.spec.type: LoadBalancer').

        Known limitations: 
        Services targeting ReplicaSets (and, by extension, Deployments,
        StatefulSets, etc.) with '.spec.replicas' set to 0 are not handled, and will time
        out. To work around this limitation, set 'pulumi.com/skipAwait: "true"' on
        '.metadata.annotations' for the Service. Work to handle this case is in progress [2].

        [1] https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
        [2] https://github.com/pulumi/pulumi-kubernetes/pull/703

        If the Service has not reached a Ready state after 10 minutes, it will
        time out and mark the resource update as Failed. You can override the default timeout value
        by setting the 'customTimeouts' option on the resource.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['ServiceSpecArgs'] spec: Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['ServiceStatusArgs'] status: Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        __self__.api_version = 'v1'
        __self__.kind = 'Service'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class ServiceAccountArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    automount_service_account_token: Optional[pulumi.Input[bool]] = pulumi.input_property("automountServiceAccountToken")
    """
    AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
    """
    image_pull_secrets: Optional[pulumi.Input[List[pulumi.Input['LocalObjectReferenceArgs']]]] = pulumi.input_property("imagePullSecrets")
    """
    ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    secrets: Optional[pulumi.Input[List[pulumi.Input['ObjectReferenceArgs']]]] = pulumi.input_property("secrets")
    """
    Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, automount_service_account_token: Optional[pulumi.Input[bool]] = None, image_pull_secrets: Optional[pulumi.Input[List[pulumi.Input['LocalObjectReferenceArgs']]]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, secrets: Optional[pulumi.Input[List[pulumi.Input['ObjectReferenceArgs']]]] = None) -> None:
        """
        ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[bool] automount_service_account_token: AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
        :param pulumi.Input[List[pulumi.Input['LocalObjectReferenceArgs']]] image_pull_secrets: ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[List[pulumi.Input['ObjectReferenceArgs']]] secrets: Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret
        """
        __self__.api_version = 'v1'
        __self__.automount_service_account_token = automount_service_account_token
        __self__.image_pull_secrets = image_pull_secrets
        __self__.kind = 'ServiceAccount'
        __self__.metadata = metadata
        __self__.secrets = secrets

@pulumi.input_type
class ServiceAccountTokenProjectionArgs:
    path: pulumi.Input[str] = pulumi.input_property("path")
    """
    Path is the path relative to the mount point of the file to project the token into.
    """
    audience: Optional[pulumi.Input[str]] = pulumi.input_property("audience")
    """
    Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
    """
    expiration_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("expirationSeconds")
    """
    ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, path: pulumi.Input[str], audience: Optional[pulumi.Input[str]] = None, expiration_seconds: Optional[pulumi.Input[float]] = None) -> None:
        """
        ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
        :param pulumi.Input[str] path: Path is the path relative to the mount point of the file to project the token into.
        :param pulumi.Input[str] audience: Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        :param pulumi.Input[float] expiration_seconds: ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        __self__.path = path
        __self__.audience = audience
        __self__.expiration_seconds = expiration_seconds

@pulumi.input_type
class ServicePortArgs:
    port: pulumi.Input[float] = pulumi.input_property("port")
    """
    The port that will be exposed by this service.
    """
    app_protocol: Optional[pulumi.Input[str]] = pulumi.input_property("appProtocol")
    """
    The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
    """
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
    """
    node_port: Optional[pulumi.Input[float]] = pulumi.input_property("nodePort")
    """
    The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    """
    protocol: Optional[pulumi.Input[str]] = pulumi.input_property("protocol")
    """
    The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
    """
    target_port: Optional[pulumi.Input[Union[float, str]]] = pulumi.input_property("targetPort")
    """
    Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port: pulumi.Input[float], app_protocol: Optional[pulumi.Input[str]] = None, name: Optional[pulumi.Input[str]] = None, node_port: Optional[pulumi.Input[float]] = None, protocol: Optional[pulumi.Input[str]] = None, target_port: Optional[pulumi.Input[Union[float, str]]] = None) -> None:
        """
        ServicePort contains information on service's port.
        :param pulumi.Input[float] port: The port that will be exposed by this service.
        :param pulumi.Input[str] app_protocol: The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
        :param pulumi.Input[str] name: The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
        :param pulumi.Input[float] node_port: The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
        :param pulumi.Input[str] protocol: The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
        :param pulumi.Input[Union[float, str]] target_port: Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
        """
        __self__.port = port
        __self__.app_protocol = app_protocol
        __self__.name = name
        __self__.node_port = node_port
        __self__.protocol = protocol
        __self__.target_port = target_port

@pulumi.input_type
class ServiceSpecArgs:
    cluster_ip: Optional[pulumi.Input[str]] = pulumi.input_property("clusterIP")
    """
    clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    """
    external_i_ps: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("externalIPs")
    """
    externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
    """
    external_name: Optional[pulumi.Input[str]] = pulumi.input_property("externalName")
    """
    externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
    """
    external_traffic_policy: Optional[pulumi.Input[str]] = pulumi.input_property("externalTrafficPolicy")
    """
    externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
    """
    health_check_node_port: Optional[pulumi.Input[float]] = pulumi.input_property("healthCheckNodePort")
    """
    healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
    """
    ip_family: Optional[pulumi.Input[str]] = pulumi.input_property("ipFamily")
    """
    ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
    """
    load_balancer_ip: Optional[pulumi.Input[str]] = pulumi.input_property("loadBalancerIP")
    """
    Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
    """
    load_balancer_source_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("loadBalancerSourceRanges")
    """
    If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
    """
    ports: Optional[pulumi.Input[List[pulumi.Input['ServicePortArgs']]]] = pulumi.input_property("ports")
    """
    The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    """
    publish_not_ready_addresses: Optional[pulumi.Input[bool]] = pulumi.input_property("publishNotReadyAddresses")
    """
    publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
    """
    selector: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("selector")
    """
    Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
    """
    session_affinity: Optional[pulumi.Input[str]] = pulumi.input_property("sessionAffinity")
    """
    Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    """
    session_affinity_config: Optional[pulumi.Input['SessionAffinityConfigArgs']] = pulumi.input_property("sessionAffinityConfig")
    """
    sessionAffinityConfig contains the configurations of session affinity.
    """
    topology_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("topologyKeys")
    """
    topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, cluster_ip: Optional[pulumi.Input[str]] = None, external_i_ps: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, external_name: Optional[pulumi.Input[str]] = None, external_traffic_policy: Optional[pulumi.Input[str]] = None, health_check_node_port: Optional[pulumi.Input[float]] = None, ip_family: Optional[pulumi.Input[str]] = None, load_balancer_ip: Optional[pulumi.Input[str]] = None, load_balancer_source_ranges: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, ports: Optional[pulumi.Input[List[pulumi.Input['ServicePortArgs']]]] = None, publish_not_ready_addresses: Optional[pulumi.Input[bool]] = None, selector: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, session_affinity: Optional[pulumi.Input[str]] = None, session_affinity_config: Optional[pulumi.Input['SessionAffinityConfigArgs']] = None, topology_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        ServiceSpec describes the attributes that a user creates on a service.
        :param pulumi.Input[str] cluster_ip: clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param pulumi.Input[List[pulumi.Input[str]]] external_i_ps: externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
        :param pulumi.Input[str] external_name: externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
        :param pulumi.Input[str] external_traffic_policy: externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
        :param pulumi.Input[float] health_check_node_port: healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
        :param pulumi.Input[str] ip_family: ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
        :param pulumi.Input[str] load_balancer_ip: Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
        :param pulumi.Input[List[pulumi.Input[str]]] load_balancer_source_ranges: If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
        :param pulumi.Input[List[pulumi.Input['ServicePortArgs']]] ports: The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param pulumi.Input[bool] publish_not_ready_addresses: publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] selector: Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
        :param pulumi.Input[str] session_affinity: Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        :param pulumi.Input['SessionAffinityConfigArgs'] session_affinity_config: sessionAffinityConfig contains the configurations of session affinity.
        :param pulumi.Input[List[pulumi.Input[str]]] topology_keys: topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
        :param pulumi.Input[str] type: type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
        """
        __self__.cluster_ip = cluster_ip
        __self__.external_i_ps = external_i_ps
        __self__.external_name = external_name
        __self__.external_traffic_policy = external_traffic_policy
        __self__.health_check_node_port = health_check_node_port
        __self__.ip_family = ip_family
        __self__.load_balancer_ip = load_balancer_ip
        __self__.load_balancer_source_ranges = load_balancer_source_ranges
        __self__.ports = ports
        __self__.publish_not_ready_addresses = publish_not_ready_addresses
        __self__.selector = selector
        __self__.session_affinity = session_affinity
        __self__.session_affinity_config = session_affinity_config
        __self__.topology_keys = topology_keys
        __self__.type = type

@pulumi.input_type
class ServiceStatusArgs:
    load_balancer: Optional[pulumi.Input['LoadBalancerStatusArgs']] = pulumi.input_property("loadBalancer")
    """
    LoadBalancer contains the current status of the load-balancer, if one is present.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, load_balancer: Optional[pulumi.Input['LoadBalancerStatusArgs']] = None) -> None:
        """
        ServiceStatus represents the current status of a service.
        :param pulumi.Input['LoadBalancerStatusArgs'] load_balancer: LoadBalancer contains the current status of the load-balancer, if one is present.
        """
        __self__.load_balancer = load_balancer

@pulumi.input_type
class SessionAffinityConfigArgs:
    client_ip: Optional[pulumi.Input['ClientIPConfigArgs']] = pulumi.input_property("clientIP")
    """
    clientIP contains the configurations of Client IP based session affinity.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, client_ip: Optional[pulumi.Input['ClientIPConfigArgs']] = None) -> None:
        """
        SessionAffinityConfig represents the configurations of session affinity.
        :param pulumi.Input['ClientIPConfigArgs'] client_ip: clientIP contains the configurations of Client IP based session affinity.
        """
        __self__.client_ip = client_ip

@pulumi.input_type
class StorageOSPersistentVolumeSourceArgs:
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """
    secret_ref: Optional[pulumi.Input['ObjectReferenceArgs']] = pulumi.input_property("secretRef")
    """
    SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    """
    volume_name: Optional[pulumi.Input[str]] = pulumi.input_property("volumeName")
    """
    VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    """
    volume_namespace: Optional[pulumi.Input[str]] = pulumi.input_property("volumeNamespace")
    """
    VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, fs_type: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['ObjectReferenceArgs']] = None, volume_name: Optional[pulumi.Input[str]] = None, volume_namespace: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a StorageOS persistent volume resource.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['ObjectReferenceArgs'] secret_ref: SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] volume_name: VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        :param pulumi.Input[str] volume_namespace: VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        __self__.fs_type = fs_type
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref
        __self__.volume_name = volume_name
        __self__.volume_namespace = volume_namespace

@pulumi.input_type
class StorageOSVolumeSourceArgs:
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """
    secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = pulumi.input_property("secretRef")
    """
    SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
    """
    volume_name: Optional[pulumi.Input[str]] = pulumi.input_property("volumeName")
    """
    VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    """
    volume_namespace: Optional[pulumi.Input[str]] = pulumi.input_property("volumeNamespace")
    """
    VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, fs_type: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, secret_ref: Optional[pulumi.Input['LocalObjectReferenceArgs']] = None, volume_name: Optional[pulumi.Input[str]] = None, volume_namespace: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a StorageOS persistent volume resource.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['LocalObjectReferenceArgs'] secret_ref: SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] volume_name: VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        :param pulumi.Input[str] volume_namespace: VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        __self__.fs_type = fs_type
        __self__.read_only = read_only
        __self__.secret_ref = secret_ref
        __self__.volume_name = volume_name
        __self__.volume_namespace = volume_namespace

@pulumi.input_type
class SysctlArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name of a property to set
    """
    value: pulumi.Input[str] = pulumi.input_property("value")
    """
    Value of a property to set
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], value: pulumi.Input[str]) -> None:
        """
        Sysctl defines a kernel parameter to be set
        :param pulumi.Input[str] name: Name of a property to set
        :param pulumi.Input[str] value: Value of a property to set
        """
        __self__.name = name
        __self__.value = value

@pulumi.input_type
class TCPSocketActionArgs:
    port: pulumi.Input[Union[float, str]] = pulumi.input_property("port")
    """
    Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
    """
    host: Optional[pulumi.Input[str]] = pulumi.input_property("host")
    """
    Optional: Host name to connect to, defaults to the pod IP.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, port: pulumi.Input[Union[float, str]], host: Optional[pulumi.Input[str]] = None) -> None:
        """
        TCPSocketAction describes an action based on opening a socket
        :param pulumi.Input[Union[float, str]] port: Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        :param pulumi.Input[str] host: Optional: Host name to connect to, defaults to the pod IP.
        """
        __self__.port = port
        __self__.host = host

@pulumi.input_type
class TaintArgs:
    effect: pulumi.Input[str] = pulumi.input_property("effect")
    """
    Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
    """
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    Required. The taint key to be applied to a node.
    """
    time_added: Optional[pulumi.Input[str]] = pulumi.input_property("timeAdded")
    """
    TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")
    """
    The taint value corresponding to the taint key.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, effect: pulumi.Input[str], key: pulumi.Input[str], time_added: Optional[pulumi.Input[str]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        """
        The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
        :param pulumi.Input[str] effect: Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Required. The taint key to be applied to a node.
        :param pulumi.Input[str] time_added: TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
        :param pulumi.Input[str] value: The taint value corresponding to the taint key.
        """
        __self__.effect = effect
        __self__.key = key
        __self__.time_added = time_added
        __self__.value = value

@pulumi.input_type
class TolerationArgs:
    effect: Optional[pulumi.Input[str]] = pulumi.input_property("effect")
    """
    Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    """
    key: Optional[pulumi.Input[str]] = pulumi.input_property("key")
    """
    Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    """
    operator: Optional[pulumi.Input[str]] = pulumi.input_property("operator")
    """
    Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    """
    toleration_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("tolerationSeconds")
    """
    TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    """
    value: Optional[pulumi.Input[str]] = pulumi.input_property("value")
    """
    Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, effect: Optional[pulumi.Input[str]] = None, key: Optional[pulumi.Input[str]] = None, operator: Optional[pulumi.Input[str]] = None, toleration_seconds: Optional[pulumi.Input[float]] = None, value: Optional[pulumi.Input[str]] = None) -> None:
        """
        The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        :param pulumi.Input[float] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        __self__.effect = effect
        __self__.key = key
        __self__.operator = operator
        __self__.toleration_seconds = toleration_seconds
        __self__.value = value

@pulumi.input_type
class TopologySelectorLabelRequirementArgs:
    key: pulumi.Input[str] = pulumi.input_property("key")
    """
    The label key that the selector applies to.
    """
    values: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("values")
    """
    An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, key: pulumi.Input[str], values: pulumi.Input[List[pulumi.Input[str]]]) -> None:
        """
        A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[List[pulumi.Input[str]]] values: An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
        """
        __self__.key = key
        __self__.values = values

@pulumi.input_type
class TopologySelectorTermArgs:
    match_label_expressions: Optional[pulumi.Input[List[pulumi.Input['TopologySelectorLabelRequirementArgs']]]] = pulumi.input_property("matchLabelExpressions")
    """
    A list of topology selector requirements by labels.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, match_label_expressions: Optional[pulumi.Input[List[pulumi.Input['TopologySelectorLabelRequirementArgs']]]] = None) -> None:
        """
        A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
        :param pulumi.Input[List[pulumi.Input['TopologySelectorLabelRequirementArgs']]] match_label_expressions: A list of topology selector requirements by labels.
        """
        __self__.match_label_expressions = match_label_expressions

@pulumi.input_type
class TopologySpreadConstraintArgs:
    max_skew: pulumi.Input[float] = pulumi.input_property("maxSkew")
    """
    MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.
    """
    topology_key: pulumi.Input[str] = pulumi.input_property("topologyKey")
    """
    TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
    """
    when_unsatisfiable: pulumi.Input[str] = pulumi.input_property("whenUnsatisfiable")
    """
    WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as "Unsatisfiable" if and only if placing incoming pod on any topology violates "MaxSkew". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
    """
    label_selector: Optional[pulumi.Input['LabelSelectorArgs']] = pulumi.input_property("labelSelector")
    """
    LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max_skew: pulumi.Input[float], topology_key: pulumi.Input[str], when_unsatisfiable: pulumi.Input[str], label_selector: Optional[pulumi.Input['LabelSelectorArgs']] = None) -> None:
        """
        TopologySpreadConstraint specifies how to spread matching pods among the given topology.
        :param pulumi.Input[float] max_skew: MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.
        :param pulumi.Input[str] topology_key: TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
        :param pulumi.Input[str] when_unsatisfiable: WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as "Unsatisfiable" if and only if placing incoming pod on any topology violates "MaxSkew". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
        :param pulumi.Input['LabelSelectorArgs'] label_selector: LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
        """
        __self__.max_skew = max_skew
        __self__.topology_key = topology_key
        __self__.when_unsatisfiable = when_unsatisfiable
        __self__.label_selector = label_selector

@pulumi.input_type
class TypedLocalObjectReferenceArgs:
    kind: pulumi.Input[str] = pulumi.input_property("kind")
    """
    Kind is the type of resource being referenced
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name is the name of resource being referenced
    """
    api_group: Optional[pulumi.Input[str]] = pulumi.input_property("apiGroup")
    """
    APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, kind: pulumi.Input[str], name: pulumi.Input[str], api_group: Optional[pulumi.Input[str]] = None) -> None:
        """
        TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
        :param pulumi.Input[str] kind: Kind is the type of resource being referenced
        :param pulumi.Input[str] name: Name is the name of resource being referenced
        :param pulumi.Input[str] api_group: APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        """
        __self__.kind = kind
        __self__.name = name
        __self__.api_group = api_group

@pulumi.input_type
class VolumeArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    aws_elastic_block_store: Optional[pulumi.Input['AWSElasticBlockStoreVolumeSourceArgs']] = pulumi.input_property("awsElasticBlockStore")
    """
    AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    """
    azure_disk: Optional[pulumi.Input['AzureDiskVolumeSourceArgs']] = pulumi.input_property("azureDisk")
    """
    AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    """
    azure_file: Optional[pulumi.Input['AzureFileVolumeSourceArgs']] = pulumi.input_property("azureFile")
    """
    AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    """
    cephfs: Optional[pulumi.Input['CephFSVolumeSourceArgs']] = pulumi.input_property("cephfs")
    """
    CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
    """
    cinder: Optional[pulumi.Input['CinderVolumeSourceArgs']] = pulumi.input_property("cinder")
    """
    Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    config_map: Optional[pulumi.Input['ConfigMapVolumeSourceArgs']] = pulumi.input_property("configMap")
    """
    ConfigMap represents a configMap that should populate this volume
    """
    csi: Optional[pulumi.Input['CSIVolumeSourceArgs']] = pulumi.input_property("csi")
    """
    CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
    """
    downward_api: Optional[pulumi.Input['DownwardAPIVolumeSourceArgs']] = pulumi.input_property("downwardAPI")
    """
    DownwardAPI represents downward API about the pod that should populate this volume
    """
    empty_dir: Optional[pulumi.Input['EmptyDirVolumeSourceArgs']] = pulumi.input_property("emptyDir")
    """
    EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    """
    fc: Optional[pulumi.Input['FCVolumeSourceArgs']] = pulumi.input_property("fc")
    """
    FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
    """
    flex_volume: Optional[pulumi.Input['FlexVolumeSourceArgs']] = pulumi.input_property("flexVolume")
    """
    FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    """
    flocker: Optional[pulumi.Input['FlockerVolumeSourceArgs']] = pulumi.input_property("flocker")
    """
    Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
    """
    gce_persistent_disk: Optional[pulumi.Input['GCEPersistentDiskVolumeSourceArgs']] = pulumi.input_property("gcePersistentDisk")
    """
    GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """
    git_repo: Optional[pulumi.Input['GitRepoVolumeSourceArgs']] = pulumi.input_property("gitRepo")
    """
    GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
    """
    glusterfs: Optional[pulumi.Input['GlusterfsVolumeSourceArgs']] = pulumi.input_property("glusterfs")
    """
    Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
    """
    host_path: Optional[pulumi.Input['HostPathVolumeSourceArgs']] = pulumi.input_property("hostPath")
    """
    HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    """
    iscsi: Optional[pulumi.Input['ISCSIVolumeSourceArgs']] = pulumi.input_property("iscsi")
    """
    ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
    """
    nfs: Optional[pulumi.Input['NFSVolumeSourceArgs']] = pulumi.input_property("nfs")
    """
    NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    """
    persistent_volume_claim: Optional[pulumi.Input['PersistentVolumeClaimVolumeSourceArgs']] = pulumi.input_property("persistentVolumeClaim")
    """
    PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    """
    photon_persistent_disk: Optional[pulumi.Input['PhotonPersistentDiskVolumeSourceArgs']] = pulumi.input_property("photonPersistentDisk")
    """
    PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
    """
    portworx_volume: Optional[pulumi.Input['PortworxVolumeSourceArgs']] = pulumi.input_property("portworxVolume")
    """
    PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
    """
    projected: Optional[pulumi.Input['ProjectedVolumeSourceArgs']] = pulumi.input_property("projected")
    """
    Items for all in one resources secrets, configmaps, and downward API
    """
    quobyte: Optional[pulumi.Input['QuobyteVolumeSourceArgs']] = pulumi.input_property("quobyte")
    """
    Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
    """
    rbd: Optional[pulumi.Input['RBDVolumeSourceArgs']] = pulumi.input_property("rbd")
    """
    RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
    """
    scale_io: Optional[pulumi.Input['ScaleIOVolumeSourceArgs']] = pulumi.input_property("scaleIO")
    """
    ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    """
    secret: Optional[pulumi.Input['SecretVolumeSourceArgs']] = pulumi.input_property("secret")
    """
    Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    """
    storageos: Optional[pulumi.Input['StorageOSVolumeSourceArgs']] = pulumi.input_property("storageos")
    """
    StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    """
    vsphere_volume: Optional[pulumi.Input['VsphereVirtualDiskVolumeSourceArgs']] = pulumi.input_property("vsphereVolume")
    """
    VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], aws_elastic_block_store: Optional[pulumi.Input['AWSElasticBlockStoreVolumeSourceArgs']] = None, azure_disk: Optional[pulumi.Input['AzureDiskVolumeSourceArgs']] = None, azure_file: Optional[pulumi.Input['AzureFileVolumeSourceArgs']] = None, cephfs: Optional[pulumi.Input['CephFSVolumeSourceArgs']] = None, cinder: Optional[pulumi.Input['CinderVolumeSourceArgs']] = None, config_map: Optional[pulumi.Input['ConfigMapVolumeSourceArgs']] = None, csi: Optional[pulumi.Input['CSIVolumeSourceArgs']] = None, downward_api: Optional[pulumi.Input['DownwardAPIVolumeSourceArgs']] = None, empty_dir: Optional[pulumi.Input['EmptyDirVolumeSourceArgs']] = None, fc: Optional[pulumi.Input['FCVolumeSourceArgs']] = None, flex_volume: Optional[pulumi.Input['FlexVolumeSourceArgs']] = None, flocker: Optional[pulumi.Input['FlockerVolumeSourceArgs']] = None, gce_persistent_disk: Optional[pulumi.Input['GCEPersistentDiskVolumeSourceArgs']] = None, git_repo: Optional[pulumi.Input['GitRepoVolumeSourceArgs']] = None, glusterfs: Optional[pulumi.Input['GlusterfsVolumeSourceArgs']] = None, host_path: Optional[pulumi.Input['HostPathVolumeSourceArgs']] = None, iscsi: Optional[pulumi.Input['ISCSIVolumeSourceArgs']] = None, nfs: Optional[pulumi.Input['NFSVolumeSourceArgs']] = None, persistent_volume_claim: Optional[pulumi.Input['PersistentVolumeClaimVolumeSourceArgs']] = None, photon_persistent_disk: Optional[pulumi.Input['PhotonPersistentDiskVolumeSourceArgs']] = None, portworx_volume: Optional[pulumi.Input['PortworxVolumeSourceArgs']] = None, projected: Optional[pulumi.Input['ProjectedVolumeSourceArgs']] = None, quobyte: Optional[pulumi.Input['QuobyteVolumeSourceArgs']] = None, rbd: Optional[pulumi.Input['RBDVolumeSourceArgs']] = None, scale_io: Optional[pulumi.Input['ScaleIOVolumeSourceArgs']] = None, secret: Optional[pulumi.Input['SecretVolumeSourceArgs']] = None, storageos: Optional[pulumi.Input['StorageOSVolumeSourceArgs']] = None, vsphere_volume: Optional[pulumi.Input['VsphereVirtualDiskVolumeSourceArgs']] = None) -> None:
        """
        Volume represents a named volume in a pod that may be accessed by any container in the pod.
        :param pulumi.Input[str] name: Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input['AWSElasticBlockStoreVolumeSourceArgs'] aws_elastic_block_store: AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input['AzureDiskVolumeSourceArgs'] azure_disk: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input['AzureFileVolumeSourceArgs'] azure_file: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input['CephFSVolumeSourceArgs'] cephfs: CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input['CinderVolumeSourceArgs'] cinder: Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['ConfigMapVolumeSourceArgs'] config_map: ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input['CSIVolumeSourceArgs'] csi: CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        :param pulumi.Input['DownwardAPIVolumeSourceArgs'] downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input['EmptyDirVolumeSourceArgs'] empty_dir: EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['FCVolumeSourceArgs'] fc: FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input['FlexVolumeSourceArgs'] flex_volume: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input['FlockerVolumeSourceArgs'] flocker: Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param pulumi.Input['GCEPersistentDiskVolumeSourceArgs'] gce_persistent_disk: GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input['GitRepoVolumeSourceArgs'] git_repo: GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input['GlusterfsVolumeSourceArgs'] glusterfs: Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input['HostPathVolumeSourceArgs'] host_path: HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input['ISCSIVolumeSourceArgs'] iscsi: ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param pulumi.Input['NFSVolumeSourceArgs'] nfs: NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input['PersistentVolumeClaimVolumeSourceArgs'] persistent_volume_claim: PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input['PhotonPersistentDiskVolumeSourceArgs'] photon_persistent_disk: PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input['PortworxVolumeSourceArgs'] portworx_volume: PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input['ProjectedVolumeSourceArgs'] projected: Items for all in one resources secrets, configmaps, and downward API
        :param pulumi.Input['QuobyteVolumeSourceArgs'] quobyte: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input['RBDVolumeSourceArgs'] rbd: RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input['ScaleIOVolumeSourceArgs'] scale_io: ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['SecretVolumeSourceArgs'] secret: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param pulumi.Input['StorageOSVolumeSourceArgs'] storageos: StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['VsphereVirtualDiskVolumeSourceArgs'] vsphere_volume: VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        __self__.name = name
        __self__.aws_elastic_block_store = aws_elastic_block_store
        __self__.azure_disk = azure_disk
        __self__.azure_file = azure_file
        __self__.cephfs = cephfs
        __self__.cinder = cinder
        __self__.config_map = config_map
        __self__.csi = csi
        __self__.downward_api = downward_api
        __self__.empty_dir = empty_dir
        __self__.fc = fc
        __self__.flex_volume = flex_volume
        __self__.flocker = flocker
        __self__.gce_persistent_disk = gce_persistent_disk
        __self__.git_repo = git_repo
        __self__.glusterfs = glusterfs
        __self__.host_path = host_path
        __self__.iscsi = iscsi
        __self__.nfs = nfs
        __self__.persistent_volume_claim = persistent_volume_claim
        __self__.photon_persistent_disk = photon_persistent_disk
        __self__.portworx_volume = portworx_volume
        __self__.projected = projected
        __self__.quobyte = quobyte
        __self__.rbd = rbd
        __self__.scale_io = scale_io
        __self__.secret = secret
        __self__.storageos = storageos
        __self__.vsphere_volume = vsphere_volume

@pulumi.input_type
class VolumeDeviceArgs:
    device_path: pulumi.Input[str] = pulumi.input_property("devicePath")
    """
    devicePath is the path inside of the container that the device will be mapped to.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    name must match the name of a persistentVolumeClaim in the pod
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, device_path: pulumi.Input[str], name: pulumi.Input[str]) -> None:
        """
        volumeDevice describes a mapping of a raw block device within a container.
        :param pulumi.Input[str] device_path: devicePath is the path inside of the container that the device will be mapped to.
        :param pulumi.Input[str] name: name must match the name of a persistentVolumeClaim in the pod
        """
        __self__.device_path = device_path
        __self__.name = name

@pulumi.input_type
class VolumeMountArgs:
    mount_path: pulumi.Input[str] = pulumi.input_property("mountPath")
    """
    Path within the container at which the volume should be mounted.  Must not contain ':'.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    This must match the Name of a Volume.
    """
    mount_propagation: Optional[pulumi.Input[str]] = pulumi.input_property("mountPropagation")
    """
    mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    """
    sub_path: Optional[pulumi.Input[str]] = pulumi.input_property("subPath")
    """
    Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    """
    sub_path_expr: Optional[pulumi.Input[str]] = pulumi.input_property("subPathExpr")
    """
    Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, mount_path: pulumi.Input[str], name: pulumi.Input[str], mount_propagation: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None, sub_path: Optional[pulumi.Input[str]] = None, sub_path_expr: Optional[pulumi.Input[str]] = None) -> None:
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param pulumi.Input[str] sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        __self__.mount_path = mount_path
        __self__.name = name
        __self__.mount_propagation = mount_propagation
        __self__.read_only = read_only
        __self__.sub_path = sub_path
        __self__.sub_path_expr = sub_path_expr

@pulumi.input_type
class VolumeNodeAffinityArgs:
    required: Optional[pulumi.Input['NodeSelectorArgs']] = pulumi.input_property("required")
    """
    Required specifies hard node constraints that must be met.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, required: Optional[pulumi.Input['NodeSelectorArgs']] = None) -> None:
        """
        VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
        :param pulumi.Input['NodeSelectorArgs'] required: Required specifies hard node constraints that must be met.
        """
        __self__.required = required

@pulumi.input_type
class VolumeProjectionArgs:
    config_map: Optional[pulumi.Input['ConfigMapProjectionArgs']] = pulumi.input_property("configMap")
    """
    information about the configMap data to project
    """
    downward_api: Optional[pulumi.Input['DownwardAPIProjectionArgs']] = pulumi.input_property("downwardAPI")
    """
    information about the downwardAPI data to project
    """
    secret: Optional[pulumi.Input['SecretProjectionArgs']] = pulumi.input_property("secret")
    """
    information about the secret data to project
    """
    service_account_token: Optional[pulumi.Input['ServiceAccountTokenProjectionArgs']] = pulumi.input_property("serviceAccountToken")
    """
    information about the serviceAccountToken data to project
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, config_map: Optional[pulumi.Input['ConfigMapProjectionArgs']] = None, downward_api: Optional[pulumi.Input['DownwardAPIProjectionArgs']] = None, secret: Optional[pulumi.Input['SecretProjectionArgs']] = None, service_account_token: Optional[pulumi.Input['ServiceAccountTokenProjectionArgs']] = None) -> None:
        """
        Projection that may be projected along with other supported volume types
        :param pulumi.Input['ConfigMapProjectionArgs'] config_map: information about the configMap data to project
        :param pulumi.Input['DownwardAPIProjectionArgs'] downward_api: information about the downwardAPI data to project
        :param pulumi.Input['SecretProjectionArgs'] secret: information about the secret data to project
        :param pulumi.Input['ServiceAccountTokenProjectionArgs'] service_account_token: information about the serviceAccountToken data to project
        """
        __self__.config_map = config_map
        __self__.downward_api = downward_api
        __self__.secret = secret
        __self__.service_account_token = service_account_token

@pulumi.input_type
class VsphereVirtualDiskVolumeSourceArgs:
    volume_path: pulumi.Input[str] = pulumi.input_property("volumePath")
    """
    Path that identifies vSphere volume vmdk
    """
    fs_type: Optional[pulumi.Input[str]] = pulumi.input_property("fsType")
    """
    Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    """
    storage_policy_id: Optional[pulumi.Input[str]] = pulumi.input_property("storagePolicyID")
    """
    Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    """
    storage_policy_name: Optional[pulumi.Input[str]] = pulumi.input_property("storagePolicyName")
    """
    Storage Policy Based Management (SPBM) profile name.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, volume_path: pulumi.Input[str], fs_type: Optional[pulumi.Input[str]] = None, storage_policy_id: Optional[pulumi.Input[str]] = None, storage_policy_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        Represents a vSphere volume resource.
        :param pulumi.Input[str] volume_path: Path that identifies vSphere volume vmdk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] storage_policy_id: Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        :param pulumi.Input[str] storage_policy_name: Storage Policy Based Management (SPBM) profile name.
        """
        __self__.volume_path = volume_path
        __self__.fs_type = fs_type
        __self__.storage_policy_id = storage_policy_id
        __self__.storage_policy_name = storage_policy_name

@pulumi.input_type
class WeightedPodAffinityTermArgs:
    pod_affinity_term: pulumi.Input['PodAffinityTermArgs'] = pulumi.input_property("podAffinityTerm")
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """
    weight: pulumi.Input[float] = pulumi.input_property("weight")
    """
    weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, pod_affinity_term: pulumi.Input['PodAffinityTermArgs'], weight: pulumi.Input[float]) -> None:
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input['PodAffinityTermArgs'] pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[float] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        __self__.pod_affinity_term = pod_affinity_term
        __self__.weight = weight

@pulumi.input_type
class WindowsSecurityContextOptionsArgs:
    gmsa_credential_spec: Optional[pulumi.Input[str]] = pulumi.input_property("gmsaCredentialSpec")
    """
    GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    """
    gmsa_credential_spec_name: Optional[pulumi.Input[str]] = pulumi.input_property("gmsaCredentialSpecName")
    """
    GMSACredentialSpecName is the name of the GMSA credential spec to use.
    """
    run_as_user_name: Optional[pulumi.Input[str]] = pulumi.input_property("runAsUserName")
    """
    The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, gmsa_credential_spec: Optional[pulumi.Input[str]] = None, gmsa_credential_spec_name: Optional[pulumi.Input[str]] = None, run_as_user_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        WindowsSecurityContextOptions contain Windows-specific options and credentials.
        :param pulumi.Input[str] gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param pulumi.Input[str] gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param pulumi.Input[str] run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        __self__.gmsa_credential_spec = gmsa_credential_spec
        __self__.gmsa_credential_spec_name = gmsa_credential_spec_name
        __self__.run_as_user_name = run_as_user_name

