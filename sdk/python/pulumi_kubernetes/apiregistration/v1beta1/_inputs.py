# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ... import meta as _meta

@pulumi.input_type
class APIServiceArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = pulumi.input_property("metadata")
    spec: Optional[pulumi.Input['APIServiceSpecArgs']] = pulumi.input_property("spec")
    """
    Spec contains information for locating and communicating with a server
    """
    status: Optional[pulumi.Input['APIServiceStatusArgs']] = pulumi.input_property("status")
    """
    Status contains derived information about an API server
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['APIServiceSpecArgs']] = None, status: Optional[pulumi.Input['APIServiceStatusArgs']] = None) -> None:
        """
        APIService represents a server for a particular GroupVersion. Name must be "version.group".
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['APIServiceSpecArgs'] spec: Spec contains information for locating and communicating with a server
        :param pulumi.Input['APIServiceStatusArgs'] status: Status contains derived information about an API server
        """
        __self__.api_version = 'apiregistration.k8s.io/v1beta1'
        __self__.kind = 'APIService'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class APIServiceConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    """
    Status is the status of the condition. Can be True, False, Unknown.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type is the type of the condition.
    """
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    Last time the condition transitioned from one status to another.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    Human-readable message indicating details about last transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    Unique, one-word, CamelCase reason for the condition's last transition.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        APIServiceCondition describes the state of an APIService at a particular point
        :param pulumi.Input[str] status: Status is the status of the condition. Can be True, False, Unknown.
        :param pulumi.Input[str] type: Type is the type of the condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Unique, one-word, CamelCase reason for the condition's last transition.
        """
        __self__.status = status
        __self__.type = type
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class APIServiceSpecArgs:
    group_priority_minimum: pulumi.Input[float] = pulumi.input_property("groupPriorityMinimum")
    """
    GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
    """
    version_priority: pulumi.Input[float] = pulumi.input_property("versionPriority")
    """
    VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
    """
    ca_bundle: Optional[pulumi.Input[str]] = pulumi.input_property("caBundle")
    """
    CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
    """
    group: Optional[pulumi.Input[str]] = pulumi.input_property("group")
    """
    Group is the API group name this server hosts
    """
    insecure_skip_tls_verify: Optional[pulumi.Input[bool]] = pulumi.input_property("insecureSkipTLSVerify")
    """
    InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
    """
    service: Optional[pulumi.Input['ServiceReferenceArgs']] = pulumi.input_property("service")
    """
    Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    Version is the API version this server hosts.  For example, "v1"
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, group_priority_minimum: pulumi.Input[float], version_priority: pulumi.Input[float], ca_bundle: Optional[pulumi.Input[str]] = None, group: Optional[pulumi.Input[str]] = None, insecure_skip_tls_verify: Optional[pulumi.Input[bool]] = None, service: Optional[pulumi.Input['ServiceReferenceArgs']] = None, version: Optional[pulumi.Input[str]] = None) -> None:
        """
        APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
        :param pulumi.Input[float] group_priority_minimum: GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
        :param pulumi.Input[float] version_priority: VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
        :param pulumi.Input[str] ca_bundle: CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
        :param pulumi.Input[str] group: Group is the API group name this server hosts
        :param pulumi.Input[bool] insecure_skip_tls_verify: InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
        :param pulumi.Input['ServiceReferenceArgs'] service: Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
        :param pulumi.Input[str] version: Version is the API version this server hosts.  For example, "v1"
        """
        __self__.group_priority_minimum = group_priority_minimum
        __self__.version_priority = version_priority
        __self__.ca_bundle = ca_bundle
        __self__.group = group
        __self__.insecure_skip_tls_verify = insecure_skip_tls_verify
        __self__.service = service
        __self__.version = version

@pulumi.input_type
class APIServiceStatusArgs:
    conditions: Optional[pulumi.Input[List[pulumi.Input['APIServiceConditionArgs']]]] = pulumi.input_property("conditions")
    """
    Current service state of apiService.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, conditions: Optional[pulumi.Input[List[pulumi.Input['APIServiceConditionArgs']]]] = None) -> None:
        """
        APIServiceStatus contains derived information about an API server
        :param pulumi.Input[List[pulumi.Input['APIServiceConditionArgs']]] conditions: Current service state of apiService.
        """
        __self__.conditions = conditions

@pulumi.input_type
class ServiceReferenceArgs:
    name: Optional[pulumi.Input[str]] = pulumi.input_property("name")
    """
    Name is the name of the service
    """
    namespace: Optional[pulumi.Input[str]] = pulumi.input_property("namespace")
    """
    Namespace is the namespace of the service
    """
    port: Optional[pulumi.Input[float]] = pulumi.input_property("port")
    """
    If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: Optional[pulumi.Input[str]] = None, namespace: Optional[pulumi.Input[str]] = None, port: Optional[pulumi.Input[float]] = None) -> None:
        """
        ServiceReference holds a reference to Service.legacy.k8s.io
        :param pulumi.Input[str] name: Name is the name of the service
        :param pulumi.Input[str] namespace: Namespace is the namespace of the service
        :param pulumi.Input[float] port: If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
        """
        __self__.name = name
        __self__.namespace = namespace
        __self__.port = port

