# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class ControllerRevisionArgs:
    revision: pulumi.Input[float] = pulumi.input_property("revision")
    """
    Revision indicates the revision of the state represented by Data.
    """
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    data: Optional[Any] = pulumi.input_property("data")
    """
    Data is the serialized representation of the state.
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, revision: pulumi.Input[float], api_version: Optional[pulumi.Input[str]] = None, data: Optional[Any] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None) -> None:
        """
        ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
        :param pulumi.Input[float] revision: Revision indicates the revision of the state represented by Data.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param Any data: Data is the serialized representation of the state.
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        __self__.revision = revision
        __self__.api_version = 'apps/v1beta1'
        __self__.data = data
        __self__.kind = 'ControllerRevision'
        __self__.metadata = metadata

@pulumi.input_type
class DeploymentArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object metadata.
    """
    spec: Optional[pulumi.Input['DeploymentSpecArgs']] = pulumi.input_property("spec")
    """
    Specification of the desired behavior of the Deployment.
    """
    status: Optional[pulumi.Input['DeploymentStatusArgs']] = pulumi.input_property("status")
    """
    Most recently observed status of the Deployment.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['DeploymentSpecArgs']] = None, status: Optional[pulumi.Input['DeploymentStatusArgs']] = None) -> None:
        """
        Deployment enables declarative updates for Pods and ReplicaSets.

        This resource waits until its status is ready before registering success
        for create/update, and populating output properties from the current state of the resource.
        The following conditions are used to determine whether the resource creation has
        succeeded or failed:

        1. The Deployment has begun to be updated by the Deployment controller. If the current
           generation of the Deployment is > 1, then this means that the current generation must
           be different from the generation reported by the last outputs.
        2. There exists a ReplicaSet whose revision is equal to the current revision of the
           Deployment.
        3. The Deployment's '.status.conditions' has a status of type 'Available' whose 'status'
           member is set to 'True'.
        4. If the Deployment has generation > 1, then '.status.conditions' has a status of type
           'Progressing', whose 'status' member is set to 'True', and whose 'reason' is
           'NewReplicaSetAvailable'. For generation <= 1, this status field does not exist,
           because it doesn't do a rollout (i.e., it simply creates the Deployment and
           corresponding ReplicaSet), and therefore there is no rollout to mark as 'Progressing'.

        If the Deployment has not reached a Ready state after 10 minutes, it will
        time out and mark the resource update as Failed. You can override the default timeout value
        by setting the 'customTimeouts' option on the resource.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object metadata.
        :param pulumi.Input['DeploymentSpecArgs'] spec: Specification of the desired behavior of the Deployment.
        :param pulumi.Input['DeploymentStatusArgs'] status: Most recently observed status of the Deployment.
        """
        __self__.api_version = 'apps/v1beta1'
        __self__.kind = 'Deployment'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class DeploymentConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    """
    Status of the condition, one of True, False, Unknown.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type of deployment condition.
    """
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    Last time the condition transitioned from one status to another.
    """
    last_update_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastUpdateTime")
    """
    The last time this condition was updated.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    A human readable message indicating details about the transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    The reason for the condition's last transition.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], last_transition_time: Optional[pulumi.Input[str]] = None, last_update_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        DeploymentCondition describes the state of a deployment at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of deployment condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: The last time this condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        __self__.status = status
        __self__.type = type
        __self__.last_transition_time = last_transition_time
        __self__.last_update_time = last_update_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class DeploymentSpecArgs:
    template: pulumi.Input['PodTemplateSpecArgs'] = pulumi.input_property("template")
    """
    Template describes the pods that will be created.
    """
    min_ready_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("minReadySeconds")
    """
    Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    """
    paused: Optional[pulumi.Input[bool]] = pulumi.input_property("paused")
    """
    Indicates that the deployment is paused.
    """
    progress_deadline_seconds: Optional[pulumi.Input[float]] = pulumi.input_property("progressDeadlineSeconds")
    """
    The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
    """
    replicas: Optional[pulumi.Input[float]] = pulumi.input_property("replicas")
    """
    Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
    """
    revision_history_limit: Optional[pulumi.Input[float]] = pulumi.input_property("revisionHistoryLimit")
    """
    The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
    """
    rollback_to: Optional[pulumi.Input['RollbackConfigArgs']] = pulumi.input_property("rollbackTo")
    """
    DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
    """
    selector: Optional[pulumi.Input['LabelSelectorArgs']] = pulumi.input_property("selector")
    """
    Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
    """
    strategy: Optional[pulumi.Input['DeploymentStrategyArgs']] = pulumi.input_property("strategy")
    """
    The deployment strategy to use to replace existing pods with new ones.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, template: pulumi.Input['PodTemplateSpecArgs'], min_ready_seconds: Optional[pulumi.Input[float]] = None, paused: Optional[pulumi.Input[bool]] = None, progress_deadline_seconds: Optional[pulumi.Input[float]] = None, replicas: Optional[pulumi.Input[float]] = None, revision_history_limit: Optional[pulumi.Input[float]] = None, rollback_to: Optional[pulumi.Input['RollbackConfigArgs']] = None, selector: Optional[pulumi.Input['LabelSelectorArgs']] = None, strategy: Optional[pulumi.Input['DeploymentStrategyArgs']] = None) -> None:
        """
        DeploymentSpec is the specification of the desired behavior of the Deployment.
        :param pulumi.Input['PodTemplateSpecArgs'] template: Template describes the pods that will be created.
        :param pulumi.Input[float] min_ready_seconds: Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
        :param pulumi.Input[bool] paused: Indicates that the deployment is paused.
        :param pulumi.Input[float] progress_deadline_seconds: The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
        :param pulumi.Input[float] replicas: Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
        :param pulumi.Input[float] revision_history_limit: The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 2.
        :param pulumi.Input['RollbackConfigArgs'] rollback_to: DEPRECATED. The config this deployment is rolling back to. Will be cleared after rollback is done.
        :param pulumi.Input['LabelSelectorArgs'] selector: Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
        :param pulumi.Input['DeploymentStrategyArgs'] strategy: The deployment strategy to use to replace existing pods with new ones.
        """
        __self__.template = template
        __self__.min_ready_seconds = min_ready_seconds
        __self__.paused = paused
        __self__.progress_deadline_seconds = progress_deadline_seconds
        __self__.replicas = replicas
        __self__.revision_history_limit = revision_history_limit
        __self__.rollback_to = rollback_to
        __self__.selector = selector
        __self__.strategy = strategy

@pulumi.input_type
class DeploymentStatusArgs:
    available_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("availableReplicas")
    """
    Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
    """
    collision_count: Optional[pulumi.Input[float]] = pulumi.input_property("collisionCount")
    """
    Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
    """
    conditions: Optional[pulumi.Input[List[pulumi.Input['DeploymentConditionArgs']]]] = pulumi.input_property("conditions")
    """
    Represents the latest available observations of a deployment's current state.
    """
    observed_generation: Optional[pulumi.Input[float]] = pulumi.input_property("observedGeneration")
    """
    The generation observed by the deployment controller.
    """
    ready_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("readyReplicas")
    """
    Total number of ready pods targeted by this deployment.
    """
    replicas: Optional[pulumi.Input[float]] = pulumi.input_property("replicas")
    """
    Total number of non-terminated pods targeted by this deployment (their labels match the selector).
    """
    unavailable_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("unavailableReplicas")
    """
    Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
    """
    updated_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("updatedReplicas")
    """
    Total number of non-terminated pods targeted by this deployment that have the desired template spec.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, available_replicas: Optional[pulumi.Input[float]] = None, collision_count: Optional[pulumi.Input[float]] = None, conditions: Optional[pulumi.Input[List[pulumi.Input['DeploymentConditionArgs']]]] = None, observed_generation: Optional[pulumi.Input[float]] = None, ready_replicas: Optional[pulumi.Input[float]] = None, replicas: Optional[pulumi.Input[float]] = None, unavailable_replicas: Optional[pulumi.Input[float]] = None, updated_replicas: Optional[pulumi.Input[float]] = None) -> None:
        """
        DeploymentStatus is the most recently observed status of the Deployment.
        :param pulumi.Input[float] available_replicas: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
        :param pulumi.Input[float] collision_count: Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
        :param pulumi.Input[List[pulumi.Input['DeploymentConditionArgs']]] conditions: Represents the latest available observations of a deployment's current state.
        :param pulumi.Input[float] observed_generation: The generation observed by the deployment controller.
        :param pulumi.Input[float] ready_replicas: Total number of ready pods targeted by this deployment.
        :param pulumi.Input[float] replicas: Total number of non-terminated pods targeted by this deployment (their labels match the selector).
        :param pulumi.Input[float] unavailable_replicas: Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
        :param pulumi.Input[float] updated_replicas: Total number of non-terminated pods targeted by this deployment that have the desired template spec.
        """
        __self__.available_replicas = available_replicas
        __self__.collision_count = collision_count
        __self__.conditions = conditions
        __self__.observed_generation = observed_generation
        __self__.ready_replicas = ready_replicas
        __self__.replicas = replicas
        __self__.unavailable_replicas = unavailable_replicas
        __self__.updated_replicas = updated_replicas

@pulumi.input_type
class DeploymentStrategyArgs:
    rolling_update: Optional[pulumi.Input['RollingUpdateDeploymentArgs']] = pulumi.input_property("rollingUpdate")
    """
    Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, rolling_update: Optional[pulumi.Input['RollingUpdateDeploymentArgs']] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        DeploymentStrategy describes how to replace existing pods with new ones.
        :param pulumi.Input['RollingUpdateDeploymentArgs'] rolling_update: Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
        :param pulumi.Input[str] type: Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
        """
        __self__.rolling_update = rolling_update
        __self__.type = type

@pulumi.input_type
class RollbackConfigArgs:
    revision: Optional[pulumi.Input[float]] = pulumi.input_property("revision")
    """
    The revision to rollback to. If set to 0, rollback to the last revision.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, revision: Optional[pulumi.Input[float]] = None) -> None:
        """
        DEPRECATED.
        :param pulumi.Input[float] revision: The revision to rollback to. If set to 0, rollback to the last revision.
        """
        __self__.revision = revision

@pulumi.input_type
class RollingUpdateDeploymentArgs:
    max_surge: Optional[pulumi.Input[Union[float, str]]] = pulumi.input_property("maxSurge")
    """
    The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
    """
    max_unavailable: Optional[pulumi.Input[Union[float, str]]] = pulumi.input_property("maxUnavailable")
    """
    The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max_surge: Optional[pulumi.Input[Union[float, str]]] = None, max_unavailable: Optional[pulumi.Input[Union[float, str]]] = None) -> None:
        """
        Spec to control the desired behavior of rolling update.
        :param pulumi.Input[Union[float, str]] max_surge: The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
        :param pulumi.Input[Union[float, str]] max_unavailable: The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
        """
        __self__.max_surge = max_surge
        __self__.max_unavailable = max_unavailable

@pulumi.input_type
class RollingUpdateStatefulSetStrategyArgs:
    partition: Optional[pulumi.Input[float]] = pulumi.input_property("partition")
    """
    Partition indicates the ordinal at which the StatefulSet should be partitioned.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, partition: Optional[pulumi.Input[float]] = None) -> None:
        """
        RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
        :param pulumi.Input[float] partition: Partition indicates the ordinal at which the StatefulSet should be partitioned.
        """
        __self__.partition = partition

@pulumi.input_type
class StatefulSetArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    spec: Optional[pulumi.Input['StatefulSetSpecArgs']] = pulumi.input_property("spec")
    """
    Spec defines the desired identities of pods in this set.
    """
    status: Optional[pulumi.Input['StatefulSetStatusArgs']] = pulumi.input_property("status")
    """
    Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['StatefulSetSpecArgs']] = None, status: Optional[pulumi.Input['StatefulSetStatusArgs']] = None) -> None:
        """
        StatefulSet represents a set of pods with consistent identities. Identities are defined as:
         - Network: A single stable DNS and hostname.
         - Storage: As many VolumeClaims as requested.
        The StatefulSet guarantees that a given network identity will always map to the same storage identity.

        This resource waits until its status is ready before registering success
        for create/update, and populating output properties from the current state of the resource.
        The following conditions are used to determine whether the resource creation has
        succeeded or failed:

        1. The value of 'spec.replicas' matches '.status.replicas', '.status.currentReplicas',
           and '.status.readyReplicas'.
        2. The value of '.status.updateRevision' matches '.status.currentRevision'.

        If the StatefulSet has not reached a Ready state after 10 minutes, it will
        time out and mark the resource update as Failed. You can override the default timeout value
        by setting the 'customTimeouts' option on the resource.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['StatefulSetSpecArgs'] spec: Spec defines the desired identities of pods in this set.
        :param pulumi.Input['StatefulSetStatusArgs'] status: Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.
        """
        __self__.api_version = 'apps/v1beta1'
        __self__.kind = 'StatefulSet'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class StatefulSetConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    """
    Status of the condition, one of True, False, Unknown.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    Type of statefulset condition.
    """
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    Last time the condition transitioned from one status to another.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    A human readable message indicating details about the transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    The reason for the condition's last transition.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        StatefulSetCondition describes the state of a statefulset at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of statefulset condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        __self__.status = status
        __self__.type = type
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class StatefulSetSpecArgs:
    service_name: pulumi.Input[str] = pulumi.input_property("serviceName")
    """
    serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
    """
    template: pulumi.Input['PodTemplateSpecArgs'] = pulumi.input_property("template")
    """
    template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
    """
    pod_management_policy: Optional[pulumi.Input[str]] = pulumi.input_property("podManagementPolicy")
    """
    podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
    """
    replicas: Optional[pulumi.Input[float]] = pulumi.input_property("replicas")
    """
    replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
    """
    revision_history_limit: Optional[pulumi.Input[float]] = pulumi.input_property("revisionHistoryLimit")
    """
    revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
    """
    selector: Optional[pulumi.Input['LabelSelectorArgs']] = pulumi.input_property("selector")
    """
    selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
    """
    update_strategy: Optional[pulumi.Input['StatefulSetUpdateStrategyArgs']] = pulumi.input_property("updateStrategy")
    """
    updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
    """
    volume_claim_templates: Optional[pulumi.Input[List[pulumi.Input['PersistentVolumeClaimArgs']]]] = pulumi.input_property("volumeClaimTemplates")
    """
    volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, service_name: pulumi.Input[str], template: pulumi.Input['PodTemplateSpecArgs'], pod_management_policy: Optional[pulumi.Input[str]] = None, replicas: Optional[pulumi.Input[float]] = None, revision_history_limit: Optional[pulumi.Input[float]] = None, selector: Optional[pulumi.Input['LabelSelectorArgs']] = None, update_strategy: Optional[pulumi.Input['StatefulSetUpdateStrategyArgs']] = None, volume_claim_templates: Optional[pulumi.Input[List[pulumi.Input['PersistentVolumeClaimArgs']]]] = None) -> None:
        """
        A StatefulSetSpec is the specification of a StatefulSet.
        :param pulumi.Input[str] service_name: serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
        :param pulumi.Input['PodTemplateSpecArgs'] template: template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
        :param pulumi.Input[str] pod_management_policy: podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
        :param pulumi.Input[float] replicas: replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
        :param pulumi.Input[float] revision_history_limit: revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
        :param pulumi.Input['LabelSelectorArgs'] selector: selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        :param pulumi.Input['StatefulSetUpdateStrategyArgs'] update_strategy: updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
        :param pulumi.Input[List[pulumi.Input['PersistentVolumeClaimArgs']]] volume_claim_templates: volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
        """
        __self__.service_name = service_name
        __self__.template = template
        __self__.pod_management_policy = pod_management_policy
        __self__.replicas = replicas
        __self__.revision_history_limit = revision_history_limit
        __self__.selector = selector
        __self__.update_strategy = update_strategy
        __self__.volume_claim_templates = volume_claim_templates

@pulumi.input_type
class StatefulSetStatusArgs:
    replicas: pulumi.Input[float] = pulumi.input_property("replicas")
    """
    replicas is the number of Pods created by the StatefulSet controller.
    """
    collision_count: Optional[pulumi.Input[float]] = pulumi.input_property("collisionCount")
    """
    collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
    """
    conditions: Optional[pulumi.Input[List[pulumi.Input['StatefulSetConditionArgs']]]] = pulumi.input_property("conditions")
    """
    Represents the latest available observations of a statefulset's current state.
    """
    current_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("currentReplicas")
    """
    currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
    """
    current_revision: Optional[pulumi.Input[str]] = pulumi.input_property("currentRevision")
    """
    currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
    """
    observed_generation: Optional[pulumi.Input[float]] = pulumi.input_property("observedGeneration")
    """
    observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
    """
    ready_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("readyReplicas")
    """
    readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
    """
    update_revision: Optional[pulumi.Input[str]] = pulumi.input_property("updateRevision")
    """
    updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
    """
    updated_replicas: Optional[pulumi.Input[float]] = pulumi.input_property("updatedReplicas")
    """
    updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, replicas: pulumi.Input[float], collision_count: Optional[pulumi.Input[float]] = None, conditions: Optional[pulumi.Input[List[pulumi.Input['StatefulSetConditionArgs']]]] = None, current_replicas: Optional[pulumi.Input[float]] = None, current_revision: Optional[pulumi.Input[str]] = None, observed_generation: Optional[pulumi.Input[float]] = None, ready_replicas: Optional[pulumi.Input[float]] = None, update_revision: Optional[pulumi.Input[str]] = None, updated_replicas: Optional[pulumi.Input[float]] = None) -> None:
        """
        StatefulSetStatus represents the current state of a StatefulSet.
        :param pulumi.Input[float] replicas: replicas is the number of Pods created by the StatefulSet controller.
        :param pulumi.Input[float] collision_count: collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        :param pulumi.Input[List[pulumi.Input['StatefulSetConditionArgs']]] conditions: Represents the latest available observations of a statefulset's current state.
        :param pulumi.Input[float] current_replicas: currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
        :param pulumi.Input[str] current_revision: currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
        :param pulumi.Input[float] observed_generation: observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
        :param pulumi.Input[float] ready_replicas: readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
        :param pulumi.Input[str] update_revision: updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
        :param pulumi.Input[float] updated_replicas: updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
        """
        __self__.replicas = replicas
        __self__.collision_count = collision_count
        __self__.conditions = conditions
        __self__.current_replicas = current_replicas
        __self__.current_revision = current_revision
        __self__.observed_generation = observed_generation
        __self__.ready_replicas = ready_replicas
        __self__.update_revision = update_revision
        __self__.updated_replicas = updated_replicas

@pulumi.input_type
class StatefulSetUpdateStrategyArgs:
    rolling_update: Optional[pulumi.Input['RollingUpdateStatefulSetStrategyArgs']] = pulumi.input_property("rollingUpdate")
    """
    RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
    """
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    """
    Type indicates the type of the StatefulSetUpdateStrategy.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, rolling_update: Optional[pulumi.Input['RollingUpdateStatefulSetStrategyArgs']] = None, type: Optional[pulumi.Input[str]] = None) -> None:
        """
        StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
        :param pulumi.Input['RollingUpdateStatefulSetStrategyArgs'] rolling_update: RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
        :param pulumi.Input[str] type: Type indicates the type of the StatefulSetUpdateStrategy.
        """
        __self__.rolling_update = rolling_update
        __self__.type = type

