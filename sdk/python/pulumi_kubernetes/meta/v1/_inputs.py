# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables

__all__ = [
    'LabelSelectorArgs',
    'LabelSelectorRequirementArgs',
    'ListMetaArgs',
    'ManagedFieldsEntryArgs',
    'ObjectMetaArgs',
    'OwnerReferenceArgs',
    'StatusCauseArgs',
    'StatusDetailsArgs',
]

@pulumi.input_type
class LabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[List[pulumi.Input['LabelSelectorRequirementArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
        :param pulumi.Input[List[pulumi.Input['LabelSelectorRequirementArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        pulumi.set(__self__, "matchExpressions", match_expressions)
        pulumi.set(__self__, "matchLabels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[List[pulumi.Input['LabelSelectorRequirementArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        ...

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[List[pulumi.Input['LabelSelectorRequirementArgs']]]]):
        ...

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        ...

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class LabelSelectorRequirementArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[List[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        ...

    @key.setter
    def key(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        ...

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        ...

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...


@pulumi.input_type
class ListMetaArgs:
    def __init__(__self__, *,
                 continue_: Optional[pulumi.Input[str]] = None,
                 remaining_item_count: Optional[pulumi.Input[float]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 self_link: Optional[pulumi.Input[str]] = None):
        """
        ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
        :param pulumi.Input[str] continue_: continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
        :param pulumi.Input[float] remaining_item_count: remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
        :param pulumi.Input[str] resource_version: String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] self_link: selfLink is a URL representing this object. Populated by the system. Read-only.
               
               DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        """
        pulumi.set(__self__, "continue", continue_)
        pulumi.set(__self__, "remainingItemCount", remaining_item_count)
        pulumi.set(__self__, "resourceVersion", resource_version)
        pulumi.set(__self__, "selfLink", self_link)

    @property
    @pulumi.getter(name="continue")
    def continue_(self) -> Optional[pulumi.Input[str]]:
        """
        continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
        """
        ...

    @continue_.setter
    def continue_(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="remainingItemCount")
    def remaining_item_count(self) -> Optional[pulumi.Input[float]]:
        """
        remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
        """
        ...

    @remaining_item_count.setter
    def remaining_item_count(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        ...

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> Optional[pulumi.Input[str]]:
        """
        selfLink is a URL representing this object. Populated by the system. Read-only.

        DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        """
        ...

    @self_link.setter
    def self_link(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ManagedFieldsEntryArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 fields_type: Optional[pulumi.Input[str]] = None,
                 fields_v1: Optional[Any] = None,
                 manager: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None):
        """
        ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
        :param pulumi.Input[str] api_version: APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
        :param pulumi.Input[str] fields_type: FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
        :param Any fields_v1: FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
        :param pulumi.Input[str] manager: Manager is an identifier of the workflow managing these fields.
        :param pulumi.Input[str] operation: Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
        :param pulumi.Input[str] time: Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
        """
        pulumi.set(__self__, "apiVersion", api_version)
        pulumi.set(__self__, "fieldsType", fields_type)
        pulumi.set(__self__, "fieldsV1", fields_v1)
        pulumi.set(__self__, "manager", manager)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
        """
        ...

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="fieldsType")
    def fields_type(self) -> Optional[pulumi.Input[str]]:
        """
        FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
        """
        ...

    @fields_type.setter
    def fields_type(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="fieldsV1")
    def fields_v1(self) -> Optional[Any]:
        """
        FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
        """
        ...

    @fields_v1.setter
    def fields_v1(self, value: Optional[Any]):
        ...

    @property
    @pulumi.getter
    def manager(self) -> Optional[pulumi.Input[str]]:
        """
        Manager is an identifier of the workflow managing these fields.
        """
        ...

    @manager.setter
    def manager(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[str]]:
        """
        Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
        """
        ...

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
        """
        ...

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class ObjectMetaArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 creation_timestamp: Optional[pulumi.Input[str]] = None,
                 deletion_grace_period_seconds: Optional[pulumi.Input[float]] = None,
                 deletion_timestamp: Optional[pulumi.Input[str]] = None,
                 finalizers: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 generate_name: Optional[pulumi.Input[str]] = None,
                 generation: Optional[pulumi.Input[float]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 managed_fields: Optional[pulumi.Input[List[pulumi.Input['ManagedFieldsEntryArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 owner_references: Optional[pulumi.Input[List[pulumi.Input['OwnerReferenceArgs']]]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 self_link: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
        :param pulumi.Input[str] cluster_name: The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
        :param pulumi.Input[str] creation_timestamp: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
               
               Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[float] deletion_grace_period_seconds: Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
        :param pulumi.Input[str] deletion_timestamp: DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
               
               Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input[List[pulumi.Input[str]]] finalizers: Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
        :param pulumi.Input[str] generate_name: GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
               
               If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
               
               Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        :param pulumi.Input[float] generation: A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param pulumi.Input[List[pulumi.Input['ManagedFieldsEntryArgs']]] managed_fields: ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
        :param pulumi.Input[str] name: Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param pulumi.Input[str] namespace: Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
               
               Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
        :param pulumi.Input[List[pulumi.Input['OwnerReferenceArgs']]] owner_references: List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        :param pulumi.Input[str] resource_version: An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
               
               Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] self_link: SelfLink is a URL representing this object. Populated by the system. Read-only.
               
               DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        :param pulumi.Input[str] uid: UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
               
               Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "clusterName", cluster_name)
        pulumi.set(__self__, "creationTimestamp", creation_timestamp)
        pulumi.set(__self__, "deletionGracePeriodSeconds", deletion_grace_period_seconds)
        pulumi.set(__self__, "deletionTimestamp", deletion_timestamp)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "generateName", generate_name)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "managedFields", managed_fields)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "ownerReferences", owner_references)
        pulumi.set(__self__, "resourceVersion", resource_version)
        pulumi.set(__self__, "selfLink", self_link)
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        ...

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
        """
        ...

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

        Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        ...

    @creation_timestamp.setter
    def creation_timestamp(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="deletionGracePeriodSeconds")
    def deletion_grace_period_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
        """
        ...

    @deletion_grace_period_seconds.setter
    def deletion_grace_period_seconds(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter(name="deletionTimestamp")
    def deletion_timestamp(self) -> Optional[pulumi.Input[str]]:
        """
        DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.

        Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        ...

    @deletion_timestamp.setter
    def deletion_timestamp(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
        """
        ...

    @finalizers.setter
    def finalizers(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="generateName")
    def generate_name(self) -> Optional[pulumi.Input[str]]:
        """
        GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

        If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).

        Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        """
        ...

    @generate_name.setter
    def generate_name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[float]]:
        """
        A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
        """
        ...

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        ...

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        ...

    @property
    @pulumi.getter(name="managedFields")
    def managed_fields(self) -> Optional[pulumi.Input[List[pulumi.Input['ManagedFieldsEntryArgs']]]]:
        """
        ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
        """
        ...

    @managed_fields.setter
    def managed_fields(self, value: Optional[pulumi.Input[List[pulumi.Input['ManagedFieldsEntryArgs']]]]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

        Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
        """
        ...

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="ownerReferences")
    def owner_references(self) -> Optional[pulumi.Input[List[pulumi.Input['OwnerReferenceArgs']]]]:
        """
        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        """
        ...

    @owner_references.setter
    def owner_references(self, value: Optional[pulumi.Input[List[pulumi.Input['OwnerReferenceArgs']]]]):
        ...

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

        Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        ...

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> Optional[pulumi.Input[str]]:
        """
        SelfLink is a URL representing this object. Populated by the system. Read-only.

        DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        """
        ...

    @self_link.setter
    def self_link(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

        Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        ...

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class OwnerReferenceArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 uid: pulumi.Input[str],
                 block_owner_deletion: Optional[pulumi.Input[bool]] = None,
                 controller: Optional[pulumi.Input[bool]] = None):
        """
        OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
        :param pulumi.Input[str] api_version: API version of the referent.
        :param pulumi.Input[str] kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[str] name: Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param pulumi.Input[str] uid: UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        :param pulumi.Input[bool] block_owner_deletion: If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        :param pulumi.Input[bool] controller: If true, this reference points to the managing controller.
        """
        pulumi.set(__self__, "apiVersion", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "blockOwnerDeletion", block_owner_deletion)
        pulumi.set(__self__, "controller", controller)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        API version of the referent.
        """
        ...

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        ...

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        ...

    @name.setter
    def name(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Input[str]:
        """
        UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        ...

    @uid.setter
    def uid(self, value: pulumi.Input[str]):
        ...

    @property
    @pulumi.getter(name="blockOwnerDeletion")
    def block_owner_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        """
        ...

    @block_owner_deletion.setter
    def block_owner_deletion(self, value: Optional[pulumi.Input[bool]]):
        ...

    @property
    @pulumi.getter
    def controller(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, this reference points to the managing controller.
        """
        ...

    @controller.setter
    def controller(self, value: Optional[pulumi.Input[bool]]):
        ...


@pulumi.input_type
class StatusCauseArgs:
    def __init__(__self__, *,
                 field: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
        :param pulumi.Input[str] field: The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
               
               Examples:
                 "name" - the field "name" on the current resource
                 "items[0].name" - the field "name" on the first array entry in "items"
        :param pulumi.Input[str] message: A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
        :param pulumi.Input[str] reason: A machine-readable description of the cause of the error. If this value is empty there is no information available.
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

        Examples:
          "name" - the field "name" on the current resource
          "items[0].name" - the field "name" on the first array entry in "items"
        """
        ...

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
        """
        ...

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        A machine-readable description of the cause of the error. If this value is empty there is no information available.
        """
        ...

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        ...


@pulumi.input_type
class StatusDetailsArgs:
    def __init__(__self__, *,
                 causes: Optional[pulumi.Input[List[pulumi.Input['StatusCauseArgs']]]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retry_after_seconds: Optional[pulumi.Input[float]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
        :param pulumi.Input[List[pulumi.Input['StatusCauseArgs']]] causes: The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
        :param pulumi.Input[str] group: The group attribute of the resource associated with the status StatusReason.
        :param pulumi.Input[str] kind: The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[str] name: The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
        :param pulumi.Input[float] retry_after_seconds: If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
        :param pulumi.Input[str] uid: UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        pulumi.set(__self__, "causes", causes)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "retryAfterSeconds", retry_after_seconds)
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def causes(self) -> Optional[pulumi.Input[List[pulumi.Input['StatusCauseArgs']]]]:
        """
        The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
        """
        ...

    @causes.setter
    def causes(self, value: Optional[pulumi.Input[List[pulumi.Input['StatusCauseArgs']]]]):
        ...

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        The group attribute of the resource associated with the status StatusReason.
        """
        ...

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        ...

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
        """
        ...

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        ...

    @property
    @pulumi.getter(name="retryAfterSeconds")
    def retry_after_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
        """
        ...

    @retry_after_seconds.setter
    def retry_after_seconds(self, value: Optional[pulumi.Input[float]]):
        ...

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        ...

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        ...


