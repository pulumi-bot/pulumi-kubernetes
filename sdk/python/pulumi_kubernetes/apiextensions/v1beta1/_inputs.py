# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ... import meta as _meta

__all__ = [
    'CustomResourceColumnDefinitionArgs',
    'CustomResourceConversionArgs',
    'CustomResourceDefinitionArgs',
    'CustomResourceDefinitionConditionArgs',
    'CustomResourceDefinitionNamesArgs',
    'CustomResourceDefinitionSpecArgs',
    'CustomResourceDefinitionStatusArgs',
    'CustomResourceDefinitionVersionArgs',
    'CustomResourceSubresourceScaleArgs',
    'CustomResourceSubresourcesArgs',
    'CustomResourceValidationArgs',
    'ExternalDocumentationArgs',
    'JSONSchemaPropsArgs',
    'ServiceReferenceArgs',
    'WebhookClientConfigArgs',
]

@pulumi.input_type
class CustomResourceColumnDefinitionArgs:
    json_path: pulumi.Input[str] = pulumi.input_property("JSONPath")
    """
    JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
    """
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    name is a human readable name for the column.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
    """
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    """
    description is a human readable description of this column.
    """
    format: Optional[pulumi.Input[str]] = pulumi.input_property("format")
    """
    format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
    """
    priority: Optional[pulumi.Input[float]] = pulumi.input_property("priority")
    """
    priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, json_path: pulumi.Input[str], name: pulumi.Input[str], type: pulumi.Input[str], description: Optional[pulumi.Input[str]] = None, format: Optional[pulumi.Input[str]] = None, priority: Optional[pulumi.Input[float]] = None) -> None:
        """
        CustomResourceColumnDefinition specifies a column for server side printing.
        :param pulumi.Input[str] json_path: JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
        :param pulumi.Input[str] name: name is a human readable name for the column.
        :param pulumi.Input[str] type: type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        :param pulumi.Input[str] description: description is a human readable description of this column.
        :param pulumi.Input[str] format: format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
        :param pulumi.Input[float] priority: priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
        """
        __self__.json_path = json_path
        __self__.name = name
        __self__.type = type
        __self__.description = description
        __self__.format = format
        __self__.priority = priority

@pulumi.input_type
class CustomResourceConversionArgs:
    strategy: pulumi.Input[str] = pulumi.input_property("strategy")
    """
    strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information
      is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhookClientConfig to be set.
    """
    conversion_review_versions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("conversionReviewVersions")
    """
    conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. Defaults to `["v1beta1"]`.
    """
    webhook_client_config: Optional[pulumi.Input['WebhookClientConfigArgs']] = pulumi.input_property("webhookClientConfig")
    """
    webhookClientConfig is the instructions for how to call the webhook if strategy is `Webhook`. Required when `strategy` is set to `Webhook`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, strategy: pulumi.Input[str], conversion_review_versions: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, webhook_client_config: Optional[pulumi.Input['WebhookClientConfigArgs']] = None) -> None:
        """
        CustomResourceConversion describes how to convert different versions of a CR.
        :param pulumi.Input[str] strategy: strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information
                 is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhookClientConfig to be set.
        :param pulumi.Input[List[pulumi.Input[str]]] conversion_review_versions: conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. Defaults to `["v1beta1"]`.
        :param pulumi.Input['WebhookClientConfigArgs'] webhook_client_config: webhookClientConfig is the instructions for how to call the webhook if strategy is `Webhook`. Required when `strategy` is set to `Webhook`.
        """
        __self__.strategy = strategy
        __self__.conversion_review_versions = conversion_review_versions
        __self__.webhook_client_config = webhook_client_config

@pulumi.input_type
class CustomResourceDefinitionArgs:
    spec: pulumi.Input['CustomResourceDefinitionSpecArgs'] = pulumi.input_property("spec")
    """
    spec describes how the user wants the resources to appear
    """
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = pulumi.input_property("metadata")
    status: Optional[pulumi.Input['CustomResourceDefinitionStatusArgs']] = pulumi.input_property("status")
    """
    status indicates the actual state of the CustomResourceDefinition
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, spec: pulumi.Input['CustomResourceDefinitionSpecArgs'], api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaArgs']] = None, status: Optional[pulumi.Input['CustomResourceDefinitionStatusArgs']] = None) -> None:
        """
        CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>. Deprecated in v1.16, planned for removal in v1.19. Use apiextensions.k8s.io/v1 CustomResourceDefinition instead.
        :param pulumi.Input['CustomResourceDefinitionSpecArgs'] spec: spec describes how the user wants the resources to appear
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['CustomResourceDefinitionStatusArgs'] status: status indicates the actual state of the CustomResourceDefinition
        """
        __self__.spec = spec
        __self__.api_version = 'apiextensions.k8s.io/v1beta1'
        __self__.kind = 'CustomResourceDefinition'
        __self__.metadata = metadata
        __self__.status = status

@pulumi.input_type
class CustomResourceDefinitionConditionArgs:
    status: pulumi.Input[str] = pulumi.input_property("status")
    """
    status is the status of the condition. Can be True, False, Unknown.
    """
    type: pulumi.Input[str] = pulumi.input_property("type")
    """
    type is the type of the condition. Types include Established, NamesAccepted and Terminating.
    """
    last_transition_time: Optional[pulumi.Input[str]] = pulumi.input_property("lastTransitionTime")
    """
    lastTransitionTime last time the condition transitioned from one status to another.
    """
    message: Optional[pulumi.Input[str]] = pulumi.input_property("message")
    """
    message is a human-readable message indicating details about last transition.
    """
    reason: Optional[pulumi.Input[str]] = pulumi.input_property("reason")
    """
    reason is a unique, one-word, CamelCase reason for the condition's last transition.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, status: pulumi.Input[str], type: pulumi.Input[str], last_transition_time: Optional[pulumi.Input[str]] = None, message: Optional[pulumi.Input[str]] = None, reason: Optional[pulumi.Input[str]] = None) -> None:
        """
        CustomResourceDefinitionCondition contains details for the current condition of this pod.
        :param pulumi.Input[str] status: status is the status of the condition. Can be True, False, Unknown.
        :param pulumi.Input[str] type: type is the type of the condition. Types include Established, NamesAccepted and Terminating.
        :param pulumi.Input[str] last_transition_time: lastTransitionTime last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: message is a human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: reason is a unique, one-word, CamelCase reason for the condition's last transition.
        """
        __self__.status = status
        __self__.type = type
        __self__.last_transition_time = last_transition_time
        __self__.message = message
        __self__.reason = reason

@pulumi.input_type
class CustomResourceDefinitionNamesArgs:
    kind: pulumi.Input[str] = pulumi.input_property("kind")
    """
    kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
    """
    plural: pulumi.Input[str] = pulumi.input_property("plural")
    """
    plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
    """
    categories: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("categories")
    """
    categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
    """
    list_kind: Optional[pulumi.Input[str]] = pulumi.input_property("listKind")
    """
    listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
    """
    short_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("shortNames")
    """
    shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
    """
    singular: Optional[pulumi.Input[str]] = pulumi.input_property("singular")
    """
    singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, kind: pulumi.Input[str], plural: pulumi.Input[str], categories: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, list_kind: Optional[pulumi.Input[str]] = None, short_names: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, singular: Optional[pulumi.Input[str]] = None) -> None:
        """
        CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
        :param pulumi.Input[str] kind: kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
        :param pulumi.Input[str] plural: plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
        :param pulumi.Input[List[pulumi.Input[str]]] categories: categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
        :param pulumi.Input[str] list_kind: listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
        :param pulumi.Input[List[pulumi.Input[str]]] short_names: shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
        :param pulumi.Input[str] singular: singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
        """
        __self__.kind = kind
        __self__.plural = plural
        __self__.categories = categories
        __self__.list_kind = list_kind
        __self__.short_names = short_names
        __self__.singular = singular

@pulumi.input_type
class CustomResourceDefinitionSpecArgs:
    group: pulumi.Input[str] = pulumi.input_property("group")
    """
    group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
    """
    names: pulumi.Input['CustomResourceDefinitionNamesArgs'] = pulumi.input_property("names")
    """
    names specify the resource and kind names for the custom resource.
    """
    scope: pulumi.Input[str] = pulumi.input_property("scope")
    """
    scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`. Default is `Namespaced`.
    """
    additional_printer_columns: Optional[pulumi.Input[List[pulumi.Input['CustomResourceColumnDefinitionArgs']]]] = pulumi.input_property("additionalPrinterColumns")
    """
    additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
    """
    conversion: Optional[pulumi.Input['CustomResourceConversionArgs']] = pulumi.input_property("conversion")
    """
    conversion defines conversion settings for the CRD.
    """
    preserve_unknown_fields: Optional[pulumi.Input[bool]] = pulumi.input_property("preserveUnknownFields")
    """
    preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the `x-kubernetes-preserve-unknown-fields: true` extension. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
    """
    subresources: Optional[pulumi.Input['CustomResourceSubresourcesArgs']] = pulumi.input_property("subresources")
    """
    subresources specify what subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive.
    """
    validation: Optional[pulumi.Input['CustomResourceValidationArgs']] = pulumi.input_property("validation")
    """
    validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
    """
    version: Optional[pulumi.Input[str]] = pulumi.input_property("version")
    """
    version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
    """
    versions: Optional[pulumi.Input[List[pulumi.Input['CustomResourceDefinitionVersionArgs']]]] = pulumi.input_property("versions")
    """
    versions is the list of all API versions of the defined custom resource. Optional if `version` is specified. The name of the first item in the `versions` list must match the `version` field if `version` and `versions` are both specified. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, group: pulumi.Input[str], names: pulumi.Input['CustomResourceDefinitionNamesArgs'], scope: pulumi.Input[str], additional_printer_columns: Optional[pulumi.Input[List[pulumi.Input['CustomResourceColumnDefinitionArgs']]]] = None, conversion: Optional[pulumi.Input['CustomResourceConversionArgs']] = None, preserve_unknown_fields: Optional[pulumi.Input[bool]] = None, subresources: Optional[pulumi.Input['CustomResourceSubresourcesArgs']] = None, validation: Optional[pulumi.Input['CustomResourceValidationArgs']] = None, version: Optional[pulumi.Input[str]] = None, versions: Optional[pulumi.Input[List[pulumi.Input['CustomResourceDefinitionVersionArgs']]]] = None) -> None:
        """
        CustomResourceDefinitionSpec describes how a user wants their resource to appear
        :param pulumi.Input[str] group: group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
        :param pulumi.Input['CustomResourceDefinitionNamesArgs'] names: names specify the resource and kind names for the custom resource.
        :param pulumi.Input[str] scope: scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`. Default is `Namespaced`.
        :param pulumi.Input[List[pulumi.Input['CustomResourceColumnDefinitionArgs']]] additional_printer_columns: additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
        :param pulumi.Input['CustomResourceConversionArgs'] conversion: conversion defines conversion settings for the CRD.
        :param pulumi.Input[bool] preserve_unknown_fields: preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the `x-kubernetes-preserve-unknown-fields: true` extension. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
        :param pulumi.Input['CustomResourceSubresourcesArgs'] subresources: subresources specify what subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive.
        :param pulumi.Input['CustomResourceValidationArgs'] validation: validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
        :param pulumi.Input[str] version: version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
        :param pulumi.Input[List[pulumi.Input['CustomResourceDefinitionVersionArgs']]] versions: versions is the list of all API versions of the defined custom resource. Optional if `version` is specified. The name of the first item in the `versions` list must match the `version` field if `version` and `versions` are both specified. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
        """
        __self__.group = group
        __self__.names = names
        __self__.scope = scope
        __self__.additional_printer_columns = additional_printer_columns
        __self__.conversion = conversion
        __self__.preserve_unknown_fields = preserve_unknown_fields
        __self__.subresources = subresources
        __self__.validation = validation
        __self__.version = version
        __self__.versions = versions

@pulumi.input_type
class CustomResourceDefinitionStatusArgs:
    accepted_names: pulumi.Input['CustomResourceDefinitionNamesArgs'] = pulumi.input_property("acceptedNames")
    """
    acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
    """
    stored_versions: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("storedVersions")
    """
    storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
    """
    conditions: Optional[pulumi.Input[List[pulumi.Input['CustomResourceDefinitionConditionArgs']]]] = pulumi.input_property("conditions")
    """
    conditions indicate state for particular aspects of a CustomResourceDefinition
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, accepted_names: pulumi.Input['CustomResourceDefinitionNamesArgs'], stored_versions: pulumi.Input[List[pulumi.Input[str]]], conditions: Optional[pulumi.Input[List[pulumi.Input['CustomResourceDefinitionConditionArgs']]]] = None) -> None:
        """
        CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
        :param pulumi.Input['CustomResourceDefinitionNamesArgs'] accepted_names: acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
        :param pulumi.Input[List[pulumi.Input[str]]] stored_versions: storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
        :param pulumi.Input[List[pulumi.Input['CustomResourceDefinitionConditionArgs']]] conditions: conditions indicate state for particular aspects of a CustomResourceDefinition
        """
        __self__.accepted_names = accepted_names
        __self__.stored_versions = stored_versions
        __self__.conditions = conditions

@pulumi.input_type
class CustomResourceDefinitionVersionArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
    """
    served: pulumi.Input[bool] = pulumi.input_property("served")
    """
    served is a flag enabling/disabling this version from being served via REST APIs
    """
    storage: pulumi.Input[bool] = pulumi.input_property("storage")
    """
    storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
    """
    additional_printer_columns: Optional[pulumi.Input[List[pulumi.Input['CustomResourceColumnDefinitionArgs']]]] = pulumi.input_property("additionalPrinterColumns")
    """
    additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. Top-level and per-version columns are mutually exclusive. Per-version columns must not all be set to identical values (top-level columns should be used instead). If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
    """
    schema: Optional[pulumi.Input['CustomResourceValidationArgs']] = pulumi.input_property("schema")
    """
    schema describes the schema used for validation and pruning of this version of the custom resource. Top-level and per-version schemas are mutually exclusive. Per-version schemas must not all be set to identical values (top-level validation schema should be used instead).
    """
    subresources: Optional[pulumi.Input['CustomResourceSubresourcesArgs']] = pulumi.input_property("subresources")
    """
    subresources specify what subresources this version of the defined custom resource have. Top-level and per-version subresources are mutually exclusive. Per-version subresources must not all be set to identical values (top-level subresources should be used instead).
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], served: pulumi.Input[bool], storage: pulumi.Input[bool], additional_printer_columns: Optional[pulumi.Input[List[pulumi.Input['CustomResourceColumnDefinitionArgs']]]] = None, schema: Optional[pulumi.Input['CustomResourceValidationArgs']] = None, subresources: Optional[pulumi.Input['CustomResourceSubresourcesArgs']] = None) -> None:
        """
        CustomResourceDefinitionVersion describes a version for CRD.
        :param pulumi.Input[str] name: name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
        :param pulumi.Input[bool] served: served is a flag enabling/disabling this version from being served via REST APIs
        :param pulumi.Input[bool] storage: storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
        :param pulumi.Input[List[pulumi.Input['CustomResourceColumnDefinitionArgs']]] additional_printer_columns: additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. Top-level and per-version columns are mutually exclusive. Per-version columns must not all be set to identical values (top-level columns should be used instead). If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
        :param pulumi.Input['CustomResourceValidationArgs'] schema: schema describes the schema used for validation and pruning of this version of the custom resource. Top-level and per-version schemas are mutually exclusive. Per-version schemas must not all be set to identical values (top-level validation schema should be used instead).
        :param pulumi.Input['CustomResourceSubresourcesArgs'] subresources: subresources specify what subresources this version of the defined custom resource have. Top-level and per-version subresources are mutually exclusive. Per-version subresources must not all be set to identical values (top-level subresources should be used instead).
        """
        __self__.name = name
        __self__.served = served
        __self__.storage = storage
        __self__.additional_printer_columns = additional_printer_columns
        __self__.schema = schema
        __self__.subresources = subresources

@pulumi.input_type
class CustomResourceSubresourceScaleArgs:
    spec_replicas_path: pulumi.Input[str] = pulumi.input_property("specReplicasPath")
    """
    specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
    """
    status_replicas_path: pulumi.Input[str] = pulumi.input_property("statusReplicasPath")
    """
    statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
    """
    label_selector_path: Optional[pulumi.Input[str]] = pulumi.input_property("labelSelectorPath")
    """
    labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, spec_replicas_path: pulumi.Input[str], status_replicas_path: pulumi.Input[str], label_selector_path: Optional[pulumi.Input[str]] = None) -> None:
        """
        CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
        :param pulumi.Input[str] spec_replicas_path: specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
        :param pulumi.Input[str] status_replicas_path: statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
        :param pulumi.Input[str] label_selector_path: labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
        """
        __self__.spec_replicas_path = spec_replicas_path
        __self__.status_replicas_path = status_replicas_path
        __self__.label_selector_path = label_selector_path

@pulumi.input_type
class CustomResourceSubresourcesArgs:
    scale: Optional[pulumi.Input['CustomResourceSubresourceScaleArgs']] = pulumi.input_property("scale")
    """
    scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.
    """
    status: Optional[Any] = pulumi.input_property("status")
    """
    status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, scale: Optional[pulumi.Input['CustomResourceSubresourceScaleArgs']] = None, status: Optional[Any] = None) -> None:
        """
        CustomResourceSubresources defines the status and scale subresources for CustomResources.
        :param pulumi.Input['CustomResourceSubresourceScaleArgs'] scale: scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.
        :param Any status: status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.
        """
        __self__.scale = scale
        __self__.status = status

@pulumi.input_type
class CustomResourceValidationArgs:
    open_apiv3_schema: Optional[pulumi.Input['JSONSchemaPropsArgs']] = pulumi.input_property("openAPIV3Schema")
    """
    openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, open_apiv3_schema: Optional[pulumi.Input['JSONSchemaPropsArgs']] = None) -> None:
        """
        CustomResourceValidation is a list of validation methods for CustomResources.
        :param pulumi.Input['JSONSchemaPropsArgs'] open_apiv3_schema: openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
        """
        __self__.open_apiv3_schema = open_apiv3_schema

@pulumi.input_type
class ExternalDocumentationArgs:
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    url: Optional[pulumi.Input[str]] = pulumi.input_property("url")

    # pylint: disable=no-self-argument
    def __init__(__self__, *, description: Optional[pulumi.Input[str]] = None, url: Optional[pulumi.Input[str]] = None) -> None:
        """
        ExternalDocumentation allows referencing an external resource for extended documentation.
        """
        __self__.description = description
        __self__.url = url

@pulumi.input_type
class JSONSchemaPropsArgs:
    _ref: Optional[pulumi.Input[str]] = pulumi.input_property("$ref")
    _schema: Optional[pulumi.Input[str]] = pulumi.input_property("$schema")
    additional_items: Optional[pulumi.Input[Union['JSONSchemaPropsArgs', bool]]] = pulumi.input_property("additionalItems")
    additional_properties: Optional[pulumi.Input[Union['JSONSchemaPropsArgs', bool]]] = pulumi.input_property("additionalProperties")
    all_of: Optional[pulumi.Input[List[pulumi.Input['JSONSchemaPropsArgs']]]] = pulumi.input_property("allOf")
    any_of: Optional[pulumi.Input[List[pulumi.Input['JSONSchemaPropsArgs']]]] = pulumi.input_property("anyOf")
    default: Optional[Any] = pulumi.input_property("default")
    """
    default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. CustomResourceDefinitions with defaults must be created using the v1 (or newer) CustomResourceDefinition API.
    """
    definitions: Optional[pulumi.Input[Dict[str, pulumi.Input['JSONSchemaPropsArgs']]]] = pulumi.input_property("definitions")
    dependencies: Optional[pulumi.Input[Dict[str, pulumi.Input[Union['JSONSchemaPropsArgs', List[pulumi.Input[str]]]]]]] = pulumi.input_property("dependencies")
    description: Optional[pulumi.Input[str]] = pulumi.input_property("description")
    enum: Optional[pulumi.Input[List[Any]]] = pulumi.input_property("enum")
    example: Optional[Any] = pulumi.input_property("example")
    exclusive_maximum: Optional[pulumi.Input[bool]] = pulumi.input_property("exclusiveMaximum")
    exclusive_minimum: Optional[pulumi.Input[bool]] = pulumi.input_property("exclusiveMinimum")
    external_docs: Optional[pulumi.Input['ExternalDocumentationArgs']] = pulumi.input_property("externalDocs")
    format: Optional[pulumi.Input[str]] = pulumi.input_property("format")
    """
    format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:

    - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
    """
    id: Optional[pulumi.Input[str]] = pulumi.input_property("id")
    items: Optional[pulumi.Input[Union['JSONSchemaPropsArgs', List[Any]]]] = pulumi.input_property("items")
    max_items: Optional[pulumi.Input[float]] = pulumi.input_property("maxItems")
    max_length: Optional[pulumi.Input[float]] = pulumi.input_property("maxLength")
    max_properties: Optional[pulumi.Input[float]] = pulumi.input_property("maxProperties")
    maximum: Optional[pulumi.Input[float]] = pulumi.input_property("maximum")
    min_items: Optional[pulumi.Input[float]] = pulumi.input_property("minItems")
    min_length: Optional[pulumi.Input[float]] = pulumi.input_property("minLength")
    min_properties: Optional[pulumi.Input[float]] = pulumi.input_property("minProperties")
    minimum: Optional[pulumi.Input[float]] = pulumi.input_property("minimum")
    multiple_of: Optional[pulumi.Input[float]] = pulumi.input_property("multipleOf")
    not_: Optional[pulumi.Input['JSONSchemaPropsArgs']] = pulumi.input_property("not")
    nullable: Optional[pulumi.Input[bool]] = pulumi.input_property("nullable")
    one_of: Optional[pulumi.Input[List[pulumi.Input['JSONSchemaPropsArgs']]]] = pulumi.input_property("oneOf")
    pattern: Optional[pulumi.Input[str]] = pulumi.input_property("pattern")
    pattern_properties: Optional[pulumi.Input[Dict[str, pulumi.Input['JSONSchemaPropsArgs']]]] = pulumi.input_property("patternProperties")
    properties: Optional[pulumi.Input[Dict[str, pulumi.Input['JSONSchemaPropsArgs']]]] = pulumi.input_property("properties")
    required: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("required")
    title: Optional[pulumi.Input[str]] = pulumi.input_property("title")
    type: Optional[pulumi.Input[str]] = pulumi.input_property("type")
    unique_items: Optional[pulumi.Input[bool]] = pulumi.input_property("uniqueItems")
    x_kubernetes_embedded_resource: Optional[pulumi.Input[bool]] = pulumi.input_property("x_kubernetes_embedded_resource")
    """
    x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
    """
    x_kubernetes_int_or_string: Optional[pulumi.Input[bool]] = pulumi.input_property("x_kubernetes_int_or_string")
    """
    x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:

    1) anyOf:
       - type: integer
       - type: string
    2) allOf:
       - anyOf:
         - type: integer
         - type: string
       - ... zero or more
    """
    x_kubernetes_list_map_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("x_kubernetes_list_map_keys")
    """
    x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.

    This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).

    The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
    """
    x_kubernetes_list_type: Optional[pulumi.Input[str]] = pulumi.input_property("x_kubernetes_list_type")
    """
    x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:

    1) `atomic`: the list is treated as a single entity, like a scalar.
         Atomic lists will be entirely replaced when updated. This extension
         may be used on any type of list (struct, scalar, ...).
    2) `set`:
         Sets are lists that must not have multiple items with the same value. Each
         value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
         array with x-kubernetes-list-type `atomic`.
    3) `map`:
         These lists are like maps in that their elements have a non-index key
         used to identify them. Order is preserved upon merge. The map tag
         must only be used on a list with elements of type object.
    Defaults to atomic for arrays.
    """
    x_kubernetes_map_type: Optional[pulumi.Input[str]] = pulumi.input_property("x_kubernetes_map_type")
    """
    x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:

    1) `granular`:
         These maps are actual maps (key-value pairs) and each fields are independent
         from each other (they can each be manipulated by separate actors). This is
         the default behaviour for all maps.
    2) `atomic`: the list is treated as a single entity, like a scalar.
         Atomic maps will be entirely replaced when updated.
    """
    x_kubernetes_preserve_unknown_fields: Optional[pulumi.Input[bool]] = pulumi.input_property("x_kubernetes_preserve_unknown_fields")
    """
    x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, _ref: Optional[pulumi.Input[str]] = None, _schema: Optional[pulumi.Input[str]] = None, additional_items: Optional[pulumi.Input[Union['JSONSchemaPropsArgs', bool]]] = None, additional_properties: Optional[pulumi.Input[Union['JSONSchemaPropsArgs', bool]]] = None, all_of: Optional[pulumi.Input[List[pulumi.Input['JSONSchemaPropsArgs']]]] = None, any_of: Optional[pulumi.Input[List[pulumi.Input['JSONSchemaPropsArgs']]]] = None, default: Optional[Any] = None, definitions: Optional[pulumi.Input[Dict[str, pulumi.Input['JSONSchemaPropsArgs']]]] = None, dependencies: Optional[pulumi.Input[Dict[str, pulumi.Input[Union['JSONSchemaPropsArgs', List[pulumi.Input[str]]]]]]] = None, description: Optional[pulumi.Input[str]] = None, enum: Optional[pulumi.Input[List[Any]]] = None, example: Optional[Any] = None, exclusive_maximum: Optional[pulumi.Input[bool]] = None, exclusive_minimum: Optional[pulumi.Input[bool]] = None, external_docs: Optional[pulumi.Input['ExternalDocumentationArgs']] = None, format: Optional[pulumi.Input[str]] = None, id: Optional[pulumi.Input[str]] = None, items: Optional[pulumi.Input[Union['JSONSchemaPropsArgs', List[Any]]]] = None, max_items: Optional[pulumi.Input[float]] = None, max_length: Optional[pulumi.Input[float]] = None, max_properties: Optional[pulumi.Input[float]] = None, maximum: Optional[pulumi.Input[float]] = None, min_items: Optional[pulumi.Input[float]] = None, min_length: Optional[pulumi.Input[float]] = None, min_properties: Optional[pulumi.Input[float]] = None, minimum: Optional[pulumi.Input[float]] = None, multiple_of: Optional[pulumi.Input[float]] = None, not_: Optional[pulumi.Input['JSONSchemaPropsArgs']] = None, nullable: Optional[pulumi.Input[bool]] = None, one_of: Optional[pulumi.Input[List[pulumi.Input['JSONSchemaPropsArgs']]]] = None, pattern: Optional[pulumi.Input[str]] = None, pattern_properties: Optional[pulumi.Input[Dict[str, pulumi.Input['JSONSchemaPropsArgs']]]] = None, properties: Optional[pulumi.Input[Dict[str, pulumi.Input['JSONSchemaPropsArgs']]]] = None, required: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, title: Optional[pulumi.Input[str]] = None, type: Optional[pulumi.Input[str]] = None, unique_items: Optional[pulumi.Input[bool]] = None, x_kubernetes_embedded_resource: Optional[pulumi.Input[bool]] = None, x_kubernetes_int_or_string: Optional[pulumi.Input[bool]] = None, x_kubernetes_list_map_keys: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, x_kubernetes_list_type: Optional[pulumi.Input[str]] = None, x_kubernetes_map_type: Optional[pulumi.Input[str]] = None, x_kubernetes_preserve_unknown_fields: Optional[pulumi.Input[bool]] = None) -> None:
        """
        JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
        :param Any default: default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. CustomResourceDefinitions with defaults must be created using the v1 (or newer) CustomResourceDefinition API.
        :param pulumi.Input[str] format: format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
               
               - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
        :param pulumi.Input[bool] x_kubernetes_embedded_resource: x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
        :param pulumi.Input[bool] x_kubernetes_int_or_string: x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:
               
               1) anyOf:
                  - type: integer
                  - type: string
               2) allOf:
                  - anyOf:
                    - type: integer
                    - type: string
                  - ... zero or more
        :param pulumi.Input[List[pulumi.Input[str]]] x_kubernetes_list_map_keys: x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.
               
               This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).
               
               The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
        :param pulumi.Input[str] x_kubernetes_list_type: x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:
               
               1) `atomic`: the list is treated as a single entity, like a scalar.
                    Atomic lists will be entirely replaced when updated. This extension
                    may be used on any type of list (struct, scalar, ...).
               2) `set`:
                    Sets are lists that must not have multiple items with the same value. Each
                    value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
                    array with x-kubernetes-list-type `atomic`.
               3) `map`:
                    These lists are like maps in that their elements have a non-index key
                    used to identify them. Order is preserved upon merge. The map tag
                    must only be used on a list with elements of type object.
               Defaults to atomic for arrays.
        :param pulumi.Input[str] x_kubernetes_map_type: x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:
               
               1) `granular`:
                    These maps are actual maps (key-value pairs) and each fields are independent
                    from each other (they can each be manipulated by separate actors). This is
                    the default behaviour for all maps.
               2) `atomic`: the list is treated as a single entity, like a scalar.
                    Atomic maps will be entirely replaced when updated.
        :param pulumi.Input[bool] x_kubernetes_preserve_unknown_fields: x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
        """
        __self__._ref = _ref
        __self__._schema = _schema
        __self__.additional_items = additional_items
        __self__.additional_properties = additional_properties
        __self__.all_of = all_of
        __self__.any_of = any_of
        __self__.default = default
        __self__.definitions = definitions
        __self__.dependencies = dependencies
        __self__.description = description
        __self__.enum = enum
        __self__.example = example
        __self__.exclusive_maximum = exclusive_maximum
        __self__.exclusive_minimum = exclusive_minimum
        __self__.external_docs = external_docs
        __self__.format = format
        __self__.id = id
        __self__.items = items
        __self__.max_items = max_items
        __self__.max_length = max_length
        __self__.max_properties = max_properties
        __self__.maximum = maximum
        __self__.min_items = min_items
        __self__.min_length = min_length
        __self__.min_properties = min_properties
        __self__.minimum = minimum
        __self__.multiple_of = multiple_of
        __self__.not_ = not_
        __self__.nullable = nullable
        __self__.one_of = one_of
        __self__.pattern = pattern
        __self__.pattern_properties = pattern_properties
        __self__.properties = properties
        __self__.required = required
        __self__.title = title
        __self__.type = type
        __self__.unique_items = unique_items
        __self__.x_kubernetes_embedded_resource = x_kubernetes_embedded_resource
        __self__.x_kubernetes_int_or_string = x_kubernetes_int_or_string
        __self__.x_kubernetes_list_map_keys = x_kubernetes_list_map_keys
        __self__.x_kubernetes_list_type = x_kubernetes_list_type
        __self__.x_kubernetes_map_type = x_kubernetes_map_type
        __self__.x_kubernetes_preserve_unknown_fields = x_kubernetes_preserve_unknown_fields

@pulumi.input_type
class ServiceReferenceArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    name is the name of the service. Required
    """
    namespace: pulumi.Input[str] = pulumi.input_property("namespace")
    """
    namespace is the namespace of the service. Required
    """
    path: Optional[pulumi.Input[str]] = pulumi.input_property("path")
    """
    path is an optional URL path at which the webhook will be contacted.
    """
    port: Optional[pulumi.Input[float]] = pulumi.input_property("port")
    """
    port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str], namespace: pulumi.Input[str], path: Optional[pulumi.Input[str]] = None, port: Optional[pulumi.Input[float]] = None) -> None:
        """
        ServiceReference holds a reference to Service.legacy.k8s.io
        :param pulumi.Input[str] name: name is the name of the service. Required
        :param pulumi.Input[str] namespace: namespace is the namespace of the service. Required
        :param pulumi.Input[str] path: path is an optional URL path at which the webhook will be contacted.
        :param pulumi.Input[float] port: port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
        """
        __self__.name = name
        __self__.namespace = namespace
        __self__.path = path
        __self__.port = port

@pulumi.input_type
class WebhookClientConfigArgs:
    ca_bundle: Optional[pulumi.Input[str]] = pulumi.input_property("caBundle")
    """
    caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
    """
    service: Optional[pulumi.Input['ServiceReferenceArgs']] = pulumi.input_property("service")
    """
    service is a reference to the service for this webhook. Either service or url must be specified.

    If the webhook is running within the cluster, then you should use `service`.
    """
    url: Optional[pulumi.Input[str]] = pulumi.input_property("url")
    """
    url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.

    The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.

    Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.

    The scheme must be "https"; the URL must begin with "https://".

    A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.

    Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ca_bundle: Optional[pulumi.Input[str]] = None, service: Optional[pulumi.Input['ServiceReferenceArgs']] = None, url: Optional[pulumi.Input[str]] = None) -> None:
        """
        WebhookClientConfig contains the information to make a TLS connection with the webhook.
        :param pulumi.Input[str] ca_bundle: caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
        :param pulumi.Input['ServiceReferenceArgs'] service: service is a reference to the service for this webhook. Either service or url must be specified.
               
               If the webhook is running within the cluster, then you should use `service`.
        :param pulumi.Input[str] url: url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
               
               The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
               
               Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
               
               The scheme must be "https"; the URL must begin with "https://".
               
               A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
               
               Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
        """
        __self__.ca_bundle = ca_bundle
        __self__.service = service
        __self__.url = url

