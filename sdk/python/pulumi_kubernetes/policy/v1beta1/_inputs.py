# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Optional, Tuple, Union
from ... import _utilities, _tables
from ._inputs import *
from . import outputs

@pulumi.input_type
class AllowedCSIDriverArgs:
    name: pulumi.Input[str] = pulumi.input_property("name")
    """
    Name is the registered name of the CSI driver
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, name: pulumi.Input[str]) -> None:
        """
        AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
        :param pulumi.Input[str] name: Name is the registered name of the CSI driver
        """
        __self__.name = name

@pulumi.input_type
class AllowedFlexVolumeArgs:
    driver: pulumi.Input[str] = pulumi.input_property("driver")
    """
    driver is the name of the Flexvolume driver.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, driver: pulumi.Input[str]) -> None:
        """
        AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
        :param pulumi.Input[str] driver: driver is the name of the Flexvolume driver.
        """
        __self__.driver = driver

@pulumi.input_type
class AllowedHostPathArgs:
    path_prefix: Optional[pulumi.Input[str]] = pulumi.input_property("pathPrefix")
    """
    pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.

    Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
    """
    read_only: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnly")
    """
    when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, path_prefix: Optional[pulumi.Input[str]] = None, read_only: Optional[pulumi.Input[bool]] = None) -> None:
        """
        AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.
        :param pulumi.Input[str] path_prefix: pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
               
               Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
        :param pulumi.Input[bool] read_only: when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
        """
        __self__.path_prefix = path_prefix
        __self__.read_only = read_only

@pulumi.input_type
class FSGroupStrategyOptionsArgs:
    ranges: Optional[pulumi.Input[List[pulumi.Input['IDRangeArgs']]]] = pulumi.input_property("ranges")
    """
    ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
    """
    rule: Optional[pulumi.Input[str]] = pulumi.input_property("rule")
    """
    rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ranges: Optional[pulumi.Input[List[pulumi.Input['IDRangeArgs']]]] = None, rule: Optional[pulumi.Input[str]] = None) -> None:
        """
        FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
        :param pulumi.Input[List[pulumi.Input['IDRangeArgs']]] ranges: ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
        :param pulumi.Input[str] rule: rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
        """
        __self__.ranges = ranges
        __self__.rule = rule

@pulumi.input_type
class HostPortRangeArgs:
    max: pulumi.Input[float] = pulumi.input_property("max")
    """
    max is the end of the range, inclusive.
    """
    min: pulumi.Input[float] = pulumi.input_property("min")
    """
    min is the start of the range, inclusive.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max: pulumi.Input[float], min: pulumi.Input[float]) -> None:
        """
        HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.
        :param pulumi.Input[float] max: max is the end of the range, inclusive.
        :param pulumi.Input[float] min: min is the start of the range, inclusive.
        """
        __self__.max = max
        __self__.min = min

@pulumi.input_type
class IDRangeArgs:
    max: pulumi.Input[float] = pulumi.input_property("max")
    """
    max is the end of the range, inclusive.
    """
    min: pulumi.Input[float] = pulumi.input_property("min")
    """
    min is the start of the range, inclusive.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max: pulumi.Input[float], min: pulumi.Input[float]) -> None:
        """
        IDRange provides a min/max of an allowed range of IDs.
        :param pulumi.Input[float] max: max is the end of the range, inclusive.
        :param pulumi.Input[float] min: min is the start of the range, inclusive.
        """
        __self__.max = max
        __self__.min = min

@pulumi.input_type
class PodDisruptionBudgetArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    spec: Optional[pulumi.Input['PodDisruptionBudgetSpecArgs']] = pulumi.input_property("spec")
    """
    Specification of the desired behavior of the PodDisruptionBudget.
    """
    status: Optional[pulumi.Input['PodDisruptionBudgetStatusArgs']] = pulumi.input_property("status")
    """
    Most recently observed status of the PodDisruptionBudget.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['PodDisruptionBudgetSpecArgs']] = None, status: Optional[pulumi.Input['PodDisruptionBudgetStatusArgs']] = None) -> None:
        """
        PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['PodDisruptionBudgetSpecArgs'] spec: Specification of the desired behavior of the PodDisruptionBudget.
        :param pulumi.Input['PodDisruptionBudgetStatusArgs'] status: Most recently observed status of the PodDisruptionBudget.
        """
        __self__.api_version = 'policy/v1beta1'
        __self__.kind = 'PodDisruptionBudget'
        __self__.metadata = metadata
        __self__.spec = spec
        __self__.status = status

@pulumi.input_type
class PodDisruptionBudgetSpecArgs:
    max_unavailable: Optional[pulumi.Input[Union[float, str]]] = pulumi.input_property("maxUnavailable")
    """
    An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
    """
    min_available: Optional[pulumi.Input[Union[float, str]]] = pulumi.input_property("minAvailable")
    """
    An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
    """
    selector: Optional[pulumi.Input['LabelSelectorArgs']] = pulumi.input_property("selector")
    """
    Label query over pods whose evictions are managed by the disruption budget.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, max_unavailable: Optional[pulumi.Input[Union[float, str]]] = None, min_available: Optional[pulumi.Input[Union[float, str]]] = None, selector: Optional[pulumi.Input['LabelSelectorArgs']] = None) -> None:
        """
        PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
        :param pulumi.Input[Union[float, str]] max_unavailable: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
        :param pulumi.Input[Union[float, str]] min_available: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
        :param pulumi.Input['LabelSelectorArgs'] selector: Label query over pods whose evictions are managed by the disruption budget.
        """
        __self__.max_unavailable = max_unavailable
        __self__.min_available = min_available
        __self__.selector = selector

@pulumi.input_type
class PodDisruptionBudgetStatusArgs:
    current_healthy: pulumi.Input[float] = pulumi.input_property("currentHealthy")
    """
    current number of healthy pods
    """
    desired_healthy: pulumi.Input[float] = pulumi.input_property("desiredHealthy")
    """
    minimum desired number of healthy pods
    """
    disruptions_allowed: pulumi.Input[float] = pulumi.input_property("disruptionsAllowed")
    """
    Number of pod disruptions that are currently allowed.
    """
    expected_pods: pulumi.Input[float] = pulumi.input_property("expectedPods")
    """
    total number of pods counted by this disruption budget
    """
    disrupted_pods: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = pulumi.input_property("disruptedPods")
    """
    DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
    """
    observed_generation: Optional[pulumi.Input[float]] = pulumi.input_property("observedGeneration")
    """
    Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, current_healthy: pulumi.Input[float], desired_healthy: pulumi.Input[float], disruptions_allowed: pulumi.Input[float], expected_pods: pulumi.Input[float], disrupted_pods: Optional[pulumi.Input[Dict[str, pulumi.Input[str]]]] = None, observed_generation: Optional[pulumi.Input[float]] = None) -> None:
        """
        PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
        :param pulumi.Input[float] current_healthy: current number of healthy pods
        :param pulumi.Input[float] desired_healthy: minimum desired number of healthy pods
        :param pulumi.Input[float] disruptions_allowed: Number of pod disruptions that are currently allowed.
        :param pulumi.Input[float] expected_pods: total number of pods counted by this disruption budget
        :param pulumi.Input[Dict[str, pulumi.Input[str]]] disrupted_pods: DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
        :param pulumi.Input[float] observed_generation: Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
        """
        __self__.current_healthy = current_healthy
        __self__.desired_healthy = desired_healthy
        __self__.disruptions_allowed = disruptions_allowed
        __self__.expected_pods = expected_pods
        __self__.disrupted_pods = disrupted_pods
        __self__.observed_generation = observed_generation

@pulumi.input_type
class PodSecurityPolicyArgs:
    api_version: Optional[pulumi.Input[str]] = pulumi.input_property("apiVersion")
    """
    APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    """
    kind: Optional[pulumi.Input[str]] = pulumi.input_property("kind")
    """
    Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """
    metadata: Optional[pulumi.Input['ObjectMetaArgs']] = pulumi.input_property("metadata")
    """
    Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """
    spec: Optional[pulumi.Input['PodSecurityPolicySpecArgs']] = pulumi.input_property("spec")
    """
    spec defines the policy enforced.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, api_version: Optional[pulumi.Input[str]] = None, kind: Optional[pulumi.Input[str]] = None, metadata: Optional[pulumi.Input['ObjectMetaArgs']] = None, spec: Optional[pulumi.Input['PodSecurityPolicySpecArgs']] = None) -> None:
        """
        PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['PodSecurityPolicySpecArgs'] spec: spec defines the policy enforced.
        """
        __self__.api_version = 'policy/v1beta1'
        __self__.kind = 'PodSecurityPolicy'
        __self__.metadata = metadata
        __self__.spec = spec

@pulumi.input_type
class PodSecurityPolicySpecArgs:
    fs_group: pulumi.Input['FSGroupStrategyOptionsArgs'] = pulumi.input_property("fsGroup")
    """
    fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
    """
    run_as_user: pulumi.Input['RunAsUserStrategyOptionsArgs'] = pulumi.input_property("runAsUser")
    """
    runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
    """
    se_linux: pulumi.Input['SELinuxStrategyOptionsArgs'] = pulumi.input_property("seLinux")
    """
    seLinux is the strategy that will dictate the allowable labels that may be set.
    """
    supplemental_groups: pulumi.Input['SupplementalGroupsStrategyOptionsArgs'] = pulumi.input_property("supplementalGroups")
    """
    supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
    """
    allow_privilege_escalation: Optional[pulumi.Input[bool]] = pulumi.input_property("allowPrivilegeEscalation")
    """
    allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
    """
    allowed_csi_drivers: Optional[pulumi.Input[List[pulumi.Input['AllowedCSIDriverArgs']]]] = pulumi.input_property("allowedCSIDrivers")
    """
    AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.
    """
    allowed_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("allowedCapabilities")
    """
    allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
    """
    allowed_flex_volumes: Optional[pulumi.Input[List[pulumi.Input['AllowedFlexVolumeArgs']]]] = pulumi.input_property("allowedFlexVolumes")
    """
    allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
    """
    allowed_host_paths: Optional[pulumi.Input[List[pulumi.Input['AllowedHostPathArgs']]]] = pulumi.input_property("allowedHostPaths")
    """
    allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
    """
    allowed_proc_mount_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("allowedProcMountTypes")
    """
    AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
    """
    allowed_unsafe_sysctls: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("allowedUnsafeSysctls")
    """
    allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.

    Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
    """
    default_add_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("defaultAddCapabilities")
    """
    defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
    """
    default_allow_privilege_escalation: Optional[pulumi.Input[bool]] = pulumi.input_property("defaultAllowPrivilegeEscalation")
    """
    defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
    """
    forbidden_sysctls: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("forbiddenSysctls")
    """
    forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.

    Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
    """
    host_ipc: Optional[pulumi.Input[bool]] = pulumi.input_property("hostIPC")
    """
    hostIPC determines if the policy allows the use of HostIPC in the pod spec.
    """
    host_network: Optional[pulumi.Input[bool]] = pulumi.input_property("hostNetwork")
    """
    hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
    """
    host_pid: Optional[pulumi.Input[bool]] = pulumi.input_property("hostPID")
    """
    hostPID determines if the policy allows the use of HostPID in the pod spec.
    """
    host_ports: Optional[pulumi.Input[List[pulumi.Input['HostPortRangeArgs']]]] = pulumi.input_property("hostPorts")
    """
    hostPorts determines which host port ranges are allowed to be exposed.
    """
    privileged: Optional[pulumi.Input[bool]] = pulumi.input_property("privileged")
    """
    privileged determines if a pod can request to be run as privileged.
    """
    read_only_root_filesystem: Optional[pulumi.Input[bool]] = pulumi.input_property("readOnlyRootFilesystem")
    """
    readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
    """
    required_drop_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("requiredDropCapabilities")
    """
    requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
    """
    run_as_group: Optional[pulumi.Input['RunAsGroupStrategyOptionsArgs']] = pulumi.input_property("runAsGroup")
    """
    RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
    """
    runtime_class: Optional[pulumi.Input['RuntimeClassStrategyOptionsArgs']] = pulumi.input_property("runtimeClass")
    """
    runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
    """
    volumes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = pulumi.input_property("volumes")
    """
    volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, fs_group: pulumi.Input['FSGroupStrategyOptionsArgs'], run_as_user: pulumi.Input['RunAsUserStrategyOptionsArgs'], se_linux: pulumi.Input['SELinuxStrategyOptionsArgs'], supplemental_groups: pulumi.Input['SupplementalGroupsStrategyOptionsArgs'], allow_privilege_escalation: Optional[pulumi.Input[bool]] = None, allowed_csi_drivers: Optional[pulumi.Input[List[pulumi.Input['AllowedCSIDriverArgs']]]] = None, allowed_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, allowed_flex_volumes: Optional[pulumi.Input[List[pulumi.Input['AllowedFlexVolumeArgs']]]] = None, allowed_host_paths: Optional[pulumi.Input[List[pulumi.Input['AllowedHostPathArgs']]]] = None, allowed_proc_mount_types: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, allowed_unsafe_sysctls: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, default_add_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, default_allow_privilege_escalation: Optional[pulumi.Input[bool]] = None, forbidden_sysctls: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, host_ipc: Optional[pulumi.Input[bool]] = None, host_network: Optional[pulumi.Input[bool]] = None, host_pid: Optional[pulumi.Input[bool]] = None, host_ports: Optional[pulumi.Input[List[pulumi.Input['HostPortRangeArgs']]]] = None, privileged: Optional[pulumi.Input[bool]] = None, read_only_root_filesystem: Optional[pulumi.Input[bool]] = None, required_drop_capabilities: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None, run_as_group: Optional[pulumi.Input['RunAsGroupStrategyOptionsArgs']] = None, runtime_class: Optional[pulumi.Input['RuntimeClassStrategyOptionsArgs']] = None, volumes: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None) -> None:
        """
        PodSecurityPolicySpec defines the policy enforced.
        :param pulumi.Input['FSGroupStrategyOptionsArgs'] fs_group: fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
        :param pulumi.Input['RunAsUserStrategyOptionsArgs'] run_as_user: runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
        :param pulumi.Input['SELinuxStrategyOptionsArgs'] se_linux: seLinux is the strategy that will dictate the allowable labels that may be set.
        :param pulumi.Input['SupplementalGroupsStrategyOptionsArgs'] supplemental_groups: supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
        :param pulumi.Input[bool] allow_privilege_escalation: allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
        :param pulumi.Input[List[pulumi.Input['AllowedCSIDriverArgs']]] allowed_csi_drivers: AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_capabilities: allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
        :param pulumi.Input[List[pulumi.Input['AllowedFlexVolumeArgs']]] allowed_flex_volumes: allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
        :param pulumi.Input[List[pulumi.Input['AllowedHostPathArgs']]] allowed_host_paths: allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_proc_mount_types: AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_unsafe_sysctls: allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
               
               Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
        :param pulumi.Input[List[pulumi.Input[str]]] default_add_capabilities: defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
        :param pulumi.Input[bool] default_allow_privilege_escalation: defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
        :param pulumi.Input[List[pulumi.Input[str]]] forbidden_sysctls: forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
               
               Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
        :param pulumi.Input[bool] host_ipc: hostIPC determines if the policy allows the use of HostIPC in the pod spec.
        :param pulumi.Input[bool] host_network: hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
        :param pulumi.Input[bool] host_pid: hostPID determines if the policy allows the use of HostPID in the pod spec.
        :param pulumi.Input[List[pulumi.Input['HostPortRangeArgs']]] host_ports: hostPorts determines which host port ranges are allowed to be exposed.
        :param pulumi.Input[bool] privileged: privileged determines if a pod can request to be run as privileged.
        :param pulumi.Input[bool] read_only_root_filesystem: readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
        :param pulumi.Input[List[pulumi.Input[str]]] required_drop_capabilities: requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
        :param pulumi.Input['RunAsGroupStrategyOptionsArgs'] run_as_group: RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
        :param pulumi.Input['RuntimeClassStrategyOptionsArgs'] runtime_class: runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
        :param pulumi.Input[List[pulumi.Input[str]]] volumes: volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
        """
        __self__.fs_group = fs_group
        __self__.run_as_user = run_as_user
        __self__.se_linux = se_linux
        __self__.supplemental_groups = supplemental_groups
        __self__.allow_privilege_escalation = allow_privilege_escalation
        __self__.allowed_csi_drivers = allowed_csi_drivers
        __self__.allowed_capabilities = allowed_capabilities
        __self__.allowed_flex_volumes = allowed_flex_volumes
        __self__.allowed_host_paths = allowed_host_paths
        __self__.allowed_proc_mount_types = allowed_proc_mount_types
        __self__.allowed_unsafe_sysctls = allowed_unsafe_sysctls
        __self__.default_add_capabilities = default_add_capabilities
        __self__.default_allow_privilege_escalation = default_allow_privilege_escalation
        __self__.forbidden_sysctls = forbidden_sysctls
        __self__.host_ipc = host_ipc
        __self__.host_network = host_network
        __self__.host_pid = host_pid
        __self__.host_ports = host_ports
        __self__.privileged = privileged
        __self__.read_only_root_filesystem = read_only_root_filesystem
        __self__.required_drop_capabilities = required_drop_capabilities
        __self__.run_as_group = run_as_group
        __self__.runtime_class = runtime_class
        __self__.volumes = volumes

@pulumi.input_type
class RunAsGroupStrategyOptionsArgs:
    rule: pulumi.Input[str] = pulumi.input_property("rule")
    """
    rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
    """
    ranges: Optional[pulumi.Input[List[pulumi.Input['IDRangeArgs']]]] = pulumi.input_property("ranges")
    """
    ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, rule: pulumi.Input[str], ranges: Optional[pulumi.Input[List[pulumi.Input['IDRangeArgs']]]] = None) -> None:
        """
        RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.
        :param pulumi.Input[str] rule: rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
        :param pulumi.Input[List[pulumi.Input['IDRangeArgs']]] ranges: ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
        """
        __self__.rule = rule
        __self__.ranges = ranges

@pulumi.input_type
class RunAsUserStrategyOptionsArgs:
    rule: pulumi.Input[str] = pulumi.input_property("rule")
    """
    rule is the strategy that will dictate the allowable RunAsUser values that may be set.
    """
    ranges: Optional[pulumi.Input[List[pulumi.Input['IDRangeArgs']]]] = pulumi.input_property("ranges")
    """
    ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, rule: pulumi.Input[str], ranges: Optional[pulumi.Input[List[pulumi.Input['IDRangeArgs']]]] = None) -> None:
        """
        RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.
        :param pulumi.Input[str] rule: rule is the strategy that will dictate the allowable RunAsUser values that may be set.
        :param pulumi.Input[List[pulumi.Input['IDRangeArgs']]] ranges: ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
        """
        __self__.rule = rule
        __self__.ranges = ranges

@pulumi.input_type
class RuntimeClassStrategyOptionsArgs:
    allowed_runtime_class_names: pulumi.Input[List[pulumi.Input[str]]] = pulumi.input_property("allowedRuntimeClassNames")
    """
    allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
    """
    default_runtime_class_name: Optional[pulumi.Input[str]] = pulumi.input_property("defaultRuntimeClassName")
    """
    defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, allowed_runtime_class_names: pulumi.Input[List[pulumi.Input[str]]], default_runtime_class_name: Optional[pulumi.Input[str]] = None) -> None:
        """
        RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_runtime_class_names: allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
        :param pulumi.Input[str] default_runtime_class_name: defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
        """
        __self__.allowed_runtime_class_names = allowed_runtime_class_names
        __self__.default_runtime_class_name = default_runtime_class_name

@pulumi.input_type
class SELinuxStrategyOptionsArgs:
    rule: pulumi.Input[str] = pulumi.input_property("rule")
    """
    rule is the strategy that will dictate the allowable labels that may be set.
    """
    se_linux_options: Optional[pulumi.Input['SELinuxOptionsArgs']] = pulumi.input_property("seLinuxOptions")
    """
    seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, rule: pulumi.Input[str], se_linux_options: Optional[pulumi.Input['SELinuxOptionsArgs']] = None) -> None:
        """
        SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
        :param pulumi.Input[str] rule: rule is the strategy that will dictate the allowable labels that may be set.
        :param pulumi.Input['SELinuxOptionsArgs'] se_linux_options: seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        """
        __self__.rule = rule
        __self__.se_linux_options = se_linux_options

@pulumi.input_type
class SupplementalGroupsStrategyOptionsArgs:
    ranges: Optional[pulumi.Input[List[pulumi.Input['IDRangeArgs']]]] = pulumi.input_property("ranges")
    """
    ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
    """
    rule: Optional[pulumi.Input[str]] = pulumi.input_property("rule")
    """
    rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
    """

    # pylint: disable=no-self-argument
    def __init__(__self__, *, ranges: Optional[pulumi.Input[List[pulumi.Input['IDRangeArgs']]]] = None, rule: Optional[pulumi.Input[str]] = None) -> None:
        """
        SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
        :param pulumi.Input[List[pulumi.Input['IDRangeArgs']]] ranges: ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
        :param pulumi.Input[str] rule: rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
        """
        __self__.ranges = ranges
        __self__.rule = rule

